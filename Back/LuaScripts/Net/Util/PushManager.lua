---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by diyigeng.
--- DateTime: 2018/12/10 10:29
--- 推送相关事件处理
---
local PushManager = BaseClass("PushManager")
local function AddCallback(keeper, msg_name, callback)
    assert(callback ~= nil)
    keeper[msg_name] = callback
end

--[[
 注册相关推送事件
]]
local function __addEvent(self)

    local function _AddCall(msg_name, callback)
        local bindFunc = Bind(self, callback)
        AddCallback(self._callback, msg_name, bindFunc)
    end

    _AddCall(MsgIDDefine.PBINDICATION_NEW_MAIL_INDICATION, self.OnNewMailIndication)
    _AddCall(MsgIDDefine.PBINDICATION_MISSION_INDICATION, self.OnNewMissionIndication)
    _AddCall(MsgIDDefine.PBINDICATION_FRIEND_APPLY_INDICATION, self.OnFriendIndication)
    _AddCall(MsgIDDefine.PBINDICATION_FRIEND_CHAT_INDICATION, self.OnFriendChatIndication)
    _AddCall(MsgIDDefine.PBINDICATION_DAY_FLUSH_INDICATION, self.OnDayFlushIndication)
    _AddCall(MsgIDDefine.PBINDICATION_GAME_DAY_FLUSH_INDICATION, self.OnFiveFlushIndication)
    _AddCall(MsgIDDefine.PBSERVER_KICK_USER_INDICATION, self.OnNewLoginOut)
    _AddCall(MsgIDDefine.PBINDICATION_CACODEMON_YEILDNUM_INDICATION, self.OnCacodemonDataTimesAdd)
    _AddCall(MsgIDDefine.PBINDICATION_CACODEMON_INBREAK_NOTIFY, self.OnCacodemonDataUpdate)
    _AddCall(MsgIDDefine.PBINDICATION_SYS_CHAT_INDICATION, self.OnSysChatIndication)
    _AddCall(MsgIDDefine.PBPVP_MATCH_INDICATION, self.PVPMatchIndication)
    _AddCall(MsgIDDefine.PBPVP_BATTLE_GROUP_INDICATION, self.PVPBattleGroupIndication)
    _AddCall(MsgIDDefine.PBPVP_CONVERT_CRYTALS_INDICATION, self.PVPCovertCryIndication)
    _AddCall(MsgIDDefine.PBPVP_ACTION_INDICATION, self.PVPActionIndication)
    _AddCall(MsgIDDefine.PBPVP_LOADING_END_INDICATION, self.PVPLoadingEndIndication)
    _AddCall(MsgIDDefine.PBPVP_TEAM_READY_INDICATION, self.PVPBattleArrayState)
    _AddCall(MsgIDDefine.PBPVP_FIGHT_ERROR_INDICATION,self.PVPErrorIndiacation)
    -- ----------------------------国战相关推送 开始----------------------------

    _AddCall(MsgIDDefine.PBINDICATION_SYSC_SOURCE_INDICATION, self.OnUpdateNationInfo) -- 国战被动推送更新资源
    _AddCall(MsgIDDefine.PBINDICATION_NATION_POS_ABANDON_TEAM_BAK, self.OnNationPosAbandonTeamBack) -- 资源点, 出战区, 讨伐区 队伍返回
    _AddCall(MsgIDDefine.PBINDICATION_SYSC_OTHER_SOURCE_AREA, self.OnNationOtherPlayerOccupyMyResAreaIndication) --
    _AddCall(MsgIDDefine.PBINDICATION_UNION_APPLY_AGREE_INDICATION, self.OnUnionApplyAgreeIndication)
    _AddCall(MsgIDDefine.PBINDICATION_SYSC_USER_CELL_INDICATION, self.OnNationOtherPlayerOccupyMyWarCellIndication)
    _AddCall(MsgIDDefine.PBINDICATION_SYSC_SOURCE_POS_STATE, self.OnNationMsgUpdateResPointList)

    _AddCall(MsgIDDefine.PBINDICATION_SYSC_ATTACK_TEAM_INDICATION, self.OnNetMsgUpdateAttackTeamData)
    _AddCall(MsgIDDefine.PBINDICATION_SYSC_DEFEND_TEAM_INDICATION, self.OnNetMsgUpdateDefendTeamData)
    _AddCall(MsgIDDefine.PBINDICATION_SYSC_SYSTEM_TEAM_INDICATION, self.OnNetMsgUpdateSystemTeamData)
    _AddCall(MsgIDDefine.PBINDICATION_UNION_POSITION_INDICATION, self.OnNationOtherUnionPositionIndication)
    _AddCall(MsgIDDefine.PBINDICATION_UNION_LEADER_INDICATION, self.OnNationOtherUnionLeaderIndication)
    _AddCall(MsgIDDefine.PBINDICATION_UNION_EXP_INDICATION, self.OnNationOtherUnionExpIndication)

    _AddCall(MsgIDDefine.PBINDICATION_NATION_PVE_START_INDICATION, self.OnNationPveStartIndication)
    _AddCall(MsgIDDefine.PBINDICATION_NATION_TEAM_STAY_INDICATION, self.OnNationTeamStayIndication)
    _AddCall(MsgIDDefine.PBINDICATION_NATION_PVE_END_INDICATION, self.OnNationPveEndIndication)
    _AddCall(MsgIDDefine.PBINDICATION_NATION_COLLECT_END_INDICATION, self.OnNationCollectResEndIndication)
    _AddCall(MsgIDDefine.PBINDICATION_BUILDING_HOLD_INDICATION, self.OnNationUnionOccupyBuildListChangedIndication)

    _AddCall(MsgIDDefine.PBINDICATION_NATION_ARMY_PATH_INDICATION, self.OnNationArmyPathIndication)
    _AddCall(MsgIDDefine.PBINDICATION_NATION_RETURN_BACK_INDICATION, self.OnNationTeamReturnBackIndication)
    _AddCall(MsgIDDefine.PBINDICATION_SYNC_NATION_UNION_APPLY_INDICATION, self.OnNationUnionApplySetData)
    _AddCall(MsgIDDefine.PBINDICATION_SYNC_UNION_ACTIVE_TOWN_INDICATION, self.OnNationUnionActiveBuildUpdate)
    _AddCall(MsgIDDefine.PBINDICATION_NATION_NOTIF_RED_INDICATION, self.OnNationRedIndication)
    -- ----------------------------国战相关推送 end----------------------------
    _AddCall(MsgIDDefine.PBINDICATION_PAOMADENG_INDICATION,self.HorseLampIndication)

    --------------------------------多人Boss推送-------------------------------
    _AddCall(MsgIDDefine.PBDRBOSS_ENTER_PLAYER_INDICATION,self.OnDRBossPlayerEnterRoom)
    _AddCall(MsgIDDefine.PBDRBOSS_LEAVE_ROOM_INDICATION,self.OnDRBossPlayerLeaveRoom)
    _AddCall(MsgIDDefine.PBDRBOSS_KICKOUT_ROOM_INDICATION,self.OnDRBossPlayerKickOutRoom)
    _AddCall(MsgIDDefine.PBDRBOSS_MEMBER_CALL_INDICATION,self.OnDRBossPlayerCallPositon)
    _AddCall(MsgIDDefine.PBDRBOSS_MEMBER_ISREADY_INDICATION,self.OnDRBossPlayerReadyRoom)
    _AddCall(MsgIDDefine.PBDRBOSS_INVITE_INDICATION,self.OnDRBossInvitePlayerEnterRoom)
    _AddCall(MsgIDDefine.PBDRBOSS_FLUSH_BOSS_INDICATION,self.OnDRBossFlushBossInRoom)
    _AddCall(MsgIDDefine.PBDRBOSS_EXPLORE_START_INDICATION,self.OnDRBossEnterGame)
    _AddCall(MsgIDDefine.PBDRBOSS_EXPLORE_MOVE_INDICATION,self.OnDRBossTeamExploreMove)
end


local function PushMessage(self,msg_id,msg_obj)
    if self._callback ~= nil and self._callback[msg_id] then
        self._callback[msg_id](msg_obj)
    end
end
--[[
  释放相关推送事件
]]
local function __unRegister(self)
    Logger.Log("__unRegister")
    self._callback = nil
end

local function __register(self)
    self:__unRegister()
    self._callback = {}
    self:__addEvent() -- 增加相关事件
end
--跑马灯数据
function PushManager:HorseLampIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗状态：ERROR PVPBattleArrayState ~~ ； ")
    else
        HorseData:GetInstance():UpDataInfo(msg_obj.Packages.content,msg_obj.Packages.stayTime)
    end
end

function PushManager:PVPErrorIndiacation(msg_obj)
    UISpecial:GetInstance():UITipText("竞技场战斗数据错误")
    Logger.LogError("竞技场战斗数据错误")
end

--[[
    战斗开始推送战斗单位
]]
function PushManager:PVPBattleGroupIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗开始推送战斗单位：ERROR PVPBattleGroupIndication ~~ ； ")
    else
        local BattleFieldManager = require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
        local package = msg_obj.Packages
        BattleFieldManager:GetInstance().battlePackages = package
        local enemy_array = {}
        for i, v in ipairs(package.enemyTeam) do
            enemy_array[v.position + 1] = { jlr = { id = v.entityId, level = v.level, star = v.star } }
        end
        for i, v in ipairs(package.enemyGuard) do
            enemy_array[v.position + 1].shl = { id = v.entityId, level = v.level, star = v.star }
        end
        local my_array = {}
        for i, v in ipairs(package.myTeam) do
            my_array[v.position + 1] = { jlr = { id = v.entityId, level = v.level, star = v.star } }
        end
        for i, v in ipairs(package.myGuard) do
            my_array[v.position + 1].shl = { id = v.entityId, level = v.level, star = v.star }
        end
        enemy_array[1],enemy_array[2] = enemy_array[2],enemy_array[1]
        enemy_array[1],enemy_array[3] = enemy_array[3],enemy_array[1]
        my_array[1],my_array[2] = my_array[2],my_array[1]
        local data = { my_array = my_array, array = enemy_array, m_fv = package.myFirstValue, e_fv = package.enemyFirstValue, e_power = package.enemyPower }
        UIManager:GetInstance():Broadcast(UIMessageNames.UIEMBATTLE2D_ON_ENEMY_GROUP, data);
    end
end

function PushManager:PVPBattleArrayState(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗状态：ERROR PVPBattleArrayState ~~ ； ")
    else
        UIManager:GetInstance():Broadcast(UIMessageNames.UIEMBATTLE2D_ON_ENEMY_READY, msg_obj.Packages.isReady);
    end
end

--[[
    战斗恢复水晶
]]
function PushManager:PVPCovertCryIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗恢复水晶：ERROR PVPCovertCryIndication ~~ ； ")
        return
    else
        if self.localHallConnector.__connectState == self.localHallConnector.HALL_CONNECT_ST.LOGIC_OK then
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PVP_CONVERT_CRY, msg_obj.Packages.convert, msg_obj.Packages.teamId, msg_obj.Packages.roundCount)
        end
    end
end
--[[
    战斗回合
]]
function PushManager:PVPActionIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗回合：ERROR PVPActionIndication ~~ ； ")
        return
    else
        if self.localHallConnector.__connectState == self.localHallConnector.HALL_CONNECT_ST.LOGIC_OK then
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PVP_ACTION, msg_obj.Packages.action, msg_obj.Packages.teamId, msg_obj.Packages.roundCount)
        end
    end
end
--[[
    战斗匹配
]]
function PushManager:PVPMatchIndication(msg_obj)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIPVPTip)
    local BattleFieldManager = require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
    BattleFieldManager:GetInstance().middleEnterBattle = false
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗匹配：ERROR PVPMatchIndication ~~ ； ")
    else
        Logger.Log("PVPMatchView------------->  " .. tostring(msg_obj.Packages.result))
        if msg_obj.Packages.result then
            BattleFieldManager:GetInstance().battleType = BattleEnum.BattleType.PVP
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIEmBattle2D, msg_obj.Packages)
            --SceneManager:GetInstance():SwitchScene(SceneConfig.PVPBattleScene)
        end
    end

end

function PushManager:PVPLoadingEndIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "战斗匹配：ERROR PVPMatchIndication ~~ ； ")
    else
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_PVP_LOADING_END)
    end
end
--[[
    好友
]]
function PushManager:OnFriendIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "好友推送失败：ERROR OnFriendIndication ~~ ； ")
    else
        FriendData:GetInstance():FriendIndication(msg_obj.Packages)
        --MapData:GetInstance():SyncSoloBossRequest() -- 同步个人boss数据
    end
end

--[[
    好友聊天
]]
function PushManager:OnFriendChatIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "好友聊天推送失败：ERROR OnFriendChatIndication ~~ ； ")
    else
        local m_id = ClientData:GetInstance():GetServerUserId()
        local belongId = msg_obj.Packages.chat.sender
        local uid = msg_obj.Packages.chat.sender
        if m_id == belongId then
            belongId = msg_obj.Packages.chat.reciver
            if belongId == m_id then
                return
            end
        end
        FriendData:GetInstance():RefreshChatInfo(belongId, uid, msg_obj.Packages.chat.content, msg_obj.Packages.chat.time)
        --MapData:GetInstance():SyncSoloBossRequest() -- 同步个人boss数据
    end
end
--系统聊天推送
function PushManager:OnSysChatIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "系统聊天推送：ERROR OnSysChatIndication ~~ ； ")
    else
        ChatData:GetInstance():SysChatIndication(msg_obj.Packages.sysChat)
        --MapData:GetInstance():SyncSoloBossRequest() -- 同步个人boss数据
    end
end

--[[
    跨天推送
]]
function PushManager:OnDayFlushIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "跨天推送失败：ERROR OnDayFlushIndication ~~ ； ")
        return
    else
        --[[
        local rel = DataUtil.tobinary(msg_obj.Packages.show)
        local SevenGiftDataIsNull
        local OnlineGiftDataIsNull
        local LevelGiftDataIsNull
        --检测 124  状态
        if string.len(rel) == 2 then
            rel = "0" .. rel
        elseif string.len(rel) == 1 then
            rel = "00" .. rel
        end
        for i = 1, 3 do
            local info = string.sub(rel, i, i)
            if i == 1 then
                SevenGiftDataIsNull = (info == "0")
            elseif i == 2 then
                OnlineGiftDataIsNull = (info == "0")
            elseif i == 3 then
                LevelGiftDataIsNull = (info == "0")
            end
        end
        SevenGiftData:GetInstance().isFirstSevenGiftDataRequest = true
        SevenGiftData:GetInstance().hasRewardArrayId = {}
        SevenGiftData:GetInstance():RequestSevenGiftData(msg_obj, SevenGiftDataIsNull)
        OnlineGiftData:GetInstance().isFirst = true
        OnlineGiftData:GetInstance().hasRewardArrayId = {}
        OnlineGiftData:GetInstance():RequestOnlineGiftData(msg_obj, OnlineGiftDataIsNull)
        --]]
        --自己更新在线和七日登录
        --GiftData:GetInstance():RequestGiftData()
        SevenGiftData:GetInstance():DayFlushIndication()
        OnlineGiftData:GetInstance():DayFlushIndication()
        BiographyData:GetInstance():DayFlushIndication()
        TestHoardData:GetInstance():DayFlushIndication()
        ArenaData:GetInstance():DayFlushIndication()
    end
end

--[[
--    凌晨5点刷新数据
--]]
function PushManager:OnFiveFlushIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogAny(msg_obj.Packages, "跨天推送失败：ERROR OnDayFlushIndication ~~ ； ")
        return
    end
end

--[[
    强制踢下线
]]
local function BindLogout(self)
    self.localHallConnector:LogoutAll(true) -- 主动事件退出 没问题
end

function PushManager:OnNewLoginOut(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("强制踢下线失败OnNewLoginOut")
    else
        print(msg_obj.Packages.type.."---")
        if msg_obj.Packages.type==1 then
            --异地登录
            local str="您的账号异地登陆,您被强制踢下线"
            UIManager:GetInstance():OpenOneButtonTip("提示",str,"确定",Bind(self,BindLogout));
        elseif msg_obj.Packages.type==2 then
            --服务器T人
            local str="您被服务器强制踢下线"
            UIManager:GetInstance():OpenOneButtonTip("提示",str,"确定",Bind(self,BindLogout));
        elseif msg_obj.Packages.type==3 then
            --服务器关闭
            local str="服务器关闭,您被强制踢下线"
            UIManager:GetInstance():OpenOneButtonTip("提示",str,"确定",Bind(self,BindLogout));
        end
        Logger.Log("强制踢下线成功OnNewLoginOut")
    end
end

--[[
    新邮件接收事件
]]
function PushManager:OnNewMailIndication(msg_obj)
    Logger.Log("OnNewMailIndication")
    if msg_obj.OpCode ~= 0 then
        Logger.Log("邮件推送失败：ERROR OnNewMailIndication ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        Logger.Log("收到邮件推送")
        MailData:GetInstance():SetMailRedPointState(true)
        UIManager:GetInstance():Broadcast(UIMessageNames.UIMAINCITY_MAILREDPOINT_UPDATE)
    end
end
--[[
    新任务接收事件
]]
function PushManager:OnNewMissionIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("任务推送失败：ERROR OnNewMissionIndication ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        if msg_obj.Packages.achieve ~= nil and #msg_obj.Packages.achieve > 0 then
            Logger.Log("收到成就任务推送")
            local data = TaskData:GetInstance().achievement_btn_list
            for _, v in ipairs(data) do
                for _, m in ipairs(v.littleList) do
                    for _, n in ipairs(m.taskData) do
                        for _, b in ipairs(msg_obj.Packages.achieve) do
                            if n.id == b.id then
                                n.now_progress = math.floor(tonumber(b.progress))
                                if n.now_progress == n.all_progress and b.status == 0 then
                                    n.status = -1
                                    table.insert(TaskData:GetInstance().have_get_task, n)
                                else
                                    n.status = b.status  --- -1可领取 0未领取 1已领取
                                end
                            end
                        end
                    end
                end
            end
            table.sort(TaskData:GetInstance().have_get_task, TaskData:GetInstance().sort_)
            TaskData:GetInstance():UpdateTaskRedPointState()
        end
        if msg_obj.Packages.hell ~= nil and #msg_obj.Packages.hell > 0 then
            TaskData:GetInstance():OnUpdateHellTask(msg_obj.Packages.hell)
        end
        if msg_obj.Packages.mainMission ~= nil and #msg_obj.Packages.mainMission > 0 then
            Logger.Log("收到日常任务推送")
            local data = TaskData:GetInstance().every_day_task
            for _, v in ipairs(data) do
                for _, m in ipairs(msg_obj.Packages.mainMission) do
                    if v.id == m.id then
                        v.status = -1
                    end
                end
            end
            table.sort(TaskData:GetInstance().every_day_task,TaskData:GetInstance().sort_)
            UIManager:GetInstance():Broadcast(UIMessageNames.UPDATE_TASK_EVERYDAY_DATA)
            TaskData:GetInstance():UpdateTaskRedPointState()
        end
        if msg_obj.Packages.majorMission ~= nil and #msg_obj.Packages.majorMission > 0 then
            Logger.Log("收到主线任务推送Indication")
            TaskData:GetInstance():GetMainTaskData(msg_obj.Packages.majorMission, 2)
        end
        if msg_obj.Packages.carnivalTask ~= nil and #msg_obj.Packages.carnivalTask > 0 then
            CarnivalData:GetInstance():GetCarnivalData(msg_obj.Packages.carnivalTask)
        end
        if msg_obj.Packages.nationTask ~= nil and #msg_obj.Packages.nationTask > 0 then
            NationMainTaskData:GetInstance():ParseServerData(msg_obj.Packages.nationTask, 1)
        end
    end
end

function PushManager:OnNewMainTaskIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("主线任务推送失败：ERROR OnNewMainTaskIndication ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        Logger.Log("收到主线任务推送Indication")
        if msg_obj.Packages.majorMission ~= nil then
            TaskData:GetInstance():GetMainTaskData(msg_obj.Packages.majorMission)
        end
    end
end

--[[
    恶灵入侵收益添加
]]
function PushManager:OnCacodemonDataTimesAdd(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("恶灵入侵推送失败：ERROR OnCacodemonDataTimesAdd ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        CacodemonData:GetInstance():AddEarningsTimes(msg_obj.Packages.addNum)
    end
end

--[[
    恶灵入侵信息变化
]]
function PushManager:OnCacodemonDataUpdate(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("恶灵入侵推送失败：ERROR OnCacodemonDataUpdate ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        CacodemonData:GetInstance():UpdateSingleData(msg_obj.Packages.cacodemonList)
    end
end

--------------------------------------- 多人Boss推送 -----------------------------------

-- 玩家进入房间
function PushManager:OnDRBossPlayerEnterRoom(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("玩家进入房间 推送失败：ERROR OnDRBossPlayerEnterRoom ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():UpdateTeamInfo(msg_obj.Packages.PlayerInRoom)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_INFO_REFRESH)
    end
end

-- 玩家离开房间
function PushManager:OnDRBossPlayerLeaveRoom(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("玩家离开房间 推送失败：ERROR OnDRBossPlayerLeaveRoom ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():RemoveTeamInfo(msg_obj.Packages.roleId)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_INFO_REFRESH)
    end
end

-- 玩家被踢出房间
function PushManager:OnDRBossPlayerKickOutRoom(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("玩家被踢出房间 推送失败：ERROR OnDRBossPlayerKickOutRoom ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():RemoveTeamInfo(msg_obj.Packages.roleId)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_INFO_REFRESH)
        if msg_obj.Packages.roleId == ClientData:GetInstance().user_id then
            UISpecial:GetInstance():UITipText("您被房主踢出房间")
            UIManager:GetInstance():CloseWindow(UIWindowNames.UIDRBossRoom)
        end
    end
end

-- 玩家房间内喊话
function PushManager:OnDRBossPlayerCallPositon(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("玩家房间内喊话 推送失败：ERROR OnDRBossPlayerCallPositon ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_CALL_POSITION, msg_obj.Packages)
    end
end

-- 玩家房间内准备
function PushManager:OnDRBossPlayerReadyRoom(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("玩家房间内准备 推送失败：ERROR OnDRBossPlayerReadyRoom ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():UpdatePlayerReadyState(msg_obj.Packages.roleId, msg_obj.Packages.isReady)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_INFO_REFRESH)
    end
end

-- 邀请玩家
function PushManager:OnDRBossInvitePlayerEnterRoom(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("邀请玩家 推送失败：ERROR OnDRBossInvitePlayerEnterRoom ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():ReceiveInviteMsg(msg_obj.Packages)
    end
end

-- 刷新boss
function PushManager:OnDRBossFlushBossInRoom(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("刷新boss 推送失败：ERROR OnDRBossFlushBossInRoom ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():ParseRoomInfo(msg_obj.Packages.room)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_INFO_REFRESH)
    end
end
--进入游戏
function PushManager:OnDRBossEnterGame(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("进入游戏 推送失败：OnDRBossEnterGame ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DRBossData:GetInstance():ParseEnterGameParam(msg_obj.Packages.response)
    end
end
--其他玩家队伍移动
function PushManager:OnDRBossTeamExploreMove(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("其他玩家队伍移动 推送失败：OnDRBossTeamExploreMove ~~ ； " .. table.dump(msg_obj.Packages, nil, 10))
        return
    else
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_TEAM_ADD_MOVE, msg_obj.Packages)
    end
end
--------------------------------------- 多人Boss推送 end -----------------------------------

-- ------------------------------------ 国战相关推送 ------------------------------------------------
--国战攻城战进攻队伍推送
function PushManager:OnNetMsgUpdateAttackTeamData(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战攻城战进攻队伍推送：ERROR OnNetMsgUpdateAttackTeamData ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_SIEGE_UPDATE_ATTACK_TEAM, msg_obj)
    end
end

--国战攻城战防守方玩家队伍推送
function PushManager:OnNetMsgUpdateDefendTeamData(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战推送失败：ERROR OnNetMsgUpdateDefendTeamData ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_SIEGE_UPDATE_DEFEND_TEAM, msg_obj)
    end
end

--国战攻城战防守方系统玩家队伍推送
function PushManager:OnNetMsgUpdateSystemTeamData(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战推送失败：ERROR OnNetMsgUpdateSystemTeamData ~~ ； ")
        return
    else
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_SIEGE_UPDATE_SYSTEM_TEAM, msg_obj)
    end
end

function PushManager:OnUpdateNationInfo(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战推送失败：ERROR OnUpdateNationInfo ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        --Logger.LogAny(msg_obj.Packages, "同步国战 资源   行动 储备  ~~ ； ", 20)
        --更新资源
        NationPlayerData:GetInstance():ParseNationResourceWithPush(msg_obj.Packages.syscSource)
        --更新 行动力
        NationCardData:GetInstance():ParseNationCardApWithPush(msg_obj.Packages.syscAp)
        --更新 城镇
        NationTownData:GetInstance():ParseNationTownArmyReserveWithPush(msg_obj.Packages.syscReserve)
        --更新资源点
        NationOccupyData:GetInstance():UpdateNationResAreaDataByPassivePush(msg_obj.Packages.syscSourceArea, true)
        ----更新国战联盟经验
        --NationUnionData:GetInstance():ParseNationUserUnionExpByPassivePush(msg_obj.Packages,true)
    end
end

--联盟申请通过
function PushManager:OnUnionApplyAgreeIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "联盟申请通过失败：ERROR OnUnionApplyAgreeIndication ~~ ； ")
        return
    else
        local unionId = msg_obj.Packages.unionId
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            if unionId == nil or unionId == 0 then
                NationUnionData:GetInstance():SetNationUnionId(0)
            else
                NationUnionData:GetInstance():SetNationUnionId(unionId)
            end
            return
        end

        Logger.LogVars("加入国战联盟资源 ~ unionId : ", unionId)
        if unionId == nil or unionId == 0 then
            NationUnionData:GetInstance():ParseNationUserUnionData(nil, true)
        else

            local function __InnerCallback(opCode)
                Logger.LogVars(" SendGetNationUnionInfoRequest opCode : ", opCode)
                if opCode ~= 0 then

                else

                end
            end
            NationNetManager:GetInstance():SendGetNationUnionInfoRequest(true, __InnerCallback)
        end

    end
end

--攻城战杀敌结束
function PushManager:OnNationSiegeKillActiveEnd(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "攻城战杀敌已结束推送失败：ERROR OnNationSiegeKillActiveEnd ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_SIEGE_KILL_ACTIVE_END, msg_obj)
    end
end

--资源区，资源点更新
function PushManager:OnNationMsgUpdateResPointList(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "资源区主界面，资源点更新失败：ERROR OnNationMsgUpdateResPointList ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
       DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_RES_STATE_UPDATE, msg_obj)
    end
end

function PushManager:OnNationUnionApplySetData(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "联盟申请设置更新失败：ERROR OnNationUnionApplySetData ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationUnionData:GetInstance():UpdateMyNationApplySetting(msg_obj.Packages.apply)
    end
end

--国战，联盟内所有玩家激活城镇，刷新
function PushManager:OnNationUnionActiveBuildUpdate(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "联盟内所有玩家激活城镇：ERROR OnNationUnionActiveBuildUpdate ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationUnionData:GetInstance():ParseNationUnionActiveBuildData(msg_obj.Packages.activeTown, true)
    end
end

--[[
       国战,本地玩家的资源点数据变化，增加或减少
]]
function PushManager:OnNationOtherPlayerOccupyMyResAreaIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战,本地玩家的资源点数据变化：ERROR OnNationOtherPlayerOccupyMyResAreaIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        --更新资源点
        NationOccupyData:GetInstance():UpdateNationResAreaDataByInitiativePush(msg_obj.Packages.syscSourceArea, true)
    end
end

--[[
      国战,本地玩家的接战区数据变化，增加或减少
]]
function PushManager:OnNationOtherPlayerOccupyMyWarCellIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战,本地玩家的接战区数据变化：ERROR OnNationOtherPlayerOccupyMyWarCellIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        --更新资源点
        NationOccupyData:GetInstance():UpdateNationWallCellDataByInitiativePush(msg_obj.Packages.syscCellArea, true)
    end
end

--国战，队伍行为推送
function PushManager:OnNationPosAbandonTeamBack(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("国战队伍行为推送失败：ERROR OnNationPosAbandonTeamBack！" .. table.dump(msg_obj.Packages))
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationTeamData:GetInstance():UpdateOneTeamBehaviorData(msg_obj.Packages.nationTeamBehavior, msg_obj.Packages.teamId,true)
    end
end

--[[
      国战联盟其他玩家对我的职位变更
]]
function PushManager:OnNationOtherUnionPositionIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战联盟其他玩家对我的职位变更：ERROR OnNationOtherUnionPositionIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        local position = msg_obj.Packages.position
        if position == NationDefine.NATION_UNION_POSITION.LEADER then
            Logger.LogErrorVars("我被禅让盟主了 需要更新盟主信息")
            local settingData = {}
            settingData.leaderId = UserData:GetInstance().roleID
            settingData.leaderName = UserData:GetInstance().name
            NationUnionData:GetInstance():UpdateNationUnionLeaderInfo(settingData, false)
        end
        NationUnionData:GetInstance():UpdateNationUnionMyMemberPosition(position, true)
    end
end


--[[
      国战联盟其他玩家对盟主职位变更
]]
function PushManager:OnNationOtherUnionLeaderIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战联盟其他玩家对盟主职位变更：ERROR OnNationOtherUnionLeaderIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationUnionData:GetInstance():UpdateNationUnionLeaderInfo(msg_obj.Packages, true)
    end
end





--[[
     国战 剿匪，资源点, 出战区, 讨伐区 开始PVE战斗
]]
function PushManager:OnNationPveStartIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "     国战 剿匪，资源点, 出战区, 讨伐区 开始PVE战斗：ERROR OnNationPveStartIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationTeamData:GetInstance():UpdateOneTeamPveStartByNetData(msg_obj.Packages)
    end
end


--[[
     国战 返回，驻守，调动 到达通知
]]
function PushManager:OnNationTeamStayIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战 返回，驻守，调动 到达通知：ERROR OnNationTeamStayIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        Logger.LogVars("国战 返回，驻守，调动 到达通知 OnNationTeamStayIndication ~~ ； ")
        if msg_obj.Packages == nil or msg_obj.Packages._is_null then
        else
            NationCardData:GetInstance():UpdateNationCardsByNetData(msg_obj.Packages.card)
        end
        NationTeamData:GetInstance():UpdateOneTeamStayByNetData(msg_obj.Packages)
    end
end

--[[
     国战 通知立即返回的退伍
]]
function PushManager:OnNationTeamReturnBackIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, " 国战 通知立即返回的退伍：ERROR OnNationTeamReturnBackIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        local uid = msg_obj.Packages.uid
        local teamId = msg_obj.Packages.teamId
        Logger.LogVars("国战 通知立即返回的退伍通知 OnNationTeamReturnBackIndication ~~ ； ")
        NationMarchData:GetInstance():DoNationMarchRemoveByData(uid, teamId)
    end
end

--[[
     国战 剿匪，资源点, 出战区, 讨伐区 PVE战斗结束开始返回
]]
function PushManager:OnNationPveEndIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战 剿匪，资源点, 出战区, 讨伐区 PVE战斗结束开始返回：ERROR OnNationPveEndIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        --Logger.LogVars("国战 剿匪，资源点, 出战区, 讨伐区 PVE战斗结束 OnNationPveEndIndication ~~ ； ")
        if msg_obj.Packages == nil or msg_obj.Packages._is_null then
        else
            NationCardData:GetInstance():UpdateNationCardsByNetData(msg_obj.Packages.card)
        end

        NationTeamData:GetInstance():UpdateOneTeamPveEndByNetData(msg_obj.Packages)
    end
end


--[[
     国战，资源区, 采集结束开始返回, （暂时不用了，与服务器确定后再删）
]]
function PushManager:OnNationCollectResEndIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, " 国战，资源区, 采集结束开始返回：ERROR OnNationCollectResEndIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationTeamData:GetInstance():UpdateOneTeamPveEndByNetData(msg_obj.Packages)
    end
end


--[[
      国战联盟其他玩家对联盟经验做出改变（todo， modify）
]]
function PushManager:OnNationOtherUnionExpIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战联盟其他玩家对联盟经验做出改变：ERROR OnNationOtherUnionExpIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationUnionData:GetInstance():UpdateNationUnionExpByInitiativePush(msg_obj.Packages.exp, true)
    end
end

--[[
      国战联盟联盟成员数变动（todo,__delete）
]]
--function PushManager:OnNationUnionMemberCountChangeIndication(msg_obj)
--    if msg_obj.OpCode ~= 0 then
--        Logger.LogVars(msg_obj.Packages, "国战联盟联盟成员数变动：ERROR OnNationOtherUnionExpIndication ~~ ； ")
--        return
--    else
--        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
--        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
--            return
--        end
--        Logger.LogVars("收到成员数变更推送", msg_obj.Packages.memberNum)
--        NationUnionData:GetInstance():UpdateMyNationMembersCount(msg_obj.Packages.memberNum)
--    end
--end

--[[
      国战联盟联盟占领城池变动
]]
function PushManager:OnNationUnionOccupyBuildListChangedIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战联盟联盟占领城池变动：ERROR OnNationUnionOccupyBuildListChangedIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        NationUnionData:GetInstance():UpdateMyUnionOccupyBuildListInfo(msg_obj.Packages)
    end
end

--[[
      国战玩家行军路线数据 所有都走一个口nationArmyPath
]]
function PushManager:OnNationArmyPathIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogVars(msg_obj.Packages, "国战玩家行军路线数据：ERROR OnNationArmyPathIndication ~~ ； ")
        return
    else
        local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
            return
        end
        --Logger.LogErrorVars(" OnNationArmyPathIndication :", msg_obj.Packages.nationArmyPath)
        NationMarchData:GetInstance():UpdateMarchDataList(msg_obj.Packages.nationArmyPath, true)
    end
end


--  国战玩家红点推送
function PushManager:OnNationRedIndication(msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.LogErrorVars(msg_obj.Packages, "国战玩家红点推送：ERROR OnNationRedIndication ~~ ； ")
        return
    else
        --Logger.LogErrorVars("国战红点推送收到!")
        --local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
        --if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
        --    return
        --end
        local redTable = {}
        redTable[RedPointData:GetInstance().RedName.Nation_Union_Red] = msg_obj.Packages.unionFirst
        redTable[RedPointData:GetInstance().RedName.Nation_Union_Invite_Red] = msg_obj.Packages.unionInvite
        redTable[RedPointData:GetInstance().RedName.Nation_Union_Apply_Red] = msg_obj.Packages.unionApply
        redTable[RedPointData:GetInstance().RedName.Nation_Event_Red] = msg_obj.Packages.eventFirst
        redTable[RedPointData:GetInstance().RedName.Nation_Battle_Log_Red] = msg_obj.Packages.logFirst

        --redTable[RedPointData:GetInstance().RedName.Nation_Union_Red] = true
        --redTable[RedPointData:GetInstance().RedName.Nation_Union_Invite_Red] = true
        --redTable[RedPointData:GetInstance().RedName.Nation_Union_Apply_Red] = true
        --redTable[RedPointData:GetInstance().RedName.Nation_Event_Red] = true
        --redTable[RedPointData:GetInstance().RedName.Nation_Battle_Log_Red] = true

        Logger.LogVars(" ======  国战红点 : ",redTable)
        RedPointData:GetInstance():UpdateTableRedState(redTable)
    end
end
-- ------------------------------------ 国战相关推送 END ------------------------------------------------

-- 构造函数
local function __init(self,localHallConnector)
    self.registerPush = false
    self.localHallConnector = localHallConnector
    self._callback = {}
end

-- 析构函数
local function __delete(self)
    self:UnRegister()
    self.localHallConnector = nil
end


-- 注册事件
local function Register(self)
    if self.registerPush then
        return
    end
    self:__register()
    self.registerPush = true
end

local function UnRegister(self)
    if not self.registerPush then
        return
    end
    self:__unRegister()
    self.registerPush = false
end

PushManager.__init = __init
PushManager.__delete = __delete
PushManager.Register = Register
PushManager.UnRegister = UnRegister
PushManager.__register = __register
PushManager.__unRegister = __unRegister
PushManager.__addEvent = __addEvent
PushManager.PushMessage = PushMessage
return PushManager