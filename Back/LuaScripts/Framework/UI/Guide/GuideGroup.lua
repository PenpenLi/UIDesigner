---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/3/21 18:2
local GuideGroup = BaseClass("GuideGroup", Singleton)
local GuideData = DataUtil.GetData("guide")
-- 构造函数
local function __init(self)
    self.RuningUIName = nil
    self.RuningSceneName = nil
    self.Runing = false

    self.PointDes="新手引导"
end

local function CheckGuideIsDone(self)
    --todo 判断引导组是否结束
    local index=  GuideManager:GetInstance().DicGuideData[self.CurType]==nil and  0 or #GuideManager:GetInstance().DicGuideData[self.CurType]
    if self.CurStep>=index then
        return true
    else
        return false
    end
end

local function GuideOverCheck(self)
    --这组最后一步走完了
    --检测有没有可以完成的步骤
    self.Runing =false
    UIUtil.SetChatImgStatus(true)
    if UIManager:GetInstance():GetWindow(UIWindowNames.UIGuide,true,true) ~= nil then
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIGuide);
    end
    local index = -1
    if not self.CurGuideItem.GuideOver then
        index = GuideManager:GetInstance():GuideGroupOver(self.CurType,true)
    end
    if index < 0 then
        --todo 通知 可以检测可以接受 弱引导
        GuideWeakCheckManager:GetInstance():BeginCheckGuideWeak(true)
        self.CurStep = nil
        self.CurType = nil
        self.RuningSceneName = nil
        self.RuningUIName = nil
        self.RuningTimer = nil
        self.CurGuideItem = nil
    end
end

--执行下一步
local function ExcuteNextStep(self)
    --完成步
    if self.CurGuideItem.LogName ~= nil then
        --print("结束"..self.CurGuideItem.LogName)
        GuideManager.GuideLogReport(2,tostring(self.CurGuideItem.group).."_"..tostring(self.CurGuideItem.step),self.CurGuideItem.LogName,1,0)
    end
    if not CheckGuideIsDone(self) then
        --没有完成
        self.CurStep = self.CurStep+1
        self:GuideOpenHande()
    else
        if self.CurType<10 then
            self.CurType=self.CurType+1
            self.CurStep=1
            self:GuideOpenHande()
        else
            GuideOverCheck(self)
        end

    end
end

local function NextStep(self)
    --SdkManager:GetInstance().DataReport:MissionCompleted(self.PointDes.."--"..self.CurType.."--"..self.CurStep);
    if self.CurGuideItem.HideUI then
        UIManager:GetInstance():GuideControlWindows(true)
    else
        if self.allRay ~= nil then
            for i, v in ipairs(self.allRay) do
                v.enabled = true
            end
            self.allRay = nil
        end
    end
    if self.CurGuideItem.OverFun then
        --结束时间
        UIUtil.BackHomeMain()
    end
    GuideCheckManager:GetInstance():ClearAllListener()
    --通知服务器
    if self.CurGuideItem.Notice then
        GuideManager.SetGuideRecode(self.CurGuideItem.Notice)
        GuideManager:GetInstance():GuideGroupOver(self.CurGuideItem.Notice)
        UnlockData:GetInstance():RemoveNotOpenGuide(self.CurGuideItem.Notice)
    end
    if self.CurGuideItem.Jump > 0 then
        if self.CurGuideItem.GroupJump > 0 then
            self.CurGuideID = GuideManager:GetInstance().DicGuideData[self.CurGuideItem.GroupJump][self.CurGuideItem.Jump]
            if self.CurGuideItem.GroupJump ~= self.CurType then
                GuideManager:GetInstance():GuideGroupOver(self.CurType)
                self.CurType = self.CurGuideItem.GroupJump
            end
        else
            self.CurGuideID = GuideManager:GetInstance().DicGuideData[self.CurType][self.CurGuideItem.Jump]
        end
        self.CurStep = self.CurGuideItem.Jump
        Logger.Log("开始跳转   "..self.CurType.."-"..self.CurStep)
        self:GuideOpenHande()
    else
        ExcuteNextStep(self)
    end
end

local function LaunchGuide(self,step)
    --TODO 拿到当前的步骤   拿到对应事件 对应打开Guide处理
    if GuideData[step] ~= nil and GuideManager:GetInstance().DicGuideData[GuideData[step].group]~=nil then
        --存在
        self.CurType=GuideData[step].group
        for i = 1, #GuideManager:GetInstance().DicGuideData[self.CurType] do
            if GuideManager:GetInstance().DicGuideData[self.CurType][i]~=nil then
                if GuideManager:GetInstance().DicGuideData[self.CurType][i]==step then
                    self.CurStep=i
                end
            else
                Logger.LogError("Bug 引导组没有这个Index"..i)
            end
        end
        if self.CurStep==nil then
            Logger.LogError("Bug 没有获得步骤"..step)
        end
    else
        Logger.LogError("Bug 没有这个ID Or 没有这个引导组"..step)
    end
    self:GuideOpenHande()
    GuideWeakCheckManager:GetInstance():BeginCheckGuideWeak(false)
end
--為表賦值
local function HandleDefaultValu(data)
    local result = {HandleType = 1,IsHide = true,NeedTime = 0,ShowBeginPos = true,RearTime = 0,ShowFiger = true,Jump = 0,GroupJump = 0,
                    Notice = false,ClickIsSkill = false,ClickTag = 1,ClickEvent = 0,BoxSizeX = 0,BoxSizeY = 0,MoveX = 0,MoveY = 0,GuideBG = true}
    for i, v in pairs(data) do
        result[i] = v
    end
    return result
end

local function GuideOpenHande(self)
    --引导在运行
    self.Runing =true
    UIUtil.SetChatImgStatus(false)
    self.RuningSceneName = nil
    self.RuningUIName = nil
    self.RuningTimer = nil
    self.RuningEventName=nil
    --是否满足场景条件
    self.JudgeUIHandle=true
    --是否满足UI条件
    self.JudgeSceneHandle=true
    --是否满足事件条件
    self.JudgeEventHandle=true
    --是否满足等待时间条件
    self.JudgeTimeHandle=true

    self.CurGuideID=GuideManager:GetInstance().DicGuideData[self.CurType][self.CurStep]
    self.CurGuideItem= HandleDefaultValu(GuideData[self.CurGuideID])
    --Logger.Log("检测执行   "..self.CurType.." _  "..self.CurStep)
    --UI條件
    --如果当前这一步/一组可跳过  判断 是否下一步的UI买你打开

    local current_scene = SceneManager:GetInstance().current_scene

    if current_scene ~= nil and self.CurGuideItem.SceneJump ~= nil and self.CurGuideItem.SceneJump ~= current_scene.scene_config.Name then
        ExcuteNextStep(self)
        return
    end

    if self.CurGuideItem.NeedUI~=nil then
        self.RuningUIName=self.CurGuideItem.NeedUI
        if self.CurGuideItem.NeedUIType == 1 and UIManager:GetInstance():GetWindow(self.RuningUIName,true,true) ~= nil then
            --已经打开
            self.JudgeUIHandle=true
        elseif self.CurGuideItem.NeedUIType == 3 and UIManager:GetInstance():CheckWindowTop(self.RuningUIName) then
            self.JudgeUIHandle=true
        else
            self.JudgeUIHandle=false
            GuideCheckManager:GetInstance():AddUIListener()
        end
    end
    --場景條件
    if self.CurGuideItem.NeedScene~=nil then
        if current_scene == nil or current_scene.scene_config.Name ~= self.CurGuideItem.NeedScene then
            self.RuningSceneName=self.CurGuideItem.NeedScene
            self.JudgeSceneHandle=false
            GuideCheckManager:GetInstance():AddSceneListener()
        end
    end
    if  self.CurGuideItem.NeedEvent ~= nil or self.CurGuideItem.NeedEvent_2 ~= nil then
        self.RuningEventName=self.CurGuideItem.NeedEvent
        self.JudgeEventHandle=self.CurGuideItem.NeedEvent == nil
        GuideCheckManager:GetInstance():AddEventListener()
    end
    if self.CurGuideItem.NeedTime>0 then
        self.RuningTimer = TimerManager:GetInstance():GetTimer(self.CurGuideItem.NeedTime, self.TimeHandleFun , self,true)
        self.JudgeTimeHandle = false
        if self.JudgeSceneHandle and self.JudgeUIHandle and self.JudgeEventHandle then
            self.RuningTimer:Start()
            --添加遮罩 防止点击其他按钮
            UIMask:GetInstance():ShowEmptyMask(-111)
        end
    end

    self:OpenGuide()
end
--场 景回调
local function EventHandleFun(self,param)


    self.JudgeEventHandle=true
    self.eventParam = param
    if self.JudgeUIHandle and not self.JudgeTimeHandle and self.JudgeSceneHandle then
        self.RuningTimer:Start()
        UIMask:GetInstance():ShowEmptyMask(-111)
    else
        self:OpenGuide()
    end
end

local function SceneHandleFun(self)
    self.JudgeSceneHandle=true
    if self.JudgeUIHandle and not self.JudgeTimeHandle and self.JudgeEventHandle then
        self.RuningTimer:Start()
        UIMask:GetInstance():ShowEmptyMask(-111)
    else
        self:OpenGuide()
    end
end
--UI回调
local function UIHandleFun(self,_show)
    if _show == self.CurGuideItem.NeedUIType then
        self.JudgeUIHandle=true
        GuideCheckManager:GetInstance():RemoveUIListener()
        if self.JudgeSceneHandle and not self.JudgeTimeHandle and self.JudgeEventHandle  then
            self.RuningTimer:Start()
            UIMask:GetInstance():ShowEmptyMask(-111)
        else
            self:OpenGuide()
        end
    elseif  self.CurGuideItem.NeedUIType == 3 and UIManager:GetInstance():CheckWindowTop(self.RuningUIName) then
        self.JudgeUIHandle=true
        GuideCheckManager:GetInstance():RemoveUIListener()
        if self.JudgeSceneHandle and not self.JudgeTimeHandle and self.JudgeEventHandle then
            self.RuningTimer:Start()
            UIMask:GetInstance():ShowEmptyMask(-111)
        else
            self:OpenGuide()
        end
    end
end

--时间回调
local function TimeHandleFun(self)
    self.JudgeTimeHandle=true
    if self.RuningTimer ~= nil then
        self.RuningTimer:Stop()
        self.RuningTimer = nil
    end
    UIMask:GetInstance():CloseEmptyMask(-111)
    self:OpenGuide()
end


local function OpenGuide(self)

    if self.JudgeUIHandle and self.JudgeSceneHandle and self.CurGuideItem.UnlockID  and not self.JudgeEventHandle  then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UINewFunOpen,self.CurGuideItem.UnlockID);
        return
    end
    if self.JudgeUIHandle and self.JudgeSceneHandle and self.JudgeTimeHandle and self.JudgeEventHandle  then
        --对各种情况的特使处理
        --战斗 记录位置
        --print("进入引导OpenGuide")
        if self.CurGuideItem.LogName ~= nil then
            --print("开启"..self.CurGuideItem.LogName)
            GuideManager.GuideLogReport(1,tostring(self.CurGuideItem.group).."_"..tostring(self.CurGuideItem.step),self.CurGuideItem.LogName,1,0)
        end
        if self.CurGuideItem.OverEvent~=nil then
            GuideCheckManager:GetInstance():AddOverListener()
        end
        Logger.Log(self.CurType.."--"..self.CurStep)
        self.Runing =true
        self.allRay = nil
        if self.CurGuideItem.HideUI then
            UIManager:GetInstance():GuideControlWindows(false)
        else
            if self.CurGuideItem.HandleType == 10 or self.CurGuideItem.HandleType == 11 then
                local tempRay = CS.UnityEngine.GameObject.FindObjectsOfType(typeof(CS.UnityEngine.UI.GraphicRaycaster))
                if tempRay ~= nil then
                    self.allRay = {}
                    for i = 0, tempRay.Length-1 do
                        if tempRay[i].enabled then
                            tempRay[i].enabled = false
                            table.insert(self.allRay,tempRay[i])
                        end
                    end
                end
            end
        end
       -- SdkManager:GetInstance().DataReport:MissionBegin(self.PointDes.."--"..self.CurType.."--"..self.CurStep);
        local function OpenGuideWin()
            if UIManager:GetInstance():GetWindow(UIWindowNames.UIGuide,true,true) ~= nil then
                --已经打开
                UIManager:GetInstance():Broadcast(UIMessageNames.ON_GUIDE_FUN)
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIGuide)
            end
        end
        if self.CurGuideItem.HandleType==6 then  --打开ui界面
            if UIManager:GetInstance():GetWindow(self.CurGuideItem.UIName,true,true) == nil then
                UIManager:GetInstance():OpenWindow(self.CurGuideItem.UIName)
            end
            if not self.CurGuideItem.OverEvent then
                self:NextStep()
            end
        elseif self.CurGuideItem.HandleType == 7 then   --剧情战斗
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_GUIDE_STORY_BATTLE)
            self:NextStep()
        elseif self.CurGuideItem.HandleType==9 then --返回主城
            --隐藏UI
            UIUtil.BackHomeMain()
            self:NextStep()
        elseif self.CurGuideItem.HandleType==10 then
            if UIManager:GetInstance():GetWindow(UIWindowNames.UIGuide,true,true) ~= nil then
                UIManager:GetInstance():CloseWindow(UIWindowNames.UIGuide)
            end
            StoryManager.TriggerStory(self.CurGuideItem.StoryID)
        elseif self.CurGuideItem.HandleType==11 then --其他情况触发剧情
            --隐藏UI
            if UIManager:GetInstance():GetWindow(UIWindowNames.UIGuide,true,true) ~= nil then
                UIManager:GetInstance():CloseWindow(UIWindowNames.UIGuide)
            end
            coroutine.start(function()
                StoryManager.TriggerStory(self.CurGuideItem.StoryID)
            end)
         elseif self.CurGuideItem.HandleType==13 then
             DataManager:GetInstance():Broadcast(DataMessageNames.ON_LOADING_OVER)
             self:NextStep()
         elseif self.CurGuideItem.HandleType == 14 then --检测有没有李轩辕
             if CardData:GetInstance():GetCardDataById(self.CurGuideItem.TargetId) == nil then
                 self.CurStep = self.CurStep - 1
                 self:GuideOpenHande()
                 DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_NeedEvent)
             else
                 self:NextStep()
             end
         elseif self.CurGuideItem.HandleType == 15 then  --直接下一步  触发关卡使用
             if UIManager:GetInstance():GetWindow(UIWindowNames.UIGuide,true,true) ~= nil then
                 UIManager:GetInstance():CloseWindow(UIWindowNames.UIGuide)
             end
             if self.CurGuideItem.OverEvent==nil then
                 if self.eventParam == 1 then
                     if self.CurGuideItem.ResetJump ~= nil then
                         self.CurGuideItem.Jump = self.CurGuideItem.ResetJump
                     else
                         self.CurGuideItem.Jump = 1
                     end
                 end
                 self:NextStep()
             end
         elseif self.CurGuideItem.HandleType == 16 then  --判断阵容上有没有柠檬精
             local pve_enemyGuard =  UserData:GetInstance():GetBattleInfoData(0)
             local find_target = false
             if pve_enemyGuard ~= nil then
                 for i, v in ipairs(pve_enemyGuard) do
                     if v.guardian.cardId == self.CurGuideItem.TargetId then
                         find_target = true
                         break
                     end
                 end
             end
             if find_target then
                 self.CurGuideItem.Jump = 7
             end
             self:NextStep()
        elseif self.CurGuideItem.HandleType==17 then --返回主城
            --隐藏UI
            SceneManager:GetInstance():SwitchScene(SceneConfig.LoginScene)
            self:NextStep()
        elseif self.CurGuideItem.HandleType==18 then --发送ui通知
            --隐藏UI
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_PLAY_CRY_ANIM,false)
            self:NextStep()
        elseif self.CurGuideItem.HandleType==19 then --发送ui通知
            --隐藏UI
            local curRound = SceneManager:GetInstance().current_scene.proxy.oneBattle.round
            Logger.Log("CurRound  "..curRound)
            if curRound < 2 then
                self.CurGuideItem.Jump = self.CurStep
            end
            self:NextStep()
        elseif self.CurGuideItem.HandleType==4 then --交换位置
            --隐藏UI
            local pve_enemyGuard =  UserData:GetInstance():GetBattleInfoData(0)
            local find_target = true
            if pve_enemyGuard ~= nil then
                for i, v in ipairs(pve_enemyGuard) do
                    if v.host.cardId == self.CurGuideItem.TargetId then
                        local index = v.position
                        if index == 0 then
                            index = 2
                        elseif index == 2 then
                            index = 3
                        end
                        if v.position ~= self.CurGuideItem.TargetPos then
                            self.array_empty = index
                            find_target = false
                        end
                        break
                    end
                end
            end
            if find_target then
                self:NextStep()
            else
                OpenGuideWin()
            end
         else
                OpenGuideWin()
        end
    else
        return
    end

end

local function SetGuideServerStep(self,msg)
    if self.Runing then
        Logger.Log("服务储存节点   "..self.CurType)
        msg.guide = self.CurType
    end
end

local function __delete(self)
    self.RuningUIName = nil
    self.RuningSceneName = nil
    self.Runing = false
end

GuideGroup.__delete = __delete
GuideGroup.__init = __init
GuideGroup.SetGuideServerStep = SetGuideServerStep
GuideGroup.CheckGuideIsDone = CheckGuideIsDone
GuideGroup.LaunchGuide = LaunchGuide
GuideGroup.GuideOpenHande = GuideOpenHande
GuideGroup.NextStep = NextStep
GuideGroup.OpenGuide = OpenGuide
GuideGroup.TimeHandleFun = TimeHandleFun
GuideGroup.UIHandleFun = UIHandleFun
GuideGroup.SceneHandleFun = SceneHandleFun
GuideGroup.EventHandleFun = EventHandleFun
GuideGroup.GuideOverCheck = GuideOverCheck
return GuideGroup