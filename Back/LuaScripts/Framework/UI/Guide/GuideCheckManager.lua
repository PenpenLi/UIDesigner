---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/3/18 15:46
--- 引导检测 中心
--- 尝试检测是否可以触发引导  GuideCheckBase  (各种类型引导检测 1 强制  2  软  3  闲置)
local GuideCheckManager = BaseClass("GuideCheckManager", Singleton)
-- 构造函数
local function __init(self)
    --self:GiveNoticeLevel()
    self.easyfunc = {}
    self.easyfunc[1] = Bind(self, self.UIWindowOpen)
    self.easyfunc[2] = Bind(self, self.SceneWindowOpen)
    self.easyfunc[3] = Bind(self, self.EventOpen)
    self.easyfunc[4] = Bind(self, self.GuideOverEvent)
    self.easyfunc[5] = Bind(self, self.UIWindowClose)

end



-- 根据解锁 来引导判断
local function UnlockToGuide(self)
    --直接走引导
    if #UnlockData:GetInstance().not_open_guide > 0 then
        --开启 引导  然后发送 回调  应该这样吧~~~~
        local group = UnlockData:GetInstance().not_open_guide[1]
        if table.keyof(GuideManager:GetInstance().finishGroup, group) == nil then
            self:CheckLanch(group)
            UnlockData:GetInstance():RemoveNotOpenGuide(group)
        else
            UnlockData:GetInstance():RemoveNotOpenGuide(group)
            self:UnlockToGuide()
        end
        --判断下 主界面是否打开   如果打开 那么 发 没打开 不发 回调
        --DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_NeedEvent)
    end
end
--有的引导是上来就有的
local function CheckLanch(self, group)
    self.can_guide = false
    if true then
        local parse_data = GuideManager:GetInstance().DicGuideData
        for i, v in pairs(parse_data) do
            if i == group then
                GuideGroup:GetInstance():LaunchGuide(v[1])
                return
            end
        end
        Logger.LogError("没有找到那个解锁" .. group)
    end
end
--(如果外界有解锁功能开启)  解锁某个功能开启某个 引导~
local function CheckConditionLanch(self, cnonditon)
    self.canGuide = false
    if true then
        local normal_guide = DataUtil.GetData("guide")
        local parse_data = GuideManager:GetInstance().DicGuideData
        for i, v in pairs(parse_data) do
            for n, f in pairs(v) do
                local get_data = normal_guide[f]
                if get_data.condition ~= nil and get_data.condition == cnonditon then
                    GuideGroup:GetInstance():LaunchGuide(f)
                end
            end
        end
        Logger.LogError("没有找到那个解锁" .. cnonditon)
    end
end


--外界通知那一种类型引导开始检测/关闭检测   比如 等级10级之后 开启 闲置引导  或者测试的时候关闭检测
--[[
local function CheckGroupCanLanch(self,group)
    local index = -1
    if GuideGroup:GetInstance().Runing then
        return index
    end
    if self.canGuide then
        local normal_guide = DataUtil.GetData("guide")
        for i, v in pairs(GuideManager:GetInstance().DicGuideData) do
            if table.keyof(group,i) == nil then
                if index < 0 or (index > 0 and i < index) the
                    if data.condition == nil then
                        index = i
                    else
                        --检测前置条件 跳过把
                        if data.PreGroup == nil or (data.PreGroup ~= nil and table.keyof(group,data.PreGroup)) then
                            local state,type,des= UnlockData:GetInstance():GetLockDataState(data.condition)
                            if state then
                                --GuideGroup:GetInstance():LaunchGuide(v[1])
                                if data.overfight then
                                    if not MapData:GetInstance():CheckPassLevel(data.overfight) then
                                        index = i
                                    else
                                        Logger.Log("--------->完成自动保存")
                                        GuideManager:GetInstance():SetGuideRecode(i)
                                    end
                                else
                                    index = i
                                end
                            end
                        end
        if index > 0 then
            GuideGroup:GetInstance():LaunchGuide(GuideManager:GetInstance().DicGuideData[index][1])
        end
    end
    return index
end
--]]



--注册消息  绑定  无限等待事件
local function AddUIListener(self)
    UIManager:GetInstance():AddListener(UIMessageNames.UIFRAME_ON_WINDOW_OPEN, self.easyfunc[1])
    UIManager:GetInstance():AddListener(UIMessageNames.UIFRAME_ON_WINDOW_CLOSE, self.easyfunc[5])
end
local function RemoveUIListener(self)
    UIManager:GetInstance():RemoveListener(UIMessageNames.UIFRAME_ON_WINDOW_OPEN, self.easyfunc[1])
    UIManager:GetInstance():RemoveListener(UIMessageNames.UIFRAME_ON_WINDOW_CLOSE, self.easyfunc[5])
end
local function UIWindowOpen(self, target)
    if GuideGroup:GetInstance().RuningUIName ~= nil and GuideGroup:GetInstance().Runing and GuideGroup:GetInstance().RuningUIName == target.Name then
        GuideGroup:GetInstance():UIHandleFun(1)
    end
end

local function UIWindowClose(self, target)
    if GuideGroup:GetInstance().RuningUIName ~= nil and GuideGroup:GetInstance().Runing and GuideGroup:GetInstance().RuningUIName == target.Name then
        GuideGroup:GetInstance():UIHandleFun(2)
    end
end

local function AddSceneListener(self)
    --self.AddSceneMessage=true
    DataManager:GetInstance():AddListener(DataMessageNames.ON_SCENE_CHANGE, self.easyfunc[2])
end
local function RemoveSceneListener(self)
    --self.AddSceneMessage=false
    DataManager:GetInstance():RemoveListener(DataMessageNames.ON_SCENE_CHANGE, self.easyfunc[2])
end
local function SceneWindowOpen(self, target)
    if GuideGroup:GetInstance().RuningSceneName ~= nil and GuideGroup:GetInstance().Runing and GuideGroup:GetInstance().RuningSceneName == target then
        self:RemoveSceneListener()
        GuideGroup:GetInstance():SceneHandleFun()
    end
end

local function AddEventListener(self)
    if GuideGroup:GetInstance().RuningEventName then
        DataManager:GetInstance():AddListener(GuideGroup:GetInstance().RuningEventName, self.easyfunc[3])
    end
end

local function RemoveEventListener(self)
    if GuideGroup:GetInstance().RuningEventName ~= nil then
        DataManager:GetInstance():RemoveListener(GuideGroup:GetInstance().RuningEventName, self.easyfunc[3])
    end
end
local function RemoveEventListenerTwo(self)
    if GuideGroup:GetInstance().RuningEventName_2 ~= nil then
        DataManager:GetInstance():RemoveListener(GuideGroup:GetInstance().RuningEventName_2, self.easyfunc[6])
    end
end

local function AddOverListener(self)
    DataManager:GetInstance():AddListener(GuideGroup:GetInstance().CurGuideItem.OverEvent, self.easyfunc[4])
end
local function RemoveOverListener(self)
    if GuideGroup:GetInstance().CurGuideItem ~= nil and GuideGroup:GetInstance().CurGuideItem.OverEvent ~= nil then
        DataManager:GetInstance():RemoveListener(GuideGroup:GetInstance().CurGuideItem.OverEvent, self.easyfunc[4])
    end
end
local function EventOpen (self, params)
    self:RemoveEventListener()
    GuideGroup:GetInstance():EventHandleFun(params)
end

local function GuideOverEvent (self)
    self:RemoveOverListener()
    GuideGroup:GetInstance():NextStep()
    print("检测执行   " .. GuideGroup:GetInstance().CurType .. " _  " .. GuideGroup:GetInstance().CurStep)
end

local function ClearAllListener(self)
    RemoveOverListener(self)
    RemoveEventListener(self)
    RemoveSceneListener(self)
    RemoveUIListener(self)
    RemoveEventListenerTwo(self)
end

local function __delete(self)
    ClearAllListener(self)
    self.easyfunc = nil
end

GuideCheckManager.__delete = __delete
GuideCheckManager.__init = __init
GuideCheckManager.ClearAllListener = ClearAllListener
GuideCheckManager.AddUIListener = AddUIListener
GuideCheckManager.RemoveUIListener = RemoveUIListener
GuideCheckManager.UIWindowOpen = UIWindowOpen
GuideCheckManager.UIWindowClose = UIWindowClose
GuideCheckManager.SceneWindowOpen = SceneWindowOpen
GuideCheckManager.AddSceneListener = AddSceneListener
GuideCheckManager.RemoveSceneListener = RemoveSceneListener
GuideCheckManager.AddEventListener = AddEventListener
GuideCheckManager.RemoveEventListener = RemoveEventListener
GuideCheckManager.EventOpen = EventOpen
GuideCheckManager.AddOverListener = AddOverListener
GuideCheckManager.RemoveOverListener = RemoveOverListener
GuideCheckManager.GuideOverEvent = GuideOverEvent
GuideCheckManager.CheckConditionLanch = CheckConditionLanch
GuideCheckManager.CheckLanch = CheckLanch
GuideCheckManager.UnlockToGuide = UnlockToGuide
GuideCheckManager.RemoveEventListenerTwo = RemoveEventListenerTwo

return GuideCheckManager