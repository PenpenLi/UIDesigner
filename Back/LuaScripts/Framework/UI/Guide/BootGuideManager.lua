---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/10/25 10:42
---
local BootGuideManager = BaseClass("BootGuideManager", Singleton)
local boot_guide=DataUtil.GetData("boot_guide")

local function InitialBootData(self)
    --等待服务器发下来的时候再解析--  step 表ID

    self.guide_dic = {}
    self.group_order = {}
    for i, v in pairs(boot_guide) do
        if self.guide_dic[boot_guide[i].Group] then
            self.guide_dic[boot_guide[i].Group][boot_guide[i].Step]=i
        else
            self.guide_dic[boot_guide[i].Group]={[boot_guide[i].Step] = i}
            table.insert(self.group_order,boot_guide[i].Group)
        end
    end
    table.sort(self.group_order,function (a,b) return a < b end)
end





local function SceneWindowOpen(self,target)
    if self.guide_data.NeedScene == target then
        self.need_scene = false
        self:ExcuteStep()
    end
end

local function GuideOver(self)
    if self.over_event then
        self:NextStep()
    end
end

local function TriggerEvent(self)
    DataManager:GetInstance():RemoveListener(self.guide_data.NeedEvent,self.easyfunc[3])
    Logger.Log("TriggerEvent")
    self.need_event = false
    self:ExcuteStep()
end

local function UIWindowOpen(self,target)
    if self.guide_data.NeedUI == target.Name and self.guide_data.NeedUIType == 1 then
        self.need_ui = false
        self:ExcuteStep()
    end
end

local function UIWindowClose(self,target)
    if self.guide_data.NeedUI == target.Name and self.guide_data.NeedUIType == 2 then
        self.need_ui = false
        self:ExcuteStep()
    end
end

local function __init(self)
    InitialBootData(self)
    self.easyfunc = {}
    self.easyfunc[1] = Bind(self,SceneWindowOpen)
    self.easyfunc[2] = Bind(self,GuideOver)
    self.easyfunc[3] = Bind(self,TriggerEvent)
    self.easyfunc[4] = Bind(self,UIWindowOpen)
    self.easyfunc[5] = Bind(self,UIWindowClose)
end

local function AddListener(self)
    DataManager:GetInstance():AddListener(DataMessageNames.ON_SCENE_CHANGE,  self.easyfunc[1])
    DataManager:GetInstance():AddListener(DataMessageNames.UIGuide_OverEvent,self.easyfunc[2])
    UIManager:GetInstance():AddListener(UIMessageNames.UIFRAME_ON_WINDOW_OPEN,self.easyfunc[4])
    UIManager:GetInstance():AddListener(UIMessageNames.UIFRAME_ON_WINDOW_CLOSE,self.easyfunc[5])
end

local function RemoveListener(self)
    DataManager:GetInstance():RemoveListener(DataMessageNames.ON_SCENE_CHANGE,  self.easyfunc[1])
    DataManager:GetInstance():RemoveListener(DataMessageNames.UIGuide_OverEvent,self.easyfunc[2])
    UIManager:GetInstance():RemoveListener(UIMessageNames.UIFRAME_ON_WINDOW_OPEN, self.easyfunc[4])
    UIManager:GetInstance():RemoveListener(UIMessageNames.UIFRAME_ON_WINDOW_CLOSE, self.easyfunc[5])
end

local function AddEventTrigger(self)
    DataManager:GetInstance():AddListener(self.guide_data.NeedEvent,self.easyfunc[3])
end


local function CheckGuideIsDone(self)
    --todo 判断引导组是否结束
    local index = self.guide_dic[self.current_group]==nil and  0 or #self.guide_dic[self.current_group]
    Logger.Log("---> "..tostring(self.current_step).."  count "..tostring(index))
    if self.current_step>=index then
        return true
    else
        return false
    end
end

--禁用UI
local function DisableUI(self)
    local tempRay = CS.UnityEngine.GameObject.FindObjectsOfType(typeof(CS.UnityEngine.UI.GraphicRaycaster))
    if tempRay ~= nil then
        self.allRay = {}
        for i = 0, tempRay.Length-1 do
            if tempRay[i].enabled then
                tempRay[i].enabled = false
                table.insert(self.allRay,tempRay[i])
            end
        end
    end
end
--回复UI
local function RecoverUI(self)
    if self.allRay ~= nil then
        for i, v in ipairs(self.allRay) do
            v.enabled = true
        end
        self.allRay = nil
    end
end
--下一步
local function NextStep(self)
    if self.guide_data.LogName ~= nil then
        GuideManager.GuideLogReport(2,tostring(self.current_group).."_"..tostring(self.current_step),self.guide_data.LogName,1,0)
    end
    if self.guide_data.Desc ~= nil then
        GuideManager:GetInstance():HideDialog()
    end
    if self.guide_data.SaveGuide then
        GuideManager.SetGuideRecode(self.current_group)
    end

    RecoverUI(self)

    if self.jump_step ~= nil and self.jump_step > 0 then
        if self.jump_group ~= nil and self.jump_group > 0 then
            --临时测试
            GuideManager:GetInstance():GuideGroupOver(self.current_group)
            self.current_group = self.jump_group
        end
        self.current_step = self.jump_step
        self:CheckExcuteStep()
    else
        if CheckGuideIsDone(self) then
            --临时测试
            self.running = false
            RemoveListener(self)
            local index = GuideManager:GetInstance():GuideGroupOver(self.current_group,true)
            if index <= 0 and index > 8 then
                self.current_group = -1
                self.current_step = -1
            end
        else
            self.current_step = self.current_step+1
            self:CheckExcuteStep()
        end
    end
end

local function GetUIData(data,func)
    local result = {click_skill = false,size_x = 0,size_y = 0,offset_x = 0,offset_y = 0,target = data.Target,mask_path = data.MaskPath,
                    des = data.Desc,talk_icon = data.TalkIcon,layer = data.Layer,click_skill = data.ClickSkill,mask_type = data.MaskType,
                    talk_x = data.TalkX,talk_y = data.TalkY,begin_pos = data.BeginPos,next_open = data.NextOpen,click_func = func,
                    click_failure = data.ClickFailure,hide_finger = data.HideFinger,mask_res = data.MaskRes,talk_name = data.TalkName,
                    click_alpha = 1,extra_pre = data.ExtraPre}
    if result.mask_type == nil then
        result.mask_type = require "UI.UIGuideMask.Component.UIGuideRectMask"
    end
    if result.mask_path == nil then
        result.mask_path = "UI/Prefabs/View/UIGuideRectMask.prefab"
    end
    if data.BoxSizeX ~= nil then
        result.size_x = data.BoxSizeX
    end
    if data.BoxSizeY ~= nil then
        result.size_y = data.BoxSizeY
    end
    if data.BoxSizeX ~= nil then
        result.offset_x = data.MoveX
    end
    if data.BoxSizeY ~= nil then
        result.offset_y = data.MoveY
    end
    if data.ClickAlpha ~= nil then
        result.click_alpha = data.ClickAlpha
    end
    return result
end



local function ExcuteStep(self)
    if  self.need_scene or self.need_event or self.need_ui then
        return
    end
    if self.need_time then
        self.need_time = false
       self.guide_timer = TimerManager:GetInstance():GetTimer(self.guide_data.NeedTime,ExcuteStep, self,true)
        self.guide_timer:Start()
        return
    end
    Logger.Log("---------> group  "..tostring(self.current_group).." step "..self.current_step)
    local type = self.guide_data.HandleType
    self.jump_group = self.guide_data.JumpGroup
    self.jump_step = self.guide_data.JumpStep
    self.over_event = self.guide_data.OverEvent
    if type == 1 then
        --判断当前场景是否为改场景
        local current_scene = SceneManager:GetInstance().current_scene
        if current_scene.scene_config.Name ~= self.guide_data.HandleTypeParas then
            SceneManager:GetInstance():SwitchScene(SceneConfig[self.guide_data.HandleTypeParas])
        end
        NextStep(self)
    elseif type == 2 then
        DisableUI(self)
        StoryManager.TriggerStory(self.guide_data.StoryID)
    elseif type == 3 then
        DisableUI(self)
        coroutine.start(function()
            StoryManager.TriggerStory(self.guide_data.StoryID)
        end)
    elseif type == 4 then
        DataManager:GetInstance():Broadcast(self.guide_data.HandleTypeParas)
        NextStep(self)
    elseif type == 5 then
        --隐藏UI
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_PLAY_CRY_ANIM,false)
        NextStep(self)
    elseif type == 6 then
        if UIManager:GetInstance():GetWindow(UIWindowNames.UIGuideButton,true,true) ~= nil then
            --已经打开
            UIManager:GetInstance():Broadcast(UIMessageNames.UI_GUIDE_BUTTON_DATA,GetUIData(self.guide_data,function ()
                NextStep(self)
            end) )
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIGuideButton,GetUIData(self.guide_data,function ()
                NextStep(self)
            end) )
        end
    elseif type == 7 then
        local ui_data = GetUIData(self.guide_data)
        GameObjectPool:GetInstance():GetGameObjectAsync(ui_data.mask_path,function(go)
            if not IsNull(go) then
                local function ClickNext(self,comp)
                    comp:OnDestroy()
                    GameObjectPool:GetInstance():RecycleGameObject(ui_data.mask_path,go)
                    NextStep(self)
                end
                go.name = "UIGuideRectMask"
                local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
                UIUtil.SetUIParent(go.transform,layer.transform)
                local guide_mask = ui_data.mask_type.New(layer,"UIGuideRectMask")
                guide_mask:SetClick(Bind(self,ClickNext,guide_mask),Bind(self,ClickNext,guide_mask))
                guide_mask:CreateMask(ui_data)
                guide_mask:ShowDialog()
            end
        end)
    elseif type == 8 then
        local view = UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleIn).View
        view.skillCardPanel:SetActive(false)
        NextStep(self)
    elseif type == 9 then
        NextStep(self)
    elseif type == 10 then
        UIManager:GetInstance():OpenWindow(self.guide_data.UIName)
        NextStep(self)
    elseif type==11 then --返回主城
        --隐藏UI
        UIUtil.BackHomeMain()
        NextStep(self)
    elseif type == 12 then
        Time.timeScale = self.guide_data.HandleTypeParas
        NextStep(self)
    elseif type==13 then --发送ui通知
        --隐藏UI
        local curRound = SceneManager:GetInstance().current_scene.proxy.oneBattle.round
        Logger.Log("CurRound  "..curRound)
        if curRound < 2 then
            self.jump_step = self.current_step
        end
        NextStep(self)
    elseif type == 14 then

        --for i, v in pairs( view.ctrlSkills) do
        --    v.skill[1].cd = 1
        --end
        GameObjectPool:GetInstance():GetGameObjectAsync("UI/Prefabs/View/UIGuide_5_5.prefab",function(go)
            if not IsNull(go) then
                local view = UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleIn).View
                UIUtil.SetUIParent(go.transform,view.enter_anim_game[5].transform)
                self.load_go = go
            end
        end)
        NextStep(self)
    elseif type == 15 then
        --UnlockData:GetInstance():CheckNewOpenFunList(UserData:GetInstance().pLevel,0)
        NextStep(self)
    elseif type == 16 then
        SceneManager:GetInstance().current_scene.enter_anim_over = 3
        local game = CS.UnityEngine.GameObject.Find("model_gjj_1201004_p(Clone)")
        local enter_cam = GameObjectPool:GetInstance():CoGetGameObjectAsync
        ("Art/Scenes/Common/xsyd_2_3.prefab")
        local cam_brain = CS.UnityEngine.Camera.main.gameObject:GetComponent(typeof(CS.Cinemachine.CinemachineBrain));
        if not IsNull(game) then
            local anim = game.transform:GetComponentInChildren(typeof(CS.UnityEngine.Animator))
            --播放特效
            local fxController = game:GetComponentInChildren(typeof(CS.RoleFxController))
            if fxController ~= nil then
                local follow = fxController:GetAnchorTrans(9)
                local effect2 = GameObjectPool:GetInstance():CoGetGameObjectAsync
                ("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_3_other.prefab")
                effect2:SetActive(false)
                local effect3 = GameObjectPool:GetInstance():CoGetGameObjectAsync
                ("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_2_other.prefab")
                effect3:SetActive(false)
                local effect4 = GameObjectPool:GetInstance():CoGetGameObjectAsync
                ("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_4_other.prefab")
                effect4:SetActive(false)
                local effect1 = GameObjectPool:GetInstance():CoGetGameObjectAsync
                ("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_1_foot.prefab")
                effect1.transform.position = follow.position
                anim:Play("skill_2",0,0)
                CS.LJ_TimelineExtension.PlayableDirectorBindingHelper.BindingBattleCamera(enter_cam,cam_brain)
                coroutine.waitforseconds(0.667)
                effect2:SetActive(true)
                effect2.transform.position = follow.position
                coroutine.waitforseconds(0.783)
                follow = fxController:GetAnchorTrans(10)
                effect3:SetActive(true)
                effect4:SetActive(true)
                effect3.transform.position = follow.position
                effect4.transform.position = follow.position
                coroutine.waitforseconds(0.2)
                anim.speed = 0
                GameObjectPool:GetInstance():RecycleGameObject("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_3_other.prefab",effect2)
                GameObjectPool:GetInstance():RecycleGameObject("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_2_other.prefab",effect3)
                GameObjectPool:GetInstance():RecycleGameObject("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_4_other.prefab",effect4)
                GameObjectPool:GetInstance():RecycleGameObject("Art/Roles/rol_1201004/Pefabs/Fx_gjj_skill02_1_foot.prefab",effect1)
                GameObjectPool:GetInstance():RecycleGameObject("Art/Scenes/Common/xsyd_2_3.prefab",enter_cam)
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIBossShow)
                coroutine.waitforseconds(0.4)
                anim.speed = 1
            else
                anim:Play("skill_2",0,0)
                CS.LJ_TimelineExtension.PlayableDirectorBindingHelper.BindingBattleCamera(enter_cam,cam_brain)
                coroutine.waitforseconds(2.8)
                GameObjectPool:GetInstance():RecycleGameObject("Art/Scenes/Common/xsyd_2_3.prefab",enter_cam)
            end
        end

        NextStep(self)
    elseif type == 17 then
        if not IsNull(self.load_go) then
            --添加遮罩 防止点击其他按钮
            UIMask:GetInstance():ShowEmptyMask(-111)
            for i = 1, 3 do
                self.load_go.transform:Find("Role"..tostring(i).."/burst").gameObject:SetActive(true)
            end
            TimerManager:GetInstance():SimpleTimerArgs(0.5,function()
                for i = 1, 3 do
                    self.load_go.transform:Find("Role"..tostring(i).."/lock").gameObject:SetActive(false)
                end
                TimerManager:GetInstance():SimpleTimerArgs(0.5,function()
                    UIMask:GetInstance():CloseEmptyMask(-111)
                    GameObjectPool:GetInstance():RecycleGameObject("UI/Prefabs/View/UIGuide_5_5.prefab",self.load_go)
                    self.load_go = nil
                    NextStep(self)
                end,nil,true)
            end,nil,true)
        else
            NextStep(self)
        end
    end
end

local function CheckExcuteStep(self)
    Logger.Log("CheckExcuteStep  "..tostring(self.current_group).."_"..tostring(self.current_step))

    self.guide_data = boot_guide[self.guide_dic[self.current_group][self.current_step]]
    if self.guide_data.NeedScene ~= nil then
        self.need_scene = true
    end
    if self.guide_data.NeedUI ~= nil then
        if self.guide_data.NeedUIType == 1 and UIManager:GetInstance():GetWindow(self.guide_data.NeedUI,true,true) ~= nil then

        elseif self.guide_data.NeedUIType == 3 and UIManager:GetInstance():CheckWindowTop(self.guide_data.NeedUI) then

        else
            self.need_ui = true
        end
    end
    if self.guide_data.NeedEvent ~= nil then
        AddEventTrigger(self)
        self.need_event = true
    end
    if self.guide_data.NeedTime ~= nil then
        self.need_time = true
    end
    if self.guide_data.LogName ~= nil then
        GuideManager.GuideLogReport(1,tostring(self.current_group).."_"..tostring(self.current_step),self.guide_data.LogName,1,0)
    end
    ExcuteStep(self)
end

--执行新手组
local function ExcuteGroup(self,group_id)
    self.running = true
    self.current_group = group_id
    self.current_step = 1
    AddListener(self)
    CheckExcuteStep(self)
end

--检测执行
local function CheckGroupCanLanch(self,group)
    local index = -1
    if self.running or table.keyof(group,self.group_order[#self.group_order]) then
        return index
    end
    for i, v in ipairs(self.group_order) do
        if table.keyof(group,v) == nil then
            index = v
            ExcuteGroup(self,index)
            break
        end
    end
    return index
end



BootGuideManager.__init = __init
BootGuideManager.CheckGroupCanLanch = CheckGroupCanLanch
BootGuideManager.CheckExcuteStep = CheckExcuteStep
BootGuideManager.ExcuteStep = ExcuteStep
BootGuideManager.NextStep = NextStep
return BootGuideManager