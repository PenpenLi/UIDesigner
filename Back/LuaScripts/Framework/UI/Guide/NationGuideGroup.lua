---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- 国战新手引导组管理
--- DateTime: 2019/3/21 18:2
local NationGuideGroup = BaseClass("NationGuideGroup", Singleton)
--local GuideData = DataUtil.GetData("guide")
local JUDGE_TIME_MASK = -111
local function __SetDefaultGuideParam(self)
    self.guideParams = {
        JudgeUIHandle = GuideDefine.GUIDE_JUDGE_ST.DEFAULT,--是否满足UI条件
        JudgeSceneHandle = GuideDefine.GUIDE_JUDGE_ST.DEFAULT,   --是否满足场景条件
        JudgeEventHandle = GuideDefine.GUIDE_JUDGE_ST.DEFAULT,    --是否满足事件条件
        JudgeTimeHandle = GuideDefine.GUIDE_JUDGE_ST.DEFAULT,--是否满足等待时间条件
        Running = GuideDefine.GUIDE_RUNNING_ST.DEFAULT, -- 新手引导运行状态
        delayTriggerRunningTimer = nil, -- 延迟计时器
    }
end

-- 构造函数
local function __init(self)
    self:__SetDefaultGuideParam()
    self:__ParseGuideData()
end

local function __delete(self)
    self.DicNationGuideData = nil
    self.sheet_nation_guide = nil
    self.CurGuideItem = nil
    self.CurType = nil
    self.CurStep = nil
    self.CurGuideID = nil
    if self.guideParams ~= nil then
        self:__DisposeDelayTriggerRunningTimer()
    end
    self.guideParams = nil
end


local function __ParseGuideData(self)
    --等待服务器发下来的时候再解析--  step 表ID
    self.DicNationGuideData = {}
    self.sheet_nation_guide = DataUtil.GetData("nation_guide")
    for i, v in pairs(self.sheet_nation_guide) do
        if self.DicNationGuideData[v.group] == nil then
            self.DicNationGuideData[v.group] = {}
        end
        self.DicNationGuideData[v.group][v.step] = v
    end
    Logger.LogVars("DicNationGuideData : ", self.DicNationGuideData)
end

-- 检测强引导是否开启
local function CheckGuideGroupStrong(self)
    if self.guideParams.Running == GuideDefine.GUIDE_RUNNING_ST.RUNNING then
        return false
    end

    local finishGroup = GuideManager:GetInstance():GetAllGuideFinishGroup()
    for i, v in ipairs(GuideDefine.NATION_GUIDE_PARAM.GUIDE_GROUPS) do
        if table.keyof(finishGroup,v)== nil then
            return self:CheckGuideGroupIdCanLaunch(v)
        end
    end
    return false
end

local function __CheckGuideIsDone(self)
    --todo 判断引导组是否结束
    --self.CurType 组id
    -- self.CurStep 当前步骤id
    local maxStep  -- step
    if self.DicNationGuideData[self.CurType] ~= nil then
        maxStep = table.count(self.DicNationGuideData[self.CurType])
    else
        maxStep = 0
    end

    if self.CurStep >= maxStep then
        return true
    else
        return false
    end
end

local function __GuideOverCheck(self)
    --这组最后一步走完了
    --检测有没有可以完成的步骤
    self.guideParams.Running = GuideDefine.GUIDE_RUNNING_ST.FREE
    UIUtil.SetChatImgStatus(true)
    if UIManager:GetInstance():GetWindow(UIWindowNames.UINationGuide, true, true) ~= nil then
        UIManager:GetInstance():CloseWindow(UIWindowNames.UINationGuide);
    end

    GuideManager:GetInstance():GuideGroupOver(self.CurType, false)

    self.CurStep = nil -- 当前步骤
    self.CurType = nil --当前组
    self:__DisposeDelayTriggerRunningTimer()
    self.CurGuideItem = nil

    --local index = -1
    --if not self.CurGuideItem.GuideOver then
    --    index = GuideManager:GetInstance():GuideGroupOver(self.CurType, false)
    --end
    --if index < 0 then
        --todo 通知 可以检测可以接受 弱引导
        --GuideWeakCheckManager:GetInstance():BeginCheckGuideWeak(true)
        --self.CurStep = nil -- 当前步骤
        --self.CurType = nil --当前组
        --self.delayTriggerRunningTimer = nil
        --self.CurGuideItem = nil
    --end
end

--执行下一步
local function __ExecuteNextStep(self)
    --完成步
    if self.CurGuideItem.LogName ~= nil then
        GuideManager.GuideLogReport(GuideDefine.GUIDE_LOG_REPORT.EVENT.COMPLETE,
                tostring(self.CurGuideItem.group) .. "_" .. tostring(self.CurGuideItem.step),
                self.CurGuideItem.LogName, GuideDefine.GUIDE_LOG_REPORT.TYPE.STRONG, GuideDefine.GUIDE_LOG_REPORT.ACTION.DEFAULT)
    end

    if not __CheckGuideIsDone(self) then
        --没有完成
        self.CurStep = self.CurStep + 1
        self:GuideOpenHandle()
    else
        __GuideOverCheck(self)
    end
    
end

-- 关闭所有UI触摸事件
local function __EnableLastAllUIRayEvent(self)
    if self.allRay ~= nil then
        for i, v in ipairs(self.allRay) do
            v.enabled = true
        end
        self.allRay = nil
    end
end

-- 打开所有UI触摸事件
local function __DisableAllSceneUIRayEvent(self)
    local tempRay = CS.UnityEngine.GameObject.FindObjectsOfType(typeof(CS.UnityEngine.UI.GraphicRaycaster))
    if tempRay ~= nil then
        self.allRay = {}
        for i = 0, tempRay.Length - 1 do
            if tempRay[i].enabled then
                tempRay[i].enabled = false
                table.insert(self.allRay, tempRay[i])
            end
        end
    end
end
--[[ 用于UI引导调用执行下一步]]

local function DoNextStep(self)
    if self.CurGuideItem.HideUI then
        UIManager:GetInstance():GuideControlWindows(true)
    --else
    --    self:__EnableLastAllUIRayEvent()
    end

    NationGuideCheckManager:GetInstance():ClearAllListener()

    --通知服务器
    if self.CurGuideItem.Notice then
        GuideManager.SetGuideRecode(self.CurGuideItem.Notice)
        GuideManager:GetInstance():NationGuideGroupOver(self.CurGuideItem.Notice,false)
        --UnlockData:GetInstance():RemoveNotOpenGuide(self.CurGuideItem.Notice)
    end

    if self.CurGuideItem.Jump > 0 then
        if self.CurGuideItem.GroupJump > 0 then
            self.CurGuideID = self.DicNationGuideData[self.CurGuideItem.GroupJump][self.CurGuideItem.Jump]
            if self.CurGuideItem.GroupJump ~= self.CurType then
                GuideManager:GetInstance():GuideGroupOver(self.CurType,false)
                self.CurType = self.CurGuideItem.GroupJump
            end
        else
            self.CurGuideID = self.DicNationGuideData[self.CurType][self.CurGuideItem.Jump]
        end
        self.CurStep = self.CurGuideItem.Jump
        Logger.Log("开始跳转   " .. self.CurType .. "-" .. self.CurStep)
        self:GuideOpenHandle()
    else
        __ExecuteNextStep(self)
    end
end

-- 执行第一步
local function LaunchGuide(self, stepData)
    --TODO 拿到当前的步骤   拿到对应事件 对应打开Guide处理
    if stepData == nil then
        Logger.LogErrorVars("要运行的第一组数据不存在")
        return
    end

    self.CurType = stepData.group
    self.CurStep = stepData.step
    self:GuideOpenHandle()
    --GuideWeakCheckManager:GetInstance():BeginCheckGuideWeak(false)
end
--為表賦值
local function __HandleDefaultValue(data)
    local result ={ HandleType = GuideDefine.GUIDE_SHEET_HandleType.ASSIGN_UI_BORDER, IsHide = true, NeedTime = 0, ShowBeginPos = true, RearTime = 0,
                      ShowFiger = true, Jump = 0, GroupJump = 0,
                      Notice = false, ClickIsSkill = false, ClickTag = GuideDefine.GUIDE_SHEET_ClickTag.ON_CLICK_UI,
                      ClickEvent = 0, BoxSizeX = 0, BoxSizeY = 0, MoveX = 0, MoveY = 0, GuideBG = true }
    for i, v in pairs(data) do
        result[i] = v
    end
    return result
end

local function GuideOpenHandle(self)
    --引导在运行
    self.guideParams.Running = GuideDefine.GUIDE_RUNNING_ST.RUNNING
    UIUtil.SetChatImgStatus(false)
    self:__DisposeDelayTriggerRunningTimer()
    --是否满足UI条件 这里是true
    self.guideParams.JudgeUIHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    --是否满足场景条件
    self.guideParams.JudgeSceneHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    --是否满足事件条件
    self.guideParams.JudgeEventHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    --是否满足等待时间条件
    self.guideParams.JudgeTimeHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK

    self.CurGuideItem = __HandleDefaultValue(self:GetStaticNationGuideItemByGroupIdAndStep(self.CurType,self.CurStep))
    if self.CurGuideItem == nil then
        self.CurGuideID = self.CurGuideItem.ID
    end
    Logger.LogVars("NationGuideGroup GuideOpenHandle 检测执行   " .. self.CurType .. " _  " .. self.CurStep)
    --UI條件
    --如果当前这一步/一组可跳过  判断 是否下一步的UI实际打开

    local current_scene = SceneManager:GetInstance().current_scene
    if current_scene ~= nil and self.CurGuideItem.SceneJump ~= nil and self.CurGuideItem.SceneJump ~= current_scene.scene_config.Name then
        __ExecuteNextStep(self)
        return
    end

    local RunningUIName =   self:GetGuideSheetCurrentStepNeedUI()
    if RunningUIName ~= nil then
        if self.CurGuideItem.NeedUIType == GuideDefine.GUIDE_SHEET_NeedUIType.UI_CLOSE_EVENT and
                self:__CheckUIWindowActive(RunningUIName) then
            --已经打开
            self.guideParams.JudgeUIHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
        elseif self.CurGuideItem.NeedUIType == GuideDefine.GUIDE_SHEET_NeedUIType.UI_OPEN_WITH_TOP_EVENT  and
                self:__CheckUIWindowTop(RunningUIName) then
            self.guideParams.JudgeUIHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
        else
            self.guideParams.JudgeUIHandle = GuideDefine.GUIDE_JUDGE_ST.NEED_TRIGGER
            NationGuideCheckManager:GetInstance():AddUIListener()
        end
    end

    --場景條件
    local needScene = self:GetGuideSheetCurrentStepNeedScene()
    if  needScene ~= nil then
        if current_scene == nil or current_scene.scene_config.Name ~= needScene then
            self.guideParams.JudgeSceneHandle = GuideDefine.GUIDE_JUDGE_ST.NEED_TRIGGER
            NationGuideCheckManager:GetInstance():AddSceneListener()
        end
    end

    if self.CurGuideItem.NeedEvent ~= nil then
        self.guideParams.JudgeEventHandle = GuideDefine.GUIDE_JUDGE_ST.NEED_TRIGGER
        NationGuideCheckManager:GetInstance():AddEventListener()
    end

    self:__DisposeDelayTriggerRunningTimer()
    if self.CurGuideItem.NeedTime > 0 then
        self.guideParams.JudgeTimeHandle = GuideDefine.GUIDE_JUDGE_ST.NEED_TRIGGER
    end
    self:__TriggerJudgeTimeHandle()
end

local function __CheckUIWindowActive(self,uiName)
   local window =  UIManager:GetInstance():GetWindow(uiName, true, true)
    if window == nil then
        window = NationSceneUIManager:GetInstance():GetWindow(uiName, true, true)
        return window ~= nil
    else
        return true
    end
end
local function __CheckUIWindowTop(self,uiName)
    local window1Top =  UIManager:GetInstance():CheckWindowTop(uiName)
    local window2Top =  NationSceneUIManager:GetInstance():CheckWindowTop(uiName)
    if window1Top or window2Top then
        return true
    end
    return false
end


local function __TriggerJudgeTimeHandle(self)
    Logger.LogVars("-- __TriggerJudgeTimeHandle   1111  guideParams : ",self.guideParams)
    local completeAllHandle = self.guideParams.JudgeUIHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
            and self.guideParams.JudgeSceneHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
            and self.guideParams.JudgeEventHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    if completeAllHandle and self.guideParams.JudgeTimeHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK then
        Logger.LogVars("-- __TriggerJudgeTimeHandle  2222 OpenGuide ")
        self:OpenGuide()
    else
        if completeAllHandle  then
            Logger.LogVars("--__TriggerJudgeTimeHandle 3333 delayTriggerRunningTimer  运行")
            self:__DisposeDelayTriggerRunningTimer()
            self.delayTriggerRunningTimer = TimerManager:GetInstance():GetTimer(self.CurGuideItem.NeedTime, self.TimeHandleFun, self, true)
            self.delayTriggerRunningTimer:Start()
            --添加遮罩 防止点击其他按钮
            UIMask:GetInstance():ShowEmptyMask(JUDGE_TIME_MASK)
        else
            --wait
        end
    end
end

--场 景回调
local function EventHandleFun(self, param)
    Logger.LogVars("NationGuideGroup:  EventHandleFun 回调")
    self.guideParams.JudgeEventHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    self:__TriggerJudgeTimeHandle()
end

local function SceneHandleFun(self)
    Logger.LogVars("NationGuideGroup:  SceneHandleFun 回调")
    self.guideParams.JudgeSceneHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    self:__TriggerJudgeTimeHandle()
end

--UI回调
local function UIHandleFun(self, _needUIType)
    Logger.LogVars("NationGuideGroup:  UIHandleFun 回调 _needUIType : ",_needUIType)
    self.guideParams.JudgeUIHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    NationGuideCheckManager:GetInstance():RemoveUIListener()
    -- _needUIType  1 打开界面 2 关闭界面 3 顶层
    if _needUIType == self.CurGuideItem.NeedUIType then
        self:__TriggerJudgeTimeHandle()
        --if self.guideParams.JudgeSceneHandle and not self.guideParams.JudgeTimeHandle and self.guideParams.JudgeEventHandle then
        --    self:__TriggerJudgeTimeHandle()
        ----elseif self.JudgeUIHandle and self.JudgeSceneHandle and self.CurGuideItem.UnlockID and not self.JudgeEventHandle then
        ----    UIManager:GetInstance():OpenWindow(UIWindowNames.UINewFunOpen, self.CurGuideItem.UnlockID);
        --else
        --    self:OpenGuide()
        --end
    elseif self.CurGuideItem.NeedUIType == GuideDefine.GUIDE_SHEET_NeedUIType.UI_OPEN_WITH_TOP_EVENT
            and self:__CheckUIWindowTop(self:GetGuideSheetCurrentStepNeedUI()) then
        self:__TriggerJudgeTimeHandle()
    end
end

--时间回调
local function TimeHandleFun(self)
    Logger.LogVars("NationGuideGroup:  TimeHandleFun 回调")
    self.guideParams.JudgeTimeHandle = GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    self:__DisposeDelayTriggerRunningTimer()
    UIMask:GetInstance():CloseEmptyMask(JUDGE_TIME_MASK)
    self:__TriggerJudgeTimeHandle()
end

local function __DisposeDelayTriggerRunningTimer(self)
    if self.guideParams.delayTriggerRunningTimer ~= nil then
        self.guideParams.delayTriggerRunningTimer:Stop()
        self.guideParams.delayTriggerRunningTimer = nil
    end
end

local function OpenGuide(self)

    --if self.JudgeUIHandle and self.JudgeSceneHandle and self.CurGuideItem.UnlockID and not self.JudgeEventHandle then
    --    UIManager:GetInstance():OpenWindow(UIWindowNames.UINewFunOpen, self.CurGuideItem.UnlockID);
    --end

    local completeAllHandle = self.guideParams.JudgeUIHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
            and self.guideParams.JudgeSceneHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
            and self.guideParams.JudgeEventHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
            and self.guideParams.JudgeTimeHandle == GuideDefine.GUIDE_JUDGE_ST.TRIGGER_OK
    if not completeAllHandle then
        -- wait for all event
        Logger.LogVars("OpenGuide wait for all Event By OpenGuide with",self.guideParams.JudgeUIHandle,
                self.guideParams.JudgeSceneHandle, self.guideParams.JudgeEventHandle,
                self.guideParams.JudgeTimeHandle)
        return
    end

    --对各种情况的特使处理
    --战斗 记录位置
    if self.CurGuideItem.LogName ~= nil then
        --print("开启"..self.CurGuideItem.LogName)
        GuideManager.GuideLogReport(GuideDefine.GUIDE_LOG_REPORT.EVENT.BEGIN,
                tostring(self.CurGuideItem.group) .. "_" .. tostring(self.CurGuideItem.step)
        , self.CurGuideItem.LogName, GuideDefine.GUIDE_LOG_REPORT.TYPE.STRONG, GuideDefine.GUIDE_LOG_REPORT.ACTION.DEFAULT)
    end
    Logger.LogVars("OpenGuide 当前步骤是什么 ： ",self.CurType .. "--" .. self.CurStep)
    --UIMask:GetInstance():CloseEmptyMask(JUDGE_TIME_MASK)
    --OverEvent 结束的检测
    NationGuideCheckManager:GetInstance():AddOverListener()
    self:__EnableLastAllUIRayEvent()
    if self.CurGuideItem.HideUI then
        UIManager:GetInstance():GuideControlWindows(false)
    --else
        --if self.CurGuideItem.HandleType == GuideDefine.GUIDE_SHEET_HandleType.GET_CARD_SPC_10 or
        --        self.CurGuideItem.HandleType == GuideDefine.GUIDE_SHEET_HandleType.GET_CARD_SPC_11 then
        --    self:__DisableAllSceneUIRayEvent()
        --end
    end

    if UIManager:GetInstance():GetWindow(UIWindowNames.UINationGuide, true, true) ~= nil then
        --已经打开
        Logger.LogVars("OpenGuide 已经打开 UINationGuide 发送  UI_NATION_GUIDE_NEXT ： ",self.CurType .. "--" .. self.CurStep)
        UIManager:GetInstance():Broadcast(UIMessageNames.UI_NATION_GUIDE_NEXT)
    else
        Logger.LogVars("OpenGuide 正常打开 OpenWindow UINationGuide ")
        UIManager:GetInstance():OpenWindow(UIWindowNames.UINationGuide)
    end

end

local function SetGuideServerStep(self, msg)
    Logger.Log("服务储存节点   " .. self.CurType)
    if not self.guideParams.Running == GuideDefine.GUIDE_RUNNING_ST.RUNNING then
        return
    end
    msg.guide = self.CurType
end



-- 获取当前正在实行的项
local function GetGuideSheetCurrentStep(self)
    return self.CurGuideItem
end


local function IsCurrentGuideRunning(self)
    if self.guideParams == nil then
        return false
    end
    return self.guideParams.Running == GuideDefine.GUIDE_RUNNING_ST.RUNNING
end

local function GetGuideSheetCurrentStepNeedUI(self)
    if self.CurGuideItem == nil then
        return nil
    end
    return self.CurGuideItem.NeedUI
end


local function GetGuideSheetCurrentStepNeedScene(self)
    if self.CurGuideItem == nil then
        return nil
    end
    return self.CurGuideItem.NeedScene
end


local function GetGuideSheetCurrentStepNeedEvent(self)
    if self.CurGuideItem == nil then
        return nil
    end
    return self.CurGuideItem.NeedEvent
end

local function GetGuideSheetCurrentStepOverEvent(self)
    if self.CurGuideItem == nil then
        return nil
    end
    return self.CurGuideItem.OverEvent
end

local function CheckGuideGroupIdCanLaunch(self,groupId)
    local firstStepItem = self:GetFirstStaticNationGuideItemByGroupId(groupId)
    if firstStepItem == nil then
        return false
    end
    self:LaunchGuide(firstStepItem)
    return true
end

local function GetFirstStaticNationGuideItemByGroupId(self,groupId)
    local groupItems = self:GetStaticNationGuideTableByGroupId(groupId)
    if groupItems == nil then
        return nil
    end
    return groupItems[1]
end

local function GetStaticNationGuideTableByGroupId(self,groupId)
    if self.DicNationGuideData == nil then
        return nil
    end
    local groupItems = self.DicNationGuideData[groupId]
    return groupItems
end

local function GetStaticNationGuideItemByGroupIdAndStep(self,groupId,stepId)
    if self.DicNationGuideData == nil then
        return nil
    end
    local groupItems = self.DicNationGuideData[groupId]
    if groupItems == nil then
        return nil
    end
    return groupItems[stepId]
end

local function GetStaticNationGuideItemByPK(self,id)
    if self.sheet_nation_guide == nil then
        return nil
    end
    local stepItem = self.sheet_nation_guide[id]
    return stepItem
end

NationGuideGroup.__delete = __delete
NationGuideGroup.__init = __init
NationGuideGroup.SetGuideServerStep = SetGuideServerStep
NationGuideGroup.__CheckGuideIsDone = __CheckGuideIsDone
NationGuideGroup.LaunchGuide = LaunchGuide
NationGuideGroup.GuideOpenHandle = GuideOpenHandle
NationGuideGroup.DoNextStep = DoNextStep
NationGuideGroup.OpenGuide = OpenGuide
NationGuideGroup.TimeHandleFun = TimeHandleFun
NationGuideGroup.UIHandleFun = UIHandleFun
NationGuideGroup.SceneHandleFun = SceneHandleFun
NationGuideGroup.EventHandleFun = EventHandleFun
NationGuideGroup.__GuideOverCheck = __GuideOverCheck
NationGuideGroup.__ParseGuideData = __ParseGuideData
NationGuideGroup.__DisableAllSceneUIRayEvent = __DisableAllSceneUIRayEvent
NationGuideGroup.__EnableLastAllUIRayEvent = __EnableLastAllUIRayEvent
NationGuideGroup.CheckGuideGroupStrong = CheckGuideGroupStrong
NationGuideGroup.GetGuideSheetCurrentStepNeedUI = GetGuideSheetCurrentStepNeedUI
NationGuideGroup.GetGuideSheetCurrentStepNeedScene = GetGuideSheetCurrentStepNeedScene
NationGuideGroup.GetGuideSheetCurrentStepNeedEvent = GetGuideSheetCurrentStepNeedEvent
NationGuideGroup.GetGuideSheetCurrentStepOverEvent = GetGuideSheetCurrentStepOverEvent
NationGuideGroup.__SetDefaultGuideParam = __SetDefaultGuideParam
NationGuideGroup.__DisposeDelayTriggerRunningTimer = __DisposeDelayTriggerRunningTimer
NationGuideGroup.__TriggerJudgeTimeHandle = __TriggerJudgeTimeHandle
NationGuideGroup.GetStaticNationGuideItemByGroupIdAndStep = GetStaticNationGuideItemByGroupIdAndStep
NationGuideGroup.GetStaticNationGuideTableByGroupId = GetStaticNationGuideTableByGroupId
NationGuideGroup.GetFirstStaticNationGuideItemByGroupId = GetFirstStaticNationGuideItemByGroupId
NationGuideGroup.GetStaticNationGuideItemByPK = GetStaticNationGuideItemByPK
NationGuideGroup.CheckGuideGroupIdCanLaunch = CheckGuideGroupIdCanLaunch
NationGuideGroup.GetGuideSheetCurrentStep = GetGuideSheetCurrentStep
NationGuideGroup.IsCurrentGuideRunning = IsCurrentGuideRunning
NationGuideGroup.__CheckUIWindowActive = __CheckUIWindowActive
NationGuideGroup.__CheckUIWindowTop = __CheckUIWindowTop

return NationGuideGroup