---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/3/9 10:46
---
local LuaTweener = {}
local all_tweener = {}

local function GetTweenerFlag()
    for i, v in ipairs(all_tweener) do
        if not v then
            return i
        end
    end
    return #all_tweener+1
end

local function UIMoveToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        all_tweener[args[7]] = false
        args[5].anchoredPosition3D = args[4]
        if args[8] ~= nil then
            args[8]()
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val=args[3]+(args[4]-args[3])*percent;
        args[5].anchoredPosition3D = final_val;
    end
end
local function UIFadeToPlay(args)
    local interval_time=0
    if args[9] then
        interval_time = Time.realtimeSinceStartup - args[1]
    else
        interval_time = Time.time-args[1]
    end
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        all_tweener[args[7]] = false
        if args[5] then
            args[5]:SetAlphaVal(args[4])
        end
        if args[8] ~= nil then
            args[8](args[5])
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val=args[3]+(args[4]-args[3])*percent;
        if args[5] then
            args[5]:SetAlphaVal(final_val)
        end
    end
end

local function UIUnityFadeToPlay(args)
    local interval_time=Time.time-args[1];
    local function SetAlpha(col,val)
        local temp = col.color
        temp.a = val
        col.color = temp
    end
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        all_tweener[args[7]] = false
        SetAlpha(args[5],args[4])
        if args[8] ~= nil then
            args[8](args[5])
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val=args[3]+(args[4]-args[3])*percent;
         SetAlpha(args[5],final_val)
    end
end

local function UIScaleToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        args[5].localScale = args[4]
        all_tweener[args[7]] = false
        if args[8] ~= nil then
            args[8]()
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val=args[3]+(args[4]-args[3])*percent;
        args[5].localScale = final_val;
    end
end

local function UITextToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        if args[7] == 1 then
            args[5].text = DataUtil.GetTextByNum(args[4],0);
        else
            args[5].text = math.floor(args[4]);
        end
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[6]])
        all_tweener[args[6]] = false
        if args[8] ~= nil then
            args[8]()
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],EaseFormula.Linear);
        local final_val= args[3]+(args[4]-args[3])*percent;
        if args[7] == 1 then
            args[5].text = DataUtil.GetTextByNum(final_val,0);
        else
            args[5].text = math.floor(final_val);
        end

    end
end

local function UIScaleTo(rect_trans,old_sca,to_sca,timer,esay_type,end_call)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,old_sca,to_sca,rect_trans,esay_type,flag,end_call}
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,UIScaleToPlay,arg,false,true)
    return flag
end

local function UIMoveTo(rect_trans,old_pos,to_pos,timer,esay_type,end_call)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,old_pos,to_pos,rect_trans,esay_type,flag,end_call}
    rect_trans.anchoredPosition3D = old_pos
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,UIMoveToPlay,arg,false,true)
    return flag
end

local function UIFadeTo(rect_trans,old_alpha,New_alpha,timer,esay_type,end_call,unscale)
    local flag = GetTweenerFlag()
    local curTime = Time.time
    if unscale then
        curTime = Time.realtimeSinceStartup
    end
    local arg={curTime,timer,old_alpha,New_alpha,rect_trans,esay_type,flag,end_call,unscale}
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,UIFadeToPlay,arg,false,true,unscale)
    return flag
end

local function UIUnityFadeTo(rect_trans,old_alpha,New_alpha,timer,esay_type,end_call)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,old_alpha,New_alpha,rect_trans,esay_type,flag,end_call}
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,UIUnityFadeToPlay,arg,false,true)
    return flag
end

local function UITextTo(ui_text,from_val,to_val,timer,font_type,end_call)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,from_val,to_val,ui_text,flag,font_type,end_call}
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,UITextToPlay,arg,false,true)
    return flag
end

local function StopTweener(flag)
    if  all_tweener[flag] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[flag])
        all_tweener[flag] = false
    end
end


local function TransMoveToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        if args[9] then
            args[5].localPosition =  args[4];
        else
            args[5].position = args[4]
        end
        all_tweener[args[7]] = false
        if args[8] ~= nil then
            args[8]()
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val=args[3]+(args[4]-args[3])*percent;
        if args[9] then
            args[5].localPosition = final_val
        else
            args[5].position = final_val
        end

    end
end

local function TransMoveTo(trans,old_pos,to_pos,timer,esay_type,end_call,is_local)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,old_pos,to_pos,trans,esay_type,flag,end_call,is_local}
    trans.position = old_pos
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,TransMoveToPlay,arg,false,true)
    return flag
end


local function TransParabolicMoveToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[8]])
        if args[10] then
            args[5].localPosition =  args[4];
        else
            args[5].position = args[4]
        end
        all_tweener[args[8]] = false
        if args[9] ~= nil then
            args[9]()
        end
    else
        local percent = EaseFormula:Evaluate(interval_time,args[2],EaseFormula.OutQuad)
        local final_val=args[3]+(args[4]-args[3])*percent;
        final_val.y = args[3].y + args[6]*interval_time+0.5*interval_time*interval_time*args[7]
        if args[10] then
            args[5].localPosition = final_val
        else
            args[5].position = final_val
        end

    end
end

local function TransParabolicMoveTo(trans,old_pos,to_pos,timer,end_call,is_local)
    local flag = GetTweenerFlag()
    local acc = -9.8
    local initV = (to_pos.y - old_pos.y)/timer - acc*timer*0.5
    local arg={Time.time,timer,old_pos,to_pos,trans,initV,acc,flag,end_call,is_local}
    trans.position = old_pos
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,TransParabolicMoveToPlay,arg,false,true)
    return flag
end

local function RotateToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        if args[9] then
            args[5].localRotation =  args[4];
        else
            args[5].rotation =  args[4];
        end
        all_tweener[args[7]] = false
        if args[8] ~= nil then
            args[8]()
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val = Quaternion.Lerp(args[3],args[4],percent)
        if args[9] then
            args[5].localRotation = final_val
        else
            args[5].rotation = final_val
        end

    end
end

local function RotateTo(trans,old_elur,to_elur,timer,easy_type,end_call,is_local)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,old_elur,to_elur,trans,easy_type,flag,end_call,is_local}
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,RotateToPlay,arg,false,true)
    return flag
end

local function VCamFovToPlay(args)
    local interval_time=Time.time-args[1];
    if interval_time>args[2] then
        TimerManager:GetInstance():SimpleTimerStop(all_tweener[args[7]])
        local len_setting = args[5].m_Lens
        len_setting.FieldOfView =  args[4]
        args[5].m_Lens = len_setting
        all_tweener[args[7]] = false
        if args[8] ~= nil then
            args[8]()
        end
    else
        local percent=EaseFormula:Evaluate(interval_time,args[2],args[6]);
        local final_val = args[3]+(args[4]-args[3])*percent
        local len_setting = args[5].m_Lens
        len_setting.FieldOfView =  final_val
        args[5].m_Lens = len_setting


    end
end

local function VCamFovTo(vcam,old_val,to_val,timer,easy_type,end_call)
    local flag = GetTweenerFlag()
    local arg={Time.time,timer,old_val,to_val,vcam,easy_type,flag,end_call}
    all_tweener[flag] = TimerManager:GetInstance():SimpleTimerArgs(1,VCamFovToPlay,arg,false,true)
    return flag
end
LuaTweener.TransParabolicMoveTo = TransParabolicMoveTo
LuaTweener.UIUnityFadeTo = UIUnityFadeTo
LuaTweener.VCamFovTo = VCamFovTo
LuaTweener.RotateTo = RotateTo
LuaTweener.UITextTo = UITextTo
LuaTweener.TransMoveTo = TransMoveTo
LuaTweener.UIMoveTo = UIMoveTo
LuaTweener.UIScaleTo = UIScaleTo
LuaTweener.UIFadeTo = UIFadeTo
LuaTweener.StopTweener = StopTweener
return LuaTweener