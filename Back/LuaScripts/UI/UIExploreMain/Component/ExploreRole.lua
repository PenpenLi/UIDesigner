---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LJ095.
--- DateTime: 2019/6/28 15:50
---

local ExploreRole=BaseClass("ExploreRole")

local battle_role_config=DataUtil.GetData("battle_role_config")
local selfPos={[1]={x=-3.9,y=0,z=0},[2]={x=-3.9,y=0,z=1.2},[3]={x=-3.9,y=0,z=-1.346}};
local modelScale=0.5;
local timeline_time = DataUtil.GetData("timeline_time")
ExploreRoleState={
    Idea=1,--站立
    Attack=2,--攻击
    Die=3,--死亡
    BeAttacked=4,--被击
    Move=5,--移动
    FightStay=6,--等待战斗
    UseSkill=7,--使用技能
}

local function Play(self,animName,fade)
    if not self.animator:HasState(0,CS.UnityEngine.Animator.StringToHash(animName))then
        return
    end
    local info =  self.animator:GetCurrentAnimatorStateInfo(0)
    if info:IsName(animName) then
        return
    end
    if fade ~= nil and fade>0 then
        self.animator:CrossFade(animName,fade)
    else
        self.animator:Play(animName,0,0)
    end
end
--切换状态
local function SwitchState(self,_state)
    self.curState=_state;
    if self.curState==ExploreRoleState.Idea then
        Play(self,"idle");
    elseif self.curState==ExploreRoleState.Attack then
        Play(self,"idle");
    elseif self.curState==ExploreRoleState.Die then
        Play(self,"die");
        local dropType=math.random(1,3);
        ExploreBattleManager:GetInstance():PlayerDropCry(self,dropType,math.random(1,6));
        self.timer=Time.time;
    elseif self.curState==ExploreRoleState.BeAttacked then

    end

end

local function LoadRole(self,_roleId,_roleType,_index,_rootPoint)
    self.index=_index;
    local config=battle_role_config[_roleId];
    self.config = config
    local rolePos= _roleType==1 and Vector3.New(selfPos[_index].x,0,selfPos[_index].z)
        or Vector3.New(5.93,0,selfPos[_index].z);
    self.roleObjParent=CS.UnityEngine.GameObject(tostring(_roleId));
    self.roleObjParent.transform:SetParent(_rootPoint.transform);
    self.roleObj=CS.UnityEngine.GameObject(tostring(_roleId));
    self.roleObj.transform:SetParent(self.roleObjParent.transform);
    self.roleObj.transform.localPosition=Vector3.zero;
    self.roleObj.transform.localEulerAngles=Vector3.zero;
    self.roleObjParent.transform.localPosition=rolePos;
    self.useSkill=false;
    if config~=nil then
        GameObjectPool:GetInstance():GetGameObjectAsync(config.prefab_Name,function(go)
            if  self.isDestroy then
                GameObjectPool:GetInstance():RecycleGameObject(config.prefab_Name,go);
                return;
            end
            self.gameObject=go;
            go.transform:SetParent(self.roleObj.transform);
            go.transform.localScale=Vector3.New(config.PrefabZoom,config.PrefabZoom,config.PrefabZoom)*modelScale;
            go.transform.localPosition=Vector3.zero;
            go.transform.localEulerAngles=Vector3.zero;
            self.prbName=config.prefab_Name;
            self.animator=go.transform:GetComponent(typeof(CS.UnityEngine.Animator));

            if _roleType==1 then --我方
                self.roleObjParent.transform.localEulerAngles=Vector3(0,105,0);
                SwitchState(self,ExploreRoleState.Idea);
                self.playAbleDirector=go:GetComponent(typeof(CS.UnityEngine.Playables.PlayableDirector));
                local timeLinePath=string.format("Art/Roles/rol_%s/Animations/%s_attack.playable",_roleId,_roleId);

                ResourcesManager:GetInstance():LoadAsync(timeLinePath,typeof(CS.UnityEngine.Timeline.TimelineAsset),function(asset)
                    self.timelineRes = asset
                    self.useSkill=true;
                    if self.targetRole~=nil then
                        self:UseSkill(self.targetRole);
                    end
                end)
                if timeline_time[timeLinePath] ~= nil then
                    self.timeLineTime = timeline_time[timeLinePath].duration
                    self.timeLineEvent = timeline_time[timeLinePath].event
                end
            else
                self.roleObjParent.transform.localEulerAngles=Vector3(0,-105,0);
                SwitchState(self,ExploreRoleState.Move);
            end
        end)
    end
end
local function CreateEvent(data)
    local result = {}
    if data ~= nil then
        --最后一个被击动画
        local lastIndex = -1
        local lastTime = -1
        for i, v in ipairs(data) do
            table.insert(result,{time = v.time,msg = v.msg,lParam = v.lParam,fParam=v.fParam,sParam=v.sParam})
            if v.msg == "anim_evt" and string.startswith(v.sParam,"hit",true) and v.time > lastTime then
                lastIndex = i
                lastTime = v.time
            end
        end
        if lastIndex > 0 then
            result[lastIndex].isLast = true
        end
    end
    return result
end

local function SkillCaseHandler(self,msg,param1,param2,param3,param4)
    if msg=="anim_evt" then
        if self.targetRole ~= nil then
            if param3 == "rise_1" then
            elseif  param4 then
                self.targetRole:SwitchState(ExploreRoleState.Die);
            else
                self.targetRole:Play(param3,param2)
            end
        end
    end
end
--使用技能
local function UseSkill(self,_targetRole)
    self.targetRole=_targetRole;
    if not self.useSkill then
        return
    end
    local _lookAtPoint = _targetRole.roleObjParent.transform.position
    local _tarDir = (_lookAtPoint - self.roleObjParent.transform.position).normalized
    self.gameObject.transform.parent.parent.forward = _tarDir
    local distance=Vector3.Distance(_lookAtPoint,self.roleObjParent.transform.position)
    --Logger.Log("与目标距离为.."..distance)
    local attackOffset=distance-7.5*self.config.PrefabZoom*modelScale;

    self.playAbleDirector.playableAsset = self.timelineRes
    self.targetRole=_targetRole;
    CS.LJ_TimelineExtension.PlayableDirectorBindingHelper.BindingRoles(
            self.playAbleDirector,
            self.gameObject,_targetRole.gameObject,nil,nil,nil,nil,nil,false,true,-1,true,-1,attackOffset,0);
    self.playAbleDirector:Play()
    self.timeLineTime=self.timeLineTime==nil and 10 or self.timeLineTime;
    self.actionUseTime =  self.timeLineTime
    self.timer = Time.time
    self.skillEvent = CreateEvent(self.timeLineEvent)
    SwitchState(self,ExploreRoleState.UseSkill);
end

local function __init(self,_roleId,_roleType,_index,_rootPoint)
    local constantData= DataUtil.GetData("hang_up_constant")[1];
    selfPos={};
    for i, v in ipairs(constantData.MinePos) do
        table.insert(selfPos,v);
    end
    self.distance=constantData.Distance;
    self.moveSpeed=constantData.Speed;
    LoadRole(self,_roleId,_roleType,_index,_rootPoint);
end

--检测动画播放时长
local function CheckAnimState(self,animName)
    local info =  self.animator:GetCurrentAnimatorStateInfo(0)
    if info:IsName(animName) then
        return info.normalizedTime
    else
        return 0
    end
end
local function Update(self)
    if self.curState==ExploreRoleState.Move then
       local vt= Vector3.left;
        self.roleObjParent.transform:Translate(vt * Time.deltaTime*self.moveSpeed, CS.UnityEngine.Space.World);
        Play(self,"run");
        local dis= Vector3.Distance(self.roleObjParent.transform.localPosition,selfPos[self.index]);
        if dis<=self.distance then
            SwitchState(self,ExploreRoleState.Idea);
            ExploreBattleManager:GetInstance():SelfBeginFight(self.index,self);
        end
    elseif self.curState==ExploreRoleState.UseSkill then
        local curTime = Time.time - self.timer
        if self.skillEvent ~= nil then
            for i = #self.skillEvent, 1,-1 do
                if curTime >= self.skillEvent[i].time then
                    SkillCaseHandler(self,self.skillEvent[i].msg,self.skillEvent[i].lParam,self.skillEvent[i].fParam,self.skillEvent[i].sParam,self.skillEvent[i].isLast)
                    table.remove(self.skillEvent,i)
                end
            end
        end
        if curTime > self.actionUseTime then
            SwitchState(self,ExploreRoleState.Idea)
            ExploreBattleManager:GetInstance():CreatNewEnemyByIndex(self.index);
        end
    elseif self.curState==ExploreRoleState.Die then
        local curTime = Time.time - self.timer
        if curTime > 3 then

            self:OnDestroy();
        else
            if CheckAnimState(self,"die") >= 1 then
                --ExploreBattleManager:GetInstance():RemoveEnemyByIndex(self.index);
                self:OnDestroy();
            end
        end
    end

end

local function OnDestroy(self)
    self.isDestroy=true;
    if not IsNull(self.gameObject) then
        GameObjectPool:GetInstance():RecycleGameObject(self.prbName,self.gameObject);
    end
    if not IsNull(self.roleObjParent) then
        CS.UnityEngine.GameObject.Destroy(self.roleObjParent);
    end
end

ExploreRole.__init=__init;
ExploreRole.SwitchState=SwitchState;
ExploreRole.Update=Update
ExploreRole.OnDestroy=OnDestroy;
ExploreRole.UseSkill=UseSkill;
ExploreRole.Play=Play;
return ExploreRole