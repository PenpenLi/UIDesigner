---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ljl.
--- DateTime: 2019/5/7 15:37
---
local UICardOnlyWeapon=BaseClass(" UICardOnlyWeapon", UIBaseContainer);
local base = UIBaseContainer
local UIWeaponLvInfoItem = require "UI.UICardList.Component.card_weapon.UIWeaponLvInfoItem"
local UIWeaponUseItem = require "UI.UICardList.Component.card_weapon.UIWeaponUseItem"
local UIPandectItem = require "UI.UICardList.Component.card_weapon.UIPandectItem"
local UILvPointItem = require "UI.UICardList.Component.card_weapon.UILvPointItem"
local UIMatButton = require "UI.UIComm.Component.UIMatButton"
local UIWeaponItem=require "UI.UICardList.Component.card_weapon.UIWeaponItem"
local allCardData = DataUtil.GetData("card")
---专属武器解锁
local function SendUnlockRequest(self)
    local msg_id = MsgIDDefine.PBCARD_UNLOCK_PERSONAL_WEAPON_REQUEST
    local msg = MsgIDMap[msg_id]()
    msg.cardId = self.cardId
    NetManager:GetInstance():SendMessage(msg_id, msg,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBCARD_UNLOCK_PERSONAL_WEAPON_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            --更新数据
            local weaponData = WeaponData:GetInstance().weapons[self.cardId]
            local weaponStaticData = DataUtil.GetData("personal_weapon")[weaponData.weaponId]
            weaponData.status = 1
            weaponData.level = 0
            weaponData.strengthSuccessRate = weaponStaticData.Strength[weaponData.level+1].StrenthSuccessRate
            weaponData.unsealTimes = 0
            weaponData.bless = 0
            weaponData:UpdateSelf()
            for i = 1, #weaponData.costUnlock do
                BackpackData:GetInstance():UpdateItemData(weaponData.costUnlock[i].Id, -weaponData.costUnlock[i].Val)
            end
            CardData:GetInstance():UpdateCardDataByWeapon(self.cardId)
            UISpecial:GetInstance():UITipText("解锁成功")
            if self.lock_eff~=nil then
                self.lock_eff.effect.gameObject:SetActive(true)
            else
                self.lock_eff=self:AddComponent(UIEffect, "commonPanel/weaponIcon", 1, EffectConfig.UICardWeaponLockHandler)
            end
            if self.deblocktip1_eff~=nil then
                self.deblocktip1_eff.effect.gameObject:SetActive(false)
                self.deblocktip1_eff.effect.gameObject:SetActive(true)
            else
                self.deblocktip1_eff = self:AddComponent(UIEffect, "deblockingPanel/deblockImg", 1, EffectConfig.UICardUpLightHandler)
            end
            if self.deblocktip2_eff~=nil then
                self.deblocktip2_eff.effect.gameObject:SetActive(false)
                self.deblocktip2_eff.effect.gameObject:SetActive(true)
            else
                self.deblocktip2_eff= self:AddComponent(UIEffect, "deblockingPanel/useDeblocking", 1, EffectConfig.UICardUpLightHandler)
            end
            self:OnRefresh(true)
            self.parent:UpDateInfo(true)
        end
    end)
end

---专属武器解封
local function SendUnsealRequest(self)
    local msg_id = MsgIDDefine.PBCARD_UNSEAL_PERSONAL_WEAPON_REQUEST
    local msg = MsgIDMap[msg_id]()
    msg.cardId = self.cardId
    GuideManager:GetInstance():SetGuideServerStep(msg)
    NetManager:GetInstance():SendMessage(msg_id, msg ,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBCARD_UNSEAL_PERSONAL_WEAPON_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end

        local weapon = WeaponData:GetInstance().weapons[self.cardId]
        weapon.unsealTimes = weapon.unsealTimes + 1
        weapon:UpdateSelf()
        CardData:GetInstance():UpdateCardDataByWeapon(self.cardId)
        for i = 1, #weapon.lastcostUnseal do
            BackpackData:GetInstance():UpdateItemData(weapon.lastcostUnseal[i].Id, -weapon.lastcostUnseal[i].Val)
        end
        --UISpecial:GetInstance():UITipText("解封成功")
        if  self.success_eff~=nil then
            self.success_eff.effect.gameObject:SetActive(false)
            self.success_eff.effect.gameObject:SetActive(true)
        else
            self.success_eff = self:AddComponent(UIEffect, "commonPanel/bg3", 1, EffectConfig.UICardWraponUpHandler)
        end

        if self.deblocktip1_eff~=nil then
            self.deblocktip1_eff.effect.gameObject:SetActive(false)
            self.deblocktip1_eff.effect.gameObject:SetActive(true)
        else
            self.deblocktip1_eff = self:AddComponent(UIEffect, "deblockingPanel/deblockImg", 1, EffectConfig.UICardUpLightHandler)
        end
        if self.deblocktip2_eff~=nil then
            self.deblocktip2_eff.effect.gameObject:SetActive(false)
            self.deblocktip2_eff.effect.gameObject:SetActive(true)
        else
            self.deblocktip2_eff= self:AddComponent(UIEffect, "deblockingPanel/useDeblocking", 1, EffectConfig.UICardUpLightHandler)
        end
        self:OnRefresh(true)
        self.parent:UpDateInfo(true)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIWeaponUnLock,self.cardId)
        UIManager:GetInstance():Broadcast(UIMessageNames.UI_CARD_RED)
    end )
end


---专属武器强化
local function SendStrengthRequest(self)
    local msg_id = MsgIDDefine.PBCARD_STRENGTH_PERSONAL_WEAPON_REQUEST
    local msg = MsgIDMap[msg_id]()
    msg.cardId = self.cardId
    msg.moudleId=self.weapon_part.id
    self.canbtn=false
    GuideManager:GetInstance():SetGuideServerStep(msg)
    NetManager:GetInstance():SendMessage(msg_id, msg, function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("出错了~")
            return
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_NeedEvent)
        local weapon = WeaponData:GetInstance().weapons[self.cardId]
        weapon.strengh[self.weapon_switch].bless = msg_obj.Packages.bless
        if msg_obj.Packages.suc then
            UISpecial:GetInstance():UITipText("强化成功")
            weapon.strengh[self.weapon_switch].level =weapon.strengh[self.weapon_switch].level + 1
            weapon:UpdateSelf()
            CardData:GetInstance():UpdateCardDataByWeapon(self.cardId)
            for i = 1, #weapon.strengh[self.weapon_switch].lastcostStrength do
                BackpackData:GetInstance():UpdateItemData(weapon.strengh[self.weapon_switch].lastcostStrength[i].Id, -weapon.strengh[self.weapon_switch].lastcostStrength[i].Val)
            end
            LJAudioManger:GetInstance():PlayVoice("UI_LevelUp_01")
            if self.Strenthtip1_eff~=nil then
                self.Strenthtip1_eff.effect.gameObject:SetActive(false)
                self.Strenthtip1_eff.effect.gameObject:SetActive(true)
            else
                self.Strenthtip1_eff = self:AddComponent(UIEffect, "intensifyPanel/intensifyImg", 1, EffectConfig.UICardUpLightHandler)
            end
            if self.Strenthtip2_eff~=nil then
                self.Strenthtip2_eff.effect.gameObject:SetActive(false)
                self.Strenthtip2_eff.effect.gameObject:SetActive(true)
            else
                self.Strenthtip2_eff = self:AddComponent(UIEffect, "intensifyPanel/useintensifyImg", 1, EffectConfig.UICardUpLightHandler)
            end
        else
            self.canbtn=true
            UISpecial:GetInstance():UITipText("强化失败增加祝福值")
            for i = 1, #weapon.strengh[self.weapon_switch].costStrength do
                BackpackData:GetInstance():UpdateItemData(weapon.strengh[self.weapon_switch].costStrength[i].Id, -weapon.strengh[self.weapon_switch].costStrength[i].Val)
            end
        end
        if  self.success_eff~=nil then
            self.success_eff.effect.gameObject:SetActive(false)
            self.success_eff.effect.gameObject:SetActive(true)
        else
            self.success_eff = self:AddComponent(UIEffect, "commonPanel/bg3", 1, EffectConfig.UICardWraponUpHandler)
        end
        self:OnRefresh(true)
        self.parent:UpDateInfo(true)
        UIManager:GetInstance():Broadcast(UIMessageNames.UI_CARD_RED)
    end)
end
local function OnCreate(self,parent)
    base.OnCreate(self)
    self.LoopUpStreng=false
    self.parent = parent

    self.deblockingObj = UIUtil.FindTrans(self.transform, "deblockingPanel")
    self.intensifyObj = UIUtil.FindTrans(self.transform, "intensifyPanel")
    self.pandectObj = UIUtil.FindTrans(self.transform, "pandectPanel")
    self.weaponIconImg = self:AddComponent(UIImage, "commonPanel/weaponIcon", AtlasConfig.DynamicTex)
    self.weaponIconbg1 = self:AddComponent(UIImage, "commonPanel/bg2")
    self.weaponIconbg2 = self:AddComponent(UIImage, "commonPanel/bg3")
    self.weaponIconAnim=UIUtil.FindComponent(self.transform,typeof(CS.UnityEngine.Animator),"commonPanel/weaponIcon")
    self.lockObj = UIUtil.FindTrans(self.transform,"commonPanel/lockObl")
    self.weaponLvImg = self:AddComponent(UIImage,"commonPanel/weaponBg")
    self.onShowBtn = self:AddComponent(UIButton,"commonPanel/onShowBtn")
    self.onShowBtn:SetOnClick(function ()
        self.pandectObj.gameObject:SetActive(true)
        self.parent:SetTopRightAndLeftState(true,false)
    end)
    self.weaponChangeBtn = self:AddComponent(UIButton,"commonPanel/weaponChangeBtn")
    self.weaponChangeBtn:SetOnClick(function ()
        if not IsNull(self.parent.curRoleModelInfo.obj) then
            self.parent.ctrl:ChangeWeapon(self.parent.curRoleModelInfo.obj)
        end
    end)
    self.lvGroup=self:AddComponent(UIBaseContainer,"commonPanel/weaponLvParent")
    local lvCount=self.lvGroup.transform.childCount
    self.lvPrbList={}
    for i = 0, lvCount-1 do
        local singleTrans=self.lvGroup.transform:GetChild(i)
        local pass=UILvPointItem.New(self,singleTrans.gameObject)
        pass:OnCreate()
        table.insert(self.lvPrbList,pass)
    end
    self.closeOnShowBtn = self:AddComponent(UIButton,"pandectPanel/maskBtn")
    self.closeOnShowBtn:SetOnClick(function ()
        self.pandectObj.gameObject:SetActive(false)
        self.parent:SetTopRightAndLeftState(true,true)
    end)
    self.weapon_bg=self:AddComponent(UIBaseComponent,"intensifyPanel/info")
    self.slect_obj=UIUtil.FindTrans(self.transform,"intensifyPanel/info/slect_obj")
    self.weapon_parent=self:AddComponent(UIBaseComponent,"intensifyPanel/info/content")
    local count=self.weapon_parent.transform.childCount
    self.weapon_list={}
    for i = 0, count-1 do
        local son=self.weapon_parent.transform:GetChild(i).gameObject
        --初始化一个格子并进行创建
        self.weapon_list[i+1]= UIWeaponItem.New(self,son)
        self.weapon_list[i+1]:OnCreate(i+1,self)
    end
    self.weapon_icon=self:AddComponent(UIImage,"intensifyPanel/info/content_bg/weapon_icon",AtlasConfig.DynamicTex)
    self.weaponNameText = self:AddComponent(UIText,"commonPanel/weaponText")
    self.deblockBtn = self:AddComponent(UIButton,"commonPanel/deblockBtn")
    self.deblockbtn_red=UIUtil.FindTrans(self.transform,"commonPanel/deblockBtn/redpoint_jf")
    self.deblockBtnText = self:AddComponent(UIText,"commonPanel/deblockBtn/deblockText")
    self.deblockBtn_img=self:AddComponent(UIImage,"commonPanel/deblockBtn",AtlasConfig.DynamicTex)
    self.deblockBtn:SetOnClick(function ()
        if self.btn_type==1 then
            return
        end
        if self.LoopUpStreng then
            UISpecial:GetInstance():UITipText("请停止自动强化")
            return
        end

        self.btn_type=1
        self:OnRefresh()
        self.deblockBtnText:SetText("解  封")
        self.intensifyBtnText:SetText("强  化")
    end)
    self.intensifyBtn = self:AddComponent(UIButton,"commonPanel/intensifyBtn")
    self.intensifyBtnText = self:AddComponent(UIText,"commonPanel/intensifyBtn/intensifyText")
    self.intensifybtn_red=UIUtil.FindTrans(self.transform,"commonPanel/intensifyBtn/redpoint_qh")
    self.intensifyBtn_img=self:AddComponent(UIImage,"commonPanel/intensifyBtn",AtlasConfig.DynamicTex)
    self.intensifyBtn:SetOnClick(function ()
        if self.weaponData.status == 0 then
            UISpecial:GetInstance():UITipText("武器解锁后才可强化")
            return
        end
        if self.LoopUpStreng then
            UISpecial:GetInstance():UITipText("请停止自动强化")
            return
        end
        if self.btn_type==2  then
            return
        end
        if  not self.weaponData.strengh[1].status then
            UISpecial:GetInstance():UITipText(self.weaponData.strengh[1].limit_des)
            return
        end
        self.btn_type=2
        self:OnRefresh()
    end)

    self.debloccInfo=UIWeaponLvInfoItem.New(self,"deblockingPanel/infoItem")
    self.debloccInfo:OnCreate(self)
    --self.deblockGrid = self:AddComponent(UIWrapGroup3D, "deblockingPanel/GridScrollect/Grid", UIWeaponLvInfoItem,self)
    self.skillIconImg = self:AddComponent(UIImage,"deblockingPanel/skillFrameImg/skillIconImg", AtlasConfig.DynamicTex)
    self.gray=self.skillIconImg:GetMat()
    self.skillFrameImg = self:AddComponent(UIImage,"deblockingPanel/skillFrameImg", AtlasConfig.DynamicTex)

    self.hunImg = self:AddComponent(UIImage,"deblockingPanel/skillFrameImg/hunImg", AtlasConfig.DynamicTex)
    self.hunText = self:AddComponent(UIText,"deblockingPanel/skillFrameImg/hunImg/hunNumText")
    self.skillDesTextScroll=self:AddComponent(UIScrollRect,"deblockingPanel/skillFrameImg/Scroll View")
    self.skillDesText = self:AddComponent(UIText,"deblockingPanel/skillFrameImg/Scroll View/skillDesText")
    self.useGrid = self:AddComponent(UIWrapGroup3D, "deblockingPanel/useScrollect/useGrid", UIWeaponUseItem,self)
    self.deblockingBtn=UIMatButton.New(self,"deblockingPanel/deblockingBtn")
    self.deblockingBtn:OnCreate()


    self.beforeLvText = self:AddComponent(UIText,"intensifyPanel/beforeLv/beforeLvText")
    self.afterLvText = self:AddComponent(UIText,"intensifyPanel/afterLv/afterLvText")
    self.scrollbarLv = self:AddComponent(UISlider,"intensifyPanel/scrollbarLv")
    self.scoreText = self:AddComponent(UIText,"intensifyPanel/scrollbarLv/scoreText")
    self.intensifyGrid = self:AddComponent(UIWrapGroup3D, "intensifyPanel/intensifyScrollRect/intensifyGrid", UIWeaponLvInfoItem,self)
    self.useIntensifyGrid = self:AddComponent(UIWrapGroup3D,"intensifyPanel/useintensifyScrollRect/useintensifyGrid",UIWeaponUseItem,self)
    self.begin = UIMatButton.New(self,"intensifyPanel/begin")
    self.begin:OnCreate()
    self.begin:OnInitBtn("自动强化",function ()
        self.over.gameObject:SetActive(true)
        self.begin.gameObject:SetActive(false)
        self.LoopUpStreng=true
        self:ContinuousUpTime()
        self.timer = TimerManager:GetInstance():GetTimer(1, self.ContinuousUpTime , self)
        self.timer:Start()
    end)
    self.over = UIMatButton.New(self,"intensifyPanel/over")
    self.over:OnCreate()
    self.over:OnInitBtn("停止",function ()
        self.over.gameObject:SetActive(false)
        self.begin.gameObject:SetActive(true)
        self.LoopUpStreng=false
        if self.timer ~= nil then
            self.timer:Stop()
        end
        self.timer = nil
    end)
    self.breakBtn=UIMatButton.New(self,"intensifyPanel/breakBtn")
    self.breakBtn:OnCreate()
    --self.pandectSV = self:AddComponent(UIScrollRect, "pandectPanel/bg/bg (1)", UIPandectItem,self)
    self.pandect_parent=self:AddComponent(UIBaseComponent,"pandectPanel/bg/bg (1)/grid")
    local pandec_num=self.pandect_parent.transform.childCount
    self.pardect_list={}
    for i = 0, pandec_num-1 do
        local pardectTrans=self.pandect_parent.transform:GetChild(i)
        local pardect_item=UIPandectItem.New(self,pardectTrans.gameObject)
        pardect_item:OnCreate(self)
        table.insert(self.pardect_list,pardect_item)
    end

    self.max1Text =self:AddComponent(UIText,"deblockingPanel/maxText")
    self.max2Text = self:AddComponent(UIText,"intensifyPanel/maxText2")


    self.pandectObj.gameObject:SetActive(false)
    self.btn_type=1
    self.weapon_switch=1
    self.canbtn=true
    self:OnRefresh()
end


--分三个区域   协议  强化  解封

---设置强化数据
local function SetStrengthData(self)
    local weapon_son=#self.weapon_list
    self.weapon_part=self.weaponData.strengh[self.weapon_switch]
    for i = 1, weapon_son do
        self.weapon_list[i]:SetData(self.weaponData.strengh[i])
    end
    self.slect_obj:SetParent(self.weapon_parent.transform:GetChild(self.weapon_switch-1):GetChild(2));
    self.slect_obj.localPosition=Vector3.zero
    self.weapon_icon:SetSpriteName(self.weaponData.icon)
    self.weaponIconImg:SetSpriteName(self.weapon_part.icon)
    self.weaponNameText:SetText(self.weapon_part.name)
    self.costStrengthList = {}
    self.coinStrengthCost = { Id = 0, Val = 0 }
    self.nextStrengthProperty = self.weapon_part.nextStrengthProperty
    --self.curStrengthProperty = self.weapon_part.curStrengthProperty
    self.intensifyGrid:SetLength(3)
    self.intensifyGrid:SetGridPositionByIndex(0)
    self.canbtn=true
    self.beforeLvText:SetText(math.floor(self.weapon_part.level))
    if self.weapon_part.level == self.weapon_part.maxLevel then
        self.afterLvText:SetText("满")
        self.scrollbarLv:SetValue(1)
        self.scoreText.gameObject:SetActive(false)
        self.max2Text.gameObject:SetActive(true)
        self.begin.gameObject:SetActive(false)
        self.over.gameObject:SetActive(false)
        self.breakBtn.gameObject:SetActive(false)
    else
        self.scoreText.gameObject:SetActive(true)
        local cost_num=#self.weapon_part.costStrength
        for i = 1,cost_num  do
            if i == 1 then
                self.coinStrengthCost.Id =self.weapon_part.costStrength[i].Id
                self.coinStrengthCost.Val =self.weapon_part.costStrength[i].Val
            else
                table.insert(self.costStrengthList,{ Id=self.weapon_part.costStrength[i].Id,Val=self.weapon_part.costStrength[i].Val})
            end
        end
        self.afterLvText:SetText(math.floor(self.weapon_part.level) + 1)
        local bless_num=self.weapon_part.bless/self.weapon_part.maxBless
        self.scrollbarLv:SetValue(bless_num)
        self.scoreText:SetText(math.floor(bless_num*100).."%")

        self.max2Text.gameObject:SetActive(false)
        if self.LoopUpStreng then
            self.begin.gameObject:SetActive(false)
            self.over.gameObject:SetActive(true)
        else
            self.begin.gameObject:SetActive(true)
            self.over.gameObject:SetActive(false)
        end
        self.breakBtn.gameObject:SetActive(true)
        self.breakBtn:OnInitBtn("强化",function ()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            if self.LoopUpStreng then
                UISpecial:GetInstance():UITipText("请停止自动强化")
                return
            end
            self:SendStrengthRequest()
        end,self.coinStrengthCost.Id,self.coinStrengthCost.Val)
        self.breakBtn:UpdateCurrency()
        self.begin:UpdateButtonState(1)
        for i = 1,cost_num do
            if BackpackData:GetInstance():GetItemNumById(self.weapon_part.costStrength[i].Id) < self.weapon_part.costStrength[i].Val then
                if i~=1 then
                    self.breakBtn:UpdateButtonState(0,"材料不足")
                end
                self.begin:UpdateButtonState(0)
                --print(self.weapon_part.costStrength[i].Id.."数量不足")
                break
            end
        end
    end
    self.useIntensifyGrid:SetLength(#self.costStrengthList)
    self.useIntensifyGrid:SetGridPositionByIndex(0)
end
local function SetBtnSiwtch(self,switch)
    self.weapon_switch=switch
    self.LoopUpStreng=false
    if self.timer ~= nil then
        self.timer:Stop()
    end
    self:SetStrengthData()
end
--自动强化
local function ContinuousUpTime(self)
    if self.weapon_part.costStrength then
        local cost_num=#self.weapon_part.costStrength
        for i = 1,cost_num do
            if BackpackData:GetInstance():GetItemNumById(self.weapon_part.costStrength[i].Id) < self.weapon_part.costStrength[i].Val then
                UISpecial:GetInstance():UITipText("材料不足 停止自动强化")
                self.over.gameObject:SetActive(false)
                self.begin.gameObject:SetActive(true)
                self.LoopUpStreng=false
                if self.timer ~= nil then
                    self.timer:Stop()
                end
                self.timer = nil
                return
            end
        end
    else
        UISpecial:GetInstance():UITipText("已经满级")
        self.LoopUpStreng=false
        if self.timer ~= nil then
            self.timer:Stop()
        end
        self.timer = nil
        return
    end

    self:SendStrengthRequest()
end

---设置解封数据
local function SetCostData(self)
    self.costBlockList = {}
    self.coinBlockCost = { Id = 0, Val = 0 }
    self.weaponIconImg:SetSpriteName(self.weaponData.icon)
    self.weaponNameText:SetText(self.weaponData.name)
    if self.weaponData.status == 0 and self.weaponData.costUnlock then
        for i, v in ipairs(self.weaponData.costUnlock) do
            if i == 1 then
                self.coinBlockCost.Id = v.Id
                self.coinBlockCost.Val = v.Val
            else
                table.insert(self.costBlockList, v)
            end
        end
        self.max1Text.gameObject:SetActive(false)
        self.deblockingBtn.gameObject:SetActive(true)
        self.deblockingBtn:OnInitBtn("解锁",function ()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            self:SendUnlockRequest()
        end,self.coinBlockCost.Id ,self.coinBlockCost.Val)
        self.deblockingBtn:UpdateCurrency()
        local cardData = CardData:GetInstance().cards[self.cardId]
        local lvbool ,des=DataUtil.JudgeIsLock(20204)
        if not lvbool then
            self.deblockingBtn:UpdateButtonState(0,des)
        elseif cardData.level < cardData.unlockPersonalWeapon then
            self.deblockingBtn:UpdateButtonState(0,"等级达到"..cardData.unlockPersonalWeapon.."级可解锁")
        end
    else
        if self.weaponData.unsealTimes == self.weaponData.maxUnsealTimes then
            self.max1Text.gameObject:SetActive(true)
            self.deblockingBtn.gameObject:SetActive(false)
        else
            for i, v in ipairs(self.weaponData.costUnseal) do
                if i == 1 then
                    self.coinBlockCost.Id = v.Id
                    self.coinBlockCost.Val= v.Val
                else
                    table.insert(self.costBlockList, v)
                end
            end
            self.max1Text.gameObject:SetActive(false)
            self.deblockingBtn.gameObject:SetActive(true)
            local cardData = CardData:GetInstance().cards[self.cardId]
            --判断 武器升级能否
            self.deblockingBtn:OnInitBtn("解封",function ()
                LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
                self:SendUnsealRequest()
            end,self.coinBlockCost.Id ,self.coinBlockCost.Val)
            self.deblockingBtn:UpdateCurrency()
            for i = 1, #self.weaponData.costUnseal do
                if BackpackData:GetInstance():GetItemNumById(self.weaponData.costUnseal[i].Id) < self.weaponData.costUnseal[i].Val then
                    if i~=1 then
                        self.deblockingBtn:UpdateButtonState(0,"材料不足")
                    end
                    break
                end
            end
        end
    end
    self.useGrid:SetLength(#self.costBlockList)
    self.useGrid:SetGridPositionByIndex(0)
    if self.weaponData.unsealTimes<=self.weaponData.maxUnsealTimes then
        if self.weaponData.unsealTimes ~= 0 and self.weaponData.unsealTimes == self.weaponData.maxUnsealTimes then
            self.levelNum = self.weaponData.unsealTimes
        else
            self.levelNum = self.weaponData.unsealTimes + 1
        end
        local type_value= self.weaponData.unsealEffect[self.levelNum].type
        if type_value==1 then
            --属性
            if not self.debloccInfo.gameObject.activeInHierarchy then
                self.debloccInfo.gameObject:SetActive(true)
            end
            if  self.weaponData.unsealTimes ~= 0 and self.weaponData.unsealTimes == self.weaponData.maxUnsealTimes then
                self.debloccInfo:SetData(self.weaponData.unsealEffect[self.weaponData.unsealTimes],true)
            else
                self.debloccInfo:SetData(self.weaponData.unsealEffect[self.weaponData.unsealTimes+1])
            end
            self:GetUnsealEffectSkill()
        elseif type_value==2 then
            --技能
            self.debloccInfo.gameObject:SetActive(false)
            self:GetUnsealEffectSkill()
        end
    else
        self.debloccInfo.gameObject:SetActive(false)
        self.skillFrameImg.gameObject:SetActive(false)
    end

    --描述和闪灯
    if self.weaponData.status == 0 then
        self.weaponLvImg:SetFillVal(0)
        self.infoDes = self.weaponData.unsealEffect
        if self.infoDes == nil then
            self.infoDes = {}
        end
        for i, v in ipairs(self.lvPrbList) do
            if  self.infoDes[i]~=nil then
                v.gameObject:SetActive(true)
                v:Refresh(self.infoDes[i],100,self) --不让点闪烁
            else
                v.gameObject:SetActive(false)
            end
        end
    else
        local float = self.weaponData.unsealTimes / self.weaponData.maxUnsealTimes
        self.weaponLvImg:SetFillVal(float)
        self.infoDes = self.weaponData.unsealEffect
        for i, v in ipairs(self.lvPrbList) do
            if  self.infoDes[i]~=nil then
                v.gameObject:SetActive(true)
                v:Refresh(self.infoDes[i],i,self)
            else
                v.gameObject:SetActive(false)
            end
        end
    end
    local pardect_num=#self.pardect_list
    local pardectinfo_num= #self.infoDes
    if pardectinfo_num>pardect_num then
        Logger.LogError("item 不够")
        for i = 1, pardect_num do
            self.pardect_list[i].gameObject:SetActive(true)
            self.pardect_list[i]:OnRefresh(i)
        end
    else
        for i = 1, pardectinfo_num do
            self.pardect_list[i].gameObject:SetActive(true)
            self.pardect_list[i]:OnRefresh(i)
        end
        for i = pardectinfo_num+1, pardect_num do
            self.pardect_list[i].gameObject:SetActive(false)
        end
    end
    self.pandect_parent.rectTransform.anchoredPosition = Vector3.New(0, 0, 0)
end

local function GetUnsealEffectSkill(self)
    local state=false
    for i = self.weaponData.unsealTimes+1, #self.weaponData.unsealEffect do
        --判断是否有技能  2  类型
        if self.weaponData.unsealEffect[i].type==2 then
            state=true
            --灰色
            local skillId =  tonumber(allCardData[self.cardId].Skill[1])
            --local skillData = SkillData:GetInstance():GetSkillItemByCardIDAndSkillID(self.cardId,skillId)
            local skillData=SkillData:GetInstance().skills[skillId]
            self.skillFrameImg:SetSpriteName(SpriteDefine: GetItemQualityFrameByType(skillData.quality))
            --[[
            if shillData ~= nil and SkillData:GetInstance().allSkillDescription[shillData.exclusiveWeaponEffecte] ~= nil then
                self.skillDesText:SetText(SkillData:GetInstance().allSkillDescription[shillData.exclusiveWeaponEffecte].lvs[1].EffectDesc)
            end--]]
            self.skillDesText:SetText(self.weaponData.unsealEffect[i].name)
            --print("self.weaponData.unsealEffect[i].name"..self.weaponData.unsealEffect[i].name)
            local skillDes_Heigth=self.skillDesText:GetPreferredHeight()+20
            self.skillDesText.rectTransform.sizeDelta = Vector2.New(540,skillDes_Heigth)
            self.skillDesText.rectTransform.anchoredPosition=Vector3.New(0,0,0)
            self.skillDesTextScroll:SetVerticalScrolling(skillDes_Heigth>100)
            self.skillIconImg:SetSpriteName(skillData.icon)
            if i==self.weaponData.unsealTimes+1 then
                --当前显示
                self.skillIconImg:SetMat(nil)
                self.hunImg:SetMat(nil)
                self.hunImg:SetSpriteName(SpriteDefine:GetCrystalIconByType(allCardData[self.cardId].CrystalType))
                self.hunText:SetText(tostring(math.floor(skillData.crystalCost)))
            else
                self.skillIconImg:SetMat(self.gray)
                self.hunImg:SetMat(self.gray)
                self.hunImg:SetSpriteName(SpriteDefine:GetCrystalIconByType(allCardData[self.cardId].CrystalType))
                self.hunText:SetText(tostring(math.floor(skillData.crystalCost)))
            end
            if not self.skillFrameImg.gameObject.activeInHierarchy then
                self.skillFrameImg.gameObject:SetActive(true)
            end
            break
        end
    end
    if  not state then
        --没有技能
        self.skillFrameImg.gameObject:SetActive(false)
    end
end

local function SetEffectClose(self)
    if self.success_eff~=nil then
        self.success_eff.effect.gameObject:SetActive(false)
    end
    if self.lock_eff~=nil then
        self.lock_eff.effect.gameObject:SetActive(false)
    end
    if self.deblocktip1_eff~=nil then
        self.deblocktip1_eff.effect.gameObject:SetActive(false)
    end
    if self.deblocktip2_eff~=nil then
        self.deblocktip2_eff.effect.gameObject:SetActive(false)
    end
    if self.Strenthtip1_eff~=nil then
        self.Strenthtip1_eff.effect.gameObject:SetActive(false)
    end
    if self.Strenthtip2_eff~=nil then
        self.Strenthtip2_eff.effect.gameObject:SetActive(false)
    end
end
local function SetBtnTypeChange(self)
    self.deblockingObj.gameObject:SetActive(self.btn_type==1)
    self.intensifyObj.gameObject:SetActive(self.btn_type==2)
    self.deblockBtn_img:SetSpriteName(self.btn_type==1 and "ui_t_c2_001" or "ui_t_c2_002")
    self.intensifyBtn_img:SetSpriteName(self.btn_type==2 and "ui_t_c2_001" or "ui_t_c2_002")
    self.deblockBtnText:SetColor32(self.btn_type==1 and 21,24,30,255 or 52,52,52,255)
    self.intensifyBtnText:SetColor32(self.btn_type==2 and 21,24,30,255 or 52,52,52,255)
    self.onShowBtn.gameObject:SetActive(self.btn_type==1)
    self.weaponLvImg.gameObject:SetActive(self.btn_type==1)
    self.lvGroup.gameObject:SetActive(self.btn_type==1)
end
local function OnRefresh(self,unout)
    if self.pandectObj.gameObject.activeInHierarchy then
        self.pandectObj.gameObject:SetActive(false)
    end

    if self.cardId~=self.parent.model.select_card_id then
        self.LoopUpStreng=false
        if self.timer ~= nil then
            self.timer:Stop()
        end
        self.timer = nil
    end
    self.cardId = self.parent.model.select_card_id
    self.deblockbtn_red.gameObject:SetActive(RedPointData:GetInstance():GetRedState(tostring(self.cardId).."_4_1"))
    self.intensifybtn_red.gameObject:SetActive(RedPointData:GetInstance():GetRedState(tostring(self.cardId).."_4_2"))
    self.weaponData = WeaponData:GetInstance().weapons[self.cardId]
    if not unout then
        self:SetEffectClose()
    end
    if self.weaponData == nil then
        Logger.Log("self.weaponData_  siNull"..self.cardId)
        return
    end
    if  not self.weaponData.strengh[1].status then
        self.btn_type=1
    end

    self:SetBtnTypeChange()
    if self.btn_type==1 then
        ---武器解封
        SetCostData(self)
        self.parent:SetTopRightAndLeftState(true,true)
    elseif self.btn_type==2 then
        ----武器强化
---
        if not self.weaponData.strengh[self.weapon_switch].status then
            self.weapon_switch=1
        end
        self:SetStrengthData()
        self.parent:SetTopRightAndLeftState(true,false)

    end

    if self.weaponData.status == 0 then
        self.weaponIconImg:SetMat(self.gray)
        self.weaponIconbg1:SetMat(self.gray)
        self.weaponIconbg2:SetMat(self.gray)
        self.lockObj.gameObject:SetActive(true)
        self.weaponIconAnim.enabled = false
    else
        self.weaponIconImg:SetMat(nil)
        self.weaponIconbg1:SetMat(nil)
        self.weaponIconbg2:SetMat(nil)
        self.lockObj.gameObject:SetActive(false)
        self.weaponIconAnim.enabled = true
    end


end

local  function OnDisable(self)
    self.btn_type=1
    self.weapon_switch=1
    self.parent:SetTopRightAndLeftState(true,true)
    self.over.gameObject:SetActive(false)
    self.begin.gameObject:SetActive(true)
    self.LoopUpStreng=false
    if self.timer ~= nil then
        self.timer:Stop()
    end
    self.timer = nil
end
local function OnDestroy(self)
    --主界面DesTory 触发
end
UICardOnlyWeapon.OnDestroy= OnDestroy
UICardOnlyWeapon.OnDisable= OnDisable
UICardOnlyWeapon.SendStrengthRequest = SendStrengthRequest
UICardOnlyWeapon.SendUnsealRequest = SendUnsealRequest
UICardOnlyWeapon.SendUnlockRequest = SendUnlockRequest
UICardOnlyWeapon.OnCreate=OnCreate
UICardOnlyWeapon.OnRefresh=OnRefresh
UICardOnlyWeapon.ContinuousUpTime= ContinuousUpTime
UICardOnlyWeapon.GetUnsealEffectSkill= GetUnsealEffectSkill
UICardOnlyWeapon.SetEffectClose = SetEffectClose
UICardOnlyWeapon.SetBtnTypeChange = SetBtnTypeChange
UICardOnlyWeapon.SetBtnSiwtch = SetBtnSiwtch
UICardOnlyWeapon.SetStrengthData = SetStrengthData
return UICardOnlyWeapon