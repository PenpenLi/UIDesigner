---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/5/10 16:39
---
local UICardJLRSkillWrap = BaseClass("UICardJLRSkillWrap", UIBaseContainer)
local base = UIBaseContainer
local UIMatButton = require "UI.UIComm.Component.UIMatButton"
local skillitem=require "UI.UICardList.Component.card_skill.UICardSkillWrap"
local function OnCreate(self,holder)
    base.OnCreate(self)
    self.holder=holder
    self.skillinfo =skillitem.New(self,"SkillIcon")
    self.skillinfo:OnCreate(self)
    self.skillname=self:AddComponent(UIText, "_name")
    self.skilllv=self:AddComponent(UIText, "_lv")
    self.nowText = self:AddComponent(UIText, "base/base_Scroll/now_text");
    self.nowScorll=self:AddComponent(UIScrollRect,"base/base_Scroll")
    self.nextText = self:AddComponent(UIText, "next/next_Scroll/next_text")
    self.nextScorll=self:AddComponent(UIScrollRect,"next/next_Scroll")
    self.next_title=self:AddComponent(UIText,"next/tip_1/nextTip")
    self.Btn = UIMatButton.New(self,"level1Btn")
    self.Btn:OnCreate()
    self.easyfunc = {}
    self.easyfunc[1] = Bind(self,self.SetCanBool)
    self.canbtn=true
end
local function GetSv(self)
    --设置 SV
    local base_Heigth=self.nowText:GetPreferredHeight()
    self.nowText.rectTransform.sizeDelta = Vector2.New(680,base_Heigth)
    self.nowText.rectTransform.anchoredPosition=Vector3.New(0,0,0)
    self.nowScorll:SetVerticalScrolling(base_Heigth>150)
    local next_Heigth=self.nextText:GetPreferredHeight()
    self.nextText.rectTransform.sizeDelta = Vector2.New(680,next_Heigth)
    self.nextText.rectTransform.anchoredPosition=Vector3.New(0,0,0)
    self.nextScorll:SetVerticalScrolling(next_Heigth>150)
end

local function OnRefresh(self,data)
    self.data=SkillData:GetInstance().skills[data.id]
    self.skillinfo:OnRefresh(self.data.templateId,self.data.level,self.holder.holder.holder.model.select_card_id)
    self.init_id = nil
    self.skilllv:SetText(tostring(math.floor(self.data.level)) .. "/" .. tostring(math.floor(self.data.breakLevel)))
    self.skillname:SetText(self.data.name)
    self.nowText:SetText(DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level,self.data.breakTimes))
    if self.data.level < self.data.maxLevel then
        if self.data.level== self.data.breakLevel then
            self.next_title:SetText("突破效果")
            self.nextText:SetText(DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level,self.data.breakTimes+1))
        else
            self.next_title:SetText("升级效果")
            self.nextText:SetText(DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level+1,self.data.breakTimes))
        end
    else
        self.next_title:SetText("已达上限")
        self.nextText:SetText("等级已达上限");
    end

    if self.data.level >= self.data.breakLevel and self.data.level < self.data.maxLevel then
        --升级完 要反响刷新
        self.Btn.gameObject:SetActive(true)
        self.Btn:OnInitBtn("突破",function ()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            --UISpecial:GetInstance():UITipText("技能表不全  等技能表数据")
            if not self.addFun then
                self.addFun=true
                DataManager:GetInstance():AddListener(DataMessageNames.UI_ONLY_CHANGE_SHLBOOL, self.easyfunc[1])
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISkillBreakThrough,self.data,nil,"技能")
        end )
    elseif self.data.level < self.data.breakLevel then
        self.Btn.gameObject:SetActive(true)
        self.Btn:OnInitBtn("升级",function ()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            self:SendUpLevelRequest()
        end ,CoinDefine.SkillExp, self.data.costItem[1].Val,nil, function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetSkillExp)
        end)
        self.Btn:UpdateCurrency("技能经验不足")
        --
         local state, type, des = UnlockData:GetInstance():GetLockDataState(20102)
        if not state then
            self.Btn:UpdateButtonState(0,des)
        end
    else
        self.Btn.gameObject:SetActive(false)
    end
    self:GetSv()
    DataManager:GetInstance():RemoveListener(DataMessageNames.UI_ONLY_CHANGE_SHLBOOL,  self.easyfunc[1])
    self.addFun=false
end
local function SetCanBool(self)
    self.canbtn=false
end
local function SendUpLevelRequest(self)
    local msd_id = MsgIDDefine.PBCARD_SKILL_UP_LEVEL_REQUEST
    local msg = (MsgIDMap[msd_id])()
    msg.cardId =self.data.cardId
    msg.skillId =self.data.id
    self.init_id =  msg.skillId
    msg.skillType =self.data.skillType
    GuideManager:GetInstance():SetGuideServerStep(msg)
    NetManager:GetInstance():SendMessage(msd_id, msg,Bind(self,self.OnRecvUpLevel))
end

local function OnRecvUpLevel(self,msg_obj)
    if msg_obj.OpCode ~= 0 then
        UISpecial:GetInstance():UITipText("所需材料不足")
        return
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.UIGuide_OverEvent)
    --先消耗材料
    self.canbtn=false

    local skillData = SkillData:GetInstance().skills[self.data.id]
    local cost_item=skillData.costItem
    for i = 1, #cost_item do
        BackpackData:GetInstance():UpdateItemData(cost_item[i].Id, -cost_item[i].Val)
    end
    --后更新技能数据
    skillData.level = skillData.level + 1
    SkillData:GetInstance():UpdateSkillDataByLevel(self.data.id)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NEWUICARD_UPDATE_SKILL)
    UISpecial:GetInstance():UITipText("技能升级成功")
end

UICardJLRSkillWrap.OnRefresh = OnRefresh
UICardJLRSkillWrap.OnCreate = OnCreate
UICardJLRSkillWrap.OnRecvUpLevel = OnRecvUpLevel
UICardJLRSkillWrap.SendUpLevelRequest = SendUpLevelRequest
UICardJLRSkillWrap.SetCanBool = SetCanBool
UICardJLRSkillWrap.GetSv = GetSv
return UICardJLRSkillWrap