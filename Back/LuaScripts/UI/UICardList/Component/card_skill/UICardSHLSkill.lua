---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/5/11 10:42
---
local UICardSHLSkill = BaseClass("UICardSHLSkill", UIBaseContainer)
local skillWrapitem=require "UI.UICardList.Component.card_skill.UICardSkillWrap"
local UIMatButton = require "UI.UIComm.Component.UIMatButton"
local SkillWeaponDescription = DataUtil.GetData("skill_effect")
local base = UIBaseContainer

local base_skill_panel_path="baseSkillPanel";
local fight_skill_panel_path="fightSkillPanel";
local enter_effect_icon_path="fightSkillPanel/SkillItem1/SkillIcon/Skill_Bg/Skill_Icon_enter";
local enter_effect_skill_desc="fightSkillPanel/base/base_Scroll/enterskillDesc"

local function OnCreate(self,holder)
    base.OnCreate(self)
    self.holder=holder
    self.baseSkillPanel=UIUtil.FindTrans(self.transform,base_skill_panel_path);
    self.fightSkillPanel=UIUtil.FindTrans(self.transform,fight_skill_panel_path);
    self.enterEffectIcon=self:AddComponent(UIImage,enter_effect_icon_path,AtlasConfig.DynamicTex);
    self.enterEffectSkillDescText=self:AddComponent(UIText,enter_effect_skill_desc);

    self.skillItem=skillWrapitem.New(self,"baseSkillPanel/SkillItem1/SkillIcon")
    self.skillItem:OnCreate(self)
    self.skill_name=self:AddComponent(UIText,"baseSkillPanel/SkillItem1/_name")
    self.skill_lv = self:AddComponent(UIText,"baseSkillPanel/SkillItem1/_lv")
    self.baseobj=UIUtil.FindTrans(self.transform,"baseSkillPanel/base")
    self.base_title=self:AddComponent(UIText,"baseSkillPanel/base/tip/baseTip")
    self.tips = self:AddComponent(UIText,"baseSkillPanel/base/tip/baseTip (1)")
    self.base_scroll=self:AddComponent(UIScrollRect,"baseSkillPanel/base/base_Scroll")
    self.base_text=self:AddComponent(UIText,"baseSkillPanel/base/base_Scroll/now_text")
    self.nextobj=UIUtil.FindTrans(self.transform,"baseSkillPanel/next")
    self.next_title=self:AddComponent(UIText,"baseSkillPanel/next/tip_1/nextTip")
    self.next_scroll=self:AddComponent(UIScrollRect,"baseSkillPanel/next/next_Scroll")
    self.next_text=self:AddComponent(UIText,"baseSkillPanel/next/next_Scroll/next_text")
    self.contentobj=UIUtil.FindTrans(self.transform,"baseSkillPanel/contnet")
    self.Btn = UIMatButton.New(self,"baseSkillPanel/btnparent/level1Btn")
    self.Btn:OnCreate()
    self.btnGroup={}
    table.insert(self.btnGroup,{btn=self:AddComponent(UIButton, "lvbtn"),
                                img=self:AddComponent(UIImage,"lvbtn",AtlasConfig.DynamicTex),
                                text = self:AddComponent(UIText,"lvbtn/qualityType"),
                                name = "升级效果"
    })
    table.insert(self.btnGroup,{btn=self:AddComponent(UIButton, "breakbtn"),
                                img=self:AddComponent(UIImage,"breakbtn",AtlasConfig.DynamicTex),
                                text = self:AddComponent(UIText,"breakbtn/breakbtnType"),
                                name = "进阶效果"
    })
    table.insert(self.btnGroup,{btn=self:AddComponent(UIButton, "upbtn"),
                                img=self:AddComponent(UIImage,"upbtn",AtlasConfig.DynamicTex),
                                text = self:AddComponent(UIText,"upbtn/upbtnType"),
                                name = "觉醒效果"
    })
    table.insert(self.btnGroup,{btn=self:AddComponent(UIButton, "fightSkillBtn"),
                                img=self:AddComponent(UIImage,"fightSkillBtn",AtlasConfig.DynamicTex),
                                text = self:AddComponent(UIText,"fightSkillBtn/fightSkillText"),
                                name = "出场技效果"
    })
    for i = 1, #self.btnGroup do
        self.btnGroup[i].btn:SetOnClick(function ()
            if self.btn~=i then
                self.btn=i
                self:OnRefresh()
            end
        end)
    end
    self.btn=1
    self.canbtn=true
    self.easyfunc = {}
    self.easyfunc[1] = Bind(self,self.SetCanBool)
    self.tips.gameObject:SetActive(false)
    self.card_id=nil
end
local function SetClick(self)
    for j = 1, #self.btnGroup do
        if  self.btn==j then
            self.btnGroup[j].img:SetSpriteName("ui_t_c2_001")
            self.btnGroup[j].text:SetText(self.btnGroup[j].name)
            self.btnGroup[j].text:SetColor32(21,24,30,255)
        else
            self.btnGroup[j].img:SetSpriteName("ui_t_c2_002")
            self.btnGroup[j].text:SetText(self.btnGroup[j].name)
            self.btnGroup[j].text:SetColor32(52,52,52,255)
        end
    end
end

local function GetSv(self)
    --设置 SV
    local base_Heigth=self.base_text:GetPreferredHeight()+20
    self.base_text.rectTransform.sizeDelta = Vector2.New(680,base_Heigth)
    self.base_text.rectTransform.anchoredPosition=Vector3.New(0,0,0)
    self.base_scroll:SetVerticalScrolling(base_Heigth>150)
    local next_Heigth=self.next_text:GetPreferredHeight()
    self.next_text.rectTransform.sizeDelta = Vector2.New(680,next_Heigth)
    self.next_text.rectTransform.anchoredPosition=Vector3.New(0,0,0)
    self.next_scroll:SetVerticalScrolling(next_Heigth>150)
end


local  function ComUI(self)
    if not self.baseobj.gameObject.activeInHierarchy then
        self.baseobj.gameObject:SetActive(true)
    end
    if not self.nextobj.gameObject.activeInHierarchy then
        self.nextobj.gameObject:SetActive(true)
    end
    self.base_text:SetText( DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level,self.data.breakTimes))
    if self.data.level<self.data.breakLevel then
        self.next_text:SetText(DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level+1,self.data.breakTimes))
    else
        self.next_text:SetText(DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level,self.data.breakTimes+1))
    end


    self.Btn.gameObject:SetActive(true)
    self.contentobj.gameObject:SetActive(false)
end
local function OnRefresh(self)
    if self.card_id~=self.holder.holder.model.select_card_id then
        self.btn=1
        self.card_id=self.holder.holder.model.select_card_id
    end
    local model_skillinfo=self.holder.holder.model.skillList[self.holder.holder.model.clickskilldata]
    self.data=SkillData:GetInstance().skills[model_skillinfo.id]
    if WeaponData:GetInstance().weapons[self.data.cardId]==nil then
        self.btnGroup[3].btn.gameObject:SetActive(false)
        self.btn=self.btn==3 and 1 or self.btn
    else
        self.btnGroup[3].btn.gameObject:SetActive(true)
    end
    self:SetClick()
    --self.btnGroup[self.btn].btn:Click()

    if self.canbtn then
        if self.base_eff~=nil and self.base_eff.effect.gameObject~=nil then
            self.base_eff.effect.gameObject:SetActive(false)
            end
        if self.up_eff~=nil and self.up_eff.effect.gameObject~=nil then
            self.up_eff.effect.gameObject:SetActive(false)
            end
    else
        if self.base_eff~=nil and self.base_eff.effect.gameObject~=nil then
            self.base_eff.effect.gameObject:SetActive(false)
            self.base_eff.effect.gameObject:SetActive(true)
        else
            self.base_eff = self:AddComponent(UIEffect, "baseSkillPanel/base/tip", 1, EffectConfig.UICardUpLightHandler)
        end
        if self.up_eff~=nil and  self.up_eff.effect.gameObject~=nil then
            self.up_eff.effect.gameObject:SetActive(false)
            self.up_eff.effect.gameObject:SetActive(true)
        else
            self.up_eff = self:AddComponent(UIEffect, "baseSkillPanel/next/tip_1", 1, EffectConfig.UICardUpLightHandler)
        end
    end

    self.skillItem:OnRefresh(self.data.templateId,self.data.level,self.holder.holder.model.select_card_id)
    self.skill_name:SetText(self.data.name)

    self.fightSkillPanel.transform.gameObject:SetActive(self.btn==4);
    self.baseSkillPanel.transform.gameObject:SetActive(self.btn~=4);
    if self.btn==1 then
        --升级界面
        self.base_title:SetText("当前效果")

        self.tips.gameObject:SetActive(false)
        self.skill_lv:SetText("<color=#000000>等级:"..math.floor(self.data.level).."/"..math.floor(self.data.breakLevel).."</color>")
        if self.data.level >= self.data.breakLevel and self.data.level < self.data.maxLevel then
            --可突破
            self.next_title:SetText("突破效果")
            self:ComUI()
            self.Btn:OnInitBtn("突破",function ()
                LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")

                UIManager:GetInstance():OpenWindow(UIWindowNames.UISkillBreakThrough,self.data,nil,"绝技")
                --UISpecial:GetInstance():UITipText("技能表不全  等技能表数据")
            end )
        elseif self.data.level < self.data.breakLevel then
            --升级
            self.next_title:SetText("升级效果")
            self:ComUI()
            self.Btn:OnInitBtn("升级",function ()
                LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
                self:SendUpLevelRequest()
            end ,CoinDefine.SkillExp, self.data.costItem[1].Val,nil, function()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetSkillExp)
            end)
            self.Btn:UpdateCurrency("技能经验不足")
        else
            self.baseobj.gameObject:SetActive(true)
            self.nextobj.gameObject:SetActive(false)
            self.Btn.gameObject:SetActive(false)
            self.contentobj.gameObject:SetActive(true)
            --满级
            self.base_text:SetText( DataUtil.GetSkillDesByIdAndLevel(self.data.templateId,self.data.level,self.data.breakTimes))
        end
    elseif self.btn==2 then
        --突破
        self.baseobj.gameObject:SetActive(true)
        self.nextobj.gameObject:SetActive(false)
        self.contentobj.gameObject:SetActive(false)
        self.base_text:SetText("读哪个表？？")
        if  self.data.level < self.data.breakLevel or  (self.data.level >= self.data.breakLevel and self.data.level < self.data.maxLevel) then
            --No突破
            self.base_title:SetText("进阶效果")
            self.tips.gameObject:SetActive(true)
            self.tips:SetText("（等级需要达到"..self.data.breakLevel.."）")
            -- "<color=#e5de89>".."守护灵".."</color>"
            self.skill_lv:SetText("<color=#FF1C00>未进阶</color>")
            self.Btn.gameObject:SetActive(true)
            self.Btn:OnInitBtn("前往升级",function ()
                LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
                self.btn=1
                self:OnRefresh()
            end )
        else
            self.Btn.gameObject:SetActive(false)
            self.tips.gameObject:SetActive(false)
            self.base_title:SetText("进阶效果")
            self.skill_lv:SetText("<color=#19FF00>已进阶</color>")
        end
    elseif self.btn==3 then
        --觉醒
        self.baseobj.gameObject:SetActive(true)
        self.nextobj.gameObject:SetActive(false)
        self.contentobj.gameObject:SetActive(false)
        if self.data.exclusiveWeaponEffecte and self.data.exclusiveWeaponEffecte~=0   then

            if SkillWeaponDescription[self.data.exclusiveWeaponEffecte]==nil then
                self.base_text:SetText("没有这个专属武器技能描述 ID："..self.data.exclusiveWeaponEffecte)
            else
                self.base_text:SetText(DataUtil.GetWeaponUnsealData(self.data.exclusiveWeaponEffecte,1))
            end

        else
            self.base_text:SetText("没有专属武器技能描述")
        end

        --判断条件  现在条件是判断专属武器
        local CardData=CardData:GetInstance().cards[self.data.cardId]
        if CardData then
            if CardData.personalWeapon and CardData.personalWeapon.status == 1 and CardData.personalWeapon.Awakening  then
                --有专属武器
                self.skill_lv:SetText("<color=#3F793F>已觉醒</color>")
                self.base_title:SetText("觉醒效果")
                self.Btn.gameObject:SetActive(false)
                self.tips.gameObject:SetActive(false)
            else
                self.Btn.gameObject:SetActive(true)
                self.skill_lv:SetText("<color=#DF4C4C>未觉醒</color>")
                self.base_title:SetText("觉醒效果")
                self.tips.gameObject:SetActive(true)
                self.tips:SetText("（解封专属武器）")
                self.Btn:OnInitBtn("前往解封",function ()
                    LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
                    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NEWUICARD_CHNAGE_UITYPE, 5)
                end)
            end
        end
    else--出场技效果
        local cardId= self.holder.holder.model.select_card_id;
        local cardData=DataUtil.GetData("card");
        local skilEffect=DataUtil.GetData("skill_effect");
        if cardData[cardId] then
            local enterEffectId=cardData[cardId].EnterEffect;
            if skilEffect[enterEffectId] then
                self.enterEffectSkillDescText:SetText(DataUtil.ParseEnterSkillDes(enterEffectId,1));
                self.enterEffectIcon:SetSpriteName(self.data.icon);
            end
        end

    end
    --
    self:GetSv()
end

local function SendUpLevelRequest(self)
    local msd_id = MsgIDDefine.PBCARD_SKILL_UP_LEVEL_REQUEST
    local msg = (MsgIDMap[msd_id])()
    msg.cardId =self.data.cardId
    msg.skillId =self.data.id
    msg.skillType =self.data.skillType
    NetManager:GetInstance():SendMessage(msd_id, msg,Bind(self,self.OnRecvUpLevel))
end

local function OnRecvUpLevel(self,msg_obj)
    if msg_obj.OpCode ~= 0 then
        UISpecial:GetInstance():UITipText("所需材料不足")
        return
    end
    local cots_item=self.data.costItem
    --先消耗材料
    self.canbtn=false
    UISpecial:GetInstance():UITipText("技能升级成功")
    for i = 1, #cots_item do
        BackpackData:GetInstance():UpdateItemData(cots_item[i].Id, -cots_item[i].Val)
    end
    --后更新技能数据
    self.data.level = self.data.level + 1
    SkillData:GetInstance():UpdateSkillDataByLevel(self.data.id)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NEWUICARD_UPDATE_SKILL)
end
local function OnDisable(self)
    --离开
    self.btn=1
    self.card_id=nil
end
local function SetCanBool(self)
    self.canbtn=false
end
local function OnAddListener(self)
    DataManager:GetInstance():AddListener(DataMessageNames.UI_ONLY_CHANGE_SHLBOOL,  self.easyfunc[1])
end

local function OnRemoveListener(self)
    DataManager:GetInstance():RemoveListener(DataMessageNames.UI_ONLY_CHANGE_SHLBOOL,  self.easyfunc[1])
end


UICardSHLSkill.OnRefresh = OnRefresh
UICardSHLSkill.OnCreate = OnCreate
UICardSHLSkill.OnDisable = OnDisable
UICardSHLSkill.SendUpLevelRequest = SendUpLevelRequest
UICardSHLSkill.OnRecvUpLevel = OnRecvUpLevel
UICardSHLSkill.SetClick = SetClick
UICardSHLSkill.ComUI= ComUI
UICardSHLSkill.GetSv = GetSv
UICardSHLSkill.OnAddListener = OnAddListener
UICardSHLSkill.OnRemoveListener = OnRemoveListener
UICardSHLSkill.SetCanBool = SetCanBool
return UICardSHLSkill