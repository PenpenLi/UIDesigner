---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/5/5 21:05
---
local UICardContainer = BaseClass(" UICardContainer", UIBaseContainer);
local base = UIBaseContainer
local UICardPoolWrapItem = require "UI.UICardList.Component.card_list.UICardPoolWrapItem"
local static_data=DataUtil.GetData("card")
local function OnCreate(self,parent)
    base.OnCreate(self);
    self.parent=parent
    self.slectcontent={
        {},
        {{name="SSR",value=4},{name="SR",value=3},{name="R",value=2}},
        {{name="红",value=1},{name="黄",value=2},{name="蓝",value=3}},
        {},
        {},
        {{name="5星",value=5},{name="4星",value=4},{name="3星",value=3},{name="2星",value=2},{name="1星",value=1}},
    }
    self.typecontent={
        {name="全部",value=1},
        {name="品质",value=2},
        {name="水晶",value=3},
        {name="等级",value=4},
        {name="战斗力",value=5},
        {name="星级",value=6}
    }
    self.typeinfo={}
    for i = 1, 6 do
        table.insert( self.typeinfo,{btn=self:AddComponent(UIButton, "Image/btnFilterByQuality/TypeGrid/type"..i),
                                     text=self:AddComponent(UIText, "Image/btnFilterByQuality/TypeGrid/type"..i.."/".."type"..i.."Text"),
                                     img=self:AddComponent(UIImage, "Image/btnFilterByQuality/TypeGrid/type"..i,AtlasConfig.DynamicTex)
        })
    end
    self.slectinfo={}
    for i = 0, 5 do
        table.insert( self.slectinfo,{btn=self:AddComponent(UIButton, "Image/slectGrid/slect"..i),
                                     text=self:AddComponent(UIText, "Image/slectGrid/slect"..i.."/".."slect"..i.."Text"),
                                      img=self:AddComponent(UIImage, "Image/slectGrid/slect"..i,AtlasConfig.DynamicTex)
        })
    end
    for i = 1, #self.slectinfo do
        self.slectinfo[i].btn:SetOnClick(function ()
            --点击选项
            if self.slect~=self.slectcontent[self.type][i].value then
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_NEWUICARD_CARDLIST,self.type,self.slectcontent[self.type][i].value)
            end
        end)
    end
    for i = 1, #self.typeinfo do
        self.typeinfo[i].text:SetText(self.typecontent[i].name)
        self.typeinfo[i].btn:SetOnClick(function ()
            --点击类型
            if self.type~=i then
                --传递过去  刷界面nil
                if self.slectcontent[i][1]~=nil then
                    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NEWUICARD_CARDLIST,i,self.slectcontent[i][1].value)
                else

                    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NEWUICARD_CARDLIST,i,nil)
                end
            else
                self.grid.gameObject:SetActive(false)
                self.grid_mask.gameObject:SetActive(false)
            end
        end)
    end

    self.quaOrcry_text = self:AddComponent(UIText, "Image/btnFilterByQuality/qualityType")

    self.card_wrapgroup = self:AddComponent(UIWrapGroup3D, "Image/Scroll View/GameObject", UICardPoolWrapItem,parent,self)

    self.grid = UIUtil.FindTrans(self.transform, "Image/btnFilterByQuality/TypeGrid");
    self.grid_arrow = UIUtil.FindTrans(self.transform, "Image/btnFilterByQuality/qualityArrow");

    self.grid_mask = self:AddComponent(UIButton, "Image/btnFilterByQuality/btnConditionMask")
    self.grid_mask:SetOnClick(function()
        self.grid.gameObject:SetActive(false)
        self.grid_mask.gameObject:SetActive(false)
    end)
    self.Slect=UIUtil.FindTrans(self.transform, "Image/Slect");
    self.slect_ani=UIUtil.FindComponent(self.transform,typeof(CS.UnityEngine.Animator),"Image/Slect/select to synthesis")
    self.slect_ani.enabled=false
    self.btnType=self:AddComponent(UIButton, "Image/btnFilterByQuality")
    self.btnType:SetOnClick(function ()
        self.grid.gameObject:SetActive(true)
        self.grid_mask.gameObject:SetActive(true)
    end)

    self.slectparent=UIUtil.FindTrans(self.transform, "Image/slectGrid");
    self:OnRefresh()
end


local function InitDataInfo(self)
    self.grid.gameObject:SetActive(false)
    self.grid_mask.gameObject:SetActive(false)
    local cmp = self.card_wrapgroup:GetComponentByIndex(self.index)
    self.Slect.gameObject:SetActive(false)
    self.slect_ani.enabled=false
    if cmp then
        self.Slect.transform:SetParent(cmp.transform:GetChild(0):Find("Iconbg"))
        self.Slect.transform.localPosition = Vector3.zero
        self.Slect.transform.localEulerAngles = Vector3.zero
        self.Slect.transform.localScale = Vector3.one
        self.Slect.gameObject:SetActive(true)
        if static_data[self.cardid].Quality>=4 then
            self.slect_ani.enabled=true
        else
            self.slect_ani:Play("FX_ui_c_selectSSR", 0, 0);
            self.slect_ani:Update(0);
            self.slect_ani.enabled=false
        end

    end
    if self.herotype  then
        --寄灵人   没有水晶
        self.typeinfo[3].btn.gameObject:SetActive(false)
        self.typeinfo[4].btn.gameObject:SetActive(false)
    else
        self.typeinfo[3].btn.gameObject:SetActive(true)
        self.typeinfo[4].btn.gameObject:SetActive(true)
    end
    --[[
   local typeNum=# self.typecontent
    for i = 1, typeNum do
        if i== self.type then
            self.typeinfo[i].img:SetSpriteName("ui_t_c2_001")
        else
            self.typeinfo[i].img:SetSpriteName("ui_t_c2_002")
        end
    end
    --]]
    --根据类型  写字体
    self.quaOrcry_text:SetText(self.typecontent[self.type].name)
    local all= #self.slectinfo
    local need = #self.slectcontent[self.type]
    if need <=0 then
        if self.slectparent.gameObject.activeInHierarchy then
            self.slectparent.gameObject:SetActive(false)
        end
        return
    else
        if not self.slectparent.gameObject.activeInHierarchy then
            self.slectparent.gameObject:SetActive(true)
        end
    end
    if need<=all then
        for i = 1, need do
            if not self.slectinfo[i].btn.gameObject.activeInHierarchy then
                self.slectinfo[i].btn.gameObject:SetActive(true)
            end
            self.slectinfo[i].text:SetText(self.slectcontent[self.type][i].name)
            if self.slectcontent[self.type][i].value == self.slect then
                self.slectinfo[i].img:SetSpriteName("ui_t_c2_001")
            else
                self.slectinfo[i].img:SetSpriteName("ui_t_c2_002")
            end
        end
        for i = need+1, all do
            if  self.slectinfo[i].btn.gameObject.activeInHierarchy then
                self.slectinfo[i].btn.gameObject:SetActive(false)
            end
        end
    else
        Logger.Log("物体不够")
    end
end
local function OnRefresh(self)
    self.herotype=self.parent.model.hero_type
    self.type=self.parent.model.card_type
    self.slect=self.parent.model.card_type_slect
    self.index=self.parent.model.select_card_index
    self.cardid= self.parent.model.select_card_id
    local length = #self.parent.model.showCardList
    if self.parent.model.refreshdata then
        self.card_wrapgroup:SetLength(length)
        self.card_wrapgroup:SetGridPositionByIndex(0)
    end

    self:InitDataInfo()

    --self.card_wrapgroup:RefreshGrid()
end
local  function OnDisable(self)
--
end
local function OnDestroy(self)
    --主界面DesTory 触发

end
UICardContainer.OnDestroy= OnDestroy
UICardContainer.OnDisable= OnDisable
UICardContainer.OnCreate = OnCreate;
UICardContainer.OnRefresh = OnRefresh;
UICardContainer.InitDataInfo = InitDataInfo
return UICardContainer