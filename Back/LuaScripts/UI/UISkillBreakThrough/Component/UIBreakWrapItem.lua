---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ljl.
--- DateTime: 2019/3/29 18:19
---

local UIBreakWrapItem=BaseClass("UIBreakWrapItem",UIWrapComponent)
local base = UIWrapComponent

local function OnCreate(self)
    base.OnCreate(self)
    --组建初始化
    self.info_AddPress=self:AddComponent(UIEventTrigger,"Image")
    self.info_AddPress:SetOnLongPress(function()
        if self.skill_data==nil then
            return
        end
        if SkillData:GetInstance().select_skills >= self.breakAllData.needExp then
            UISpecial:GetInstance():UITipText("数量已达上限！")
            return
        end
        self.item_count = self.item_count - 1
        if self.item_count > 0 then
            self.item_btn_delegate.gameObject:SetActive(true)
            self.mask.gameObject:SetActive(false)
        elseif self.item_count == 0 then
            self.mask.gameObject:SetActive(true)
        else
            UISpecial:GetInstance():UITipText("数量不足！")
            return
        end
        local count = self.skill_data.have_num
        if (count -self.item_count)*self.skill_data.exp > self.breakAllData.needExp then
            self.item_count = Mathf.Floor((count*self.skill_data.exp - self.breakAllData.needExp)/self.skill_data.exp)
            UISpecial:GetInstance():UITipText("所需已达上限！")
            return
        end
        self.item_num:SetText(self.item_count)
        self.view.SetBreakSkillData(self.view,self.skill_data.id,self.skill_data.exp,1 )
        self.view:EffectMove(self.transform.position,function()  end);
    end,nil,false,0.2)
    self.info_SubPress=self:AddComponent(UIEventTrigger,"Image/Delete_UIButton")
    self.info_SubPress:SetOnLongPress(function()
        if self.skill_data==nil then
            return
        end

        self.item_count = self.item_count + 1
        self.mask.gameObject:SetActive(false)
        self.item_num:SetText(self.item_count)
        local count = self.skill_data.have_num
        self.view.SetBreakSkillData(self.view,self.skill_data.id,-self.skill_data.exp,2 )
        if self.item_count >= count then
            self.item_btn_delegate.gameObject:SetActive(false)
            self.info_SubPress:BtnUp()
            return
        end
    end,nil,false,0.2)
    self.item_num=self:AddComponent(UIText,"Image/num")
    self.item_btn = self:AddComponent(UIButton,"Image")
    self.mask = UIUtil.FindTrans(self.transform,"Image/mask")
    self.item_quality = self:AddComponent(UIImage,"Image",AtlasConfig.DynamicTex)
    self.item_icon =self:AddComponent(UIImage,"Image/icon",AtlasConfig.DynamicTex)
    self.mask_btn = self:AddComponent(UIButton,"Image/mask")
    self.mask_btn:SetOnClick(function ()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        UISpecial:GetInstance():UITipText("数量不足！")
    end)
    self.item_btn_delegate = self:AddComponent(UIButton,"Image/Delete_UIButton")
    self.item_btn_delegate:SetOnClick(function ()
        if self.skill_data==nil then
            return
        end
        local count = self.skill_data.have_num
        if self.item_count >= count then
            return
        end
        self.item_count = self.item_count + 1
        if self.item_count >= count then
            self.item_btn_delegate.gameObject:SetActive(false)
        end
        self.mask.gameObject:SetActive(false)
        self.item_num:SetText(self.item_count)
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        self.view.SetBreakSkillData(self.view,self.skill_data.id,-self.skill_data.exp,2 )
    end)

    self.item_btn:SetOnClick(function ()
        if self.skill_data==nil then
            return
        end
        if SkillData:GetInstance().select_skills >= self.breakAllData.needExp then
            UISpecial:GetInstance():UITipText("数量已达上限！")
            return
        end
        self.item_count = self.item_count - 1

        if self.item_count > 0 then
            self.item_btn_delegate.gameObject:SetActive(true)
            self.mask.gameObject:SetActive(false)
        elseif self.item_count == 0 then
            self.mask.gameObject:SetActive(true)
        else
            UISpecial:GetInstance():UITipText("数量不足！")
            return
        end
        local count = self.skill_data.have_num
        if (count - self.item_count)*self.skill_data.exp > self.breakAllData.needExp then
            self.item_count = Mathf.Floor((count*self.skill_data.exp - self.breakAllData.needExp)/self.skill_data.exp)
            UISpecial:GetInstance():UITipText("所需已达上限！")
            return
        end
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        self.item_num:SetText(self.item_count)
        self.view.SetBreakSkillData(self.view,self.skill_data.id,self.skill_data.exp,1 )
        self.view:EffectMove(self.transform.position,function() end);

    end)


end

-- 组件被复用时回调该函数，执行组件的刷新
local function OnRefresh(self,real_index)
    self.item_count=0
    self.breakAllData = self.view.breakData
    self.skill_data=self.breakAllData.itemList[real_index+1]
    if self.skill_data == nil then
        return
    end
    if self.view.selectDic[self.skill_data.id]==nil then
        self.item_count = self.skill_data.have_num
    else
        self.item_count = self.skill_data.have_num-self.view.selectDic[self.skill_data.id]
    end

    local allItemData = DataUtil.GetData("item")
    self.item_quality:SetSpriteName(SpriteDefine:GetItemQualityFrameByType(allItemData[self.skill_data.id].Quality))
    self.item_icon:SetSpriteName(allItemData[self.skill_data.id].Icon)
    self.item_num:SetText(self.item_count)
    self.item_btn_delegate.gameObject:SetActive(self.skill_data.is_show_del)
    self.mask.gameObject:SetActive(self.item_count <= 0)
    if self.item_count<self.skill_data.have_num then
        self.item_btn_delegate.gameObject:SetActive(true)
    else
        self.item_btn_delegate.gameObject:SetActive(false)
    end
end

UIBreakWrapItem.OnCreate = OnCreate
UIBreakWrapItem.OnRefresh=OnRefresh

return UIBreakWrapItem