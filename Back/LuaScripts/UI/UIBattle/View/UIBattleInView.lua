---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2018/11/16 11:48
---
local UIBattleInView = BaseClass("UIBattleInView", UIBaseView)
local base = UIBaseView
local UIBattleSkillTip = require "UI.UIBattle.Component.UIBattleSkillTip"
local UIBattleHeroBuffList = require "UI.UIBattle.Component.UIBattleHeroBuffList"
local BattleEnemyRoleInfo = require "UI.UIBattle.Component.BattleEnemyRoleInfo"
local UIBattleDialogTip = require "UI.UIBattle.Component.UIBattleDialogTip"
local skill_burst_effect = "Effect/Prefab/UI/ef_ui_fight_skillbutton_burst.prefab"
local BattleFieldManager=require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
local BattleAssistFunction= require "GameLogic.BattleNew.BattleAssistFunction"
--提示释放技能箭头
local BattleJianTouTip = "UI/Prefabs/Other/BattleJianTouTip.prefab"
-- 更新技能箭头提示
local function UpdateJianTouTip(self)
    if self.tipGroup == nil then
        self.tipGroup = {{},{},{}}
        self.tipState = {{},{},{}}
    end
    local curLevel = MapData:GetInstance():GetCurSelectLevelId();
    -- 强引导，战斗类型，关卡限制，自动战斗，自己的回合，按钮已经弹出--GuideGroup:GetInstance().Runing or 
    if BattleFieldManager:GetInstance().battleType ~= BattleEnum.BattleType.NORMAL or curLevel > 10103 or self.auto_battle == 1 or self.ui_show_type ~= 1 or self.mask_game.activeInHierarchy or self.isPlayingEnterGameAnim then
        for i = 1, 3 do
            for m = 1, 3 do
                self.tipState[i][m] = false
                if self.tipGroup[i][m] ~= nil then
                    GameObjectPool:GetInstance():RecycleGameObject(BattleJianTouTip,self.tipGroup[i][m])
                    self.tipGroup[i][m] = nil
                end
            end
        end
        return
    end
    for i = 1, 3 do
        local showSkillTip = false
        for m = 1, 2 do
            if not self.ctrlSkills[i].dead and self.ctrlSkills[i].skill[m].showTip and not self.ctrlSkills[i].skill[m].selectGame.activeInHierarchy then
                showSkillTip = true
                if self.tipGroup[i][m] == nil and not self.tipState[i][m] then
                    self.tipState[i][m] = true
                    GameObjectPool:GetInstance():GetGameObjectAsync(BattleJianTouTip,function(go)
                        if not IsNull(go) then
                            if not self.tipState[i][m] then
                                GameObjectPool:GetInstance():RecycleGameObject(BattleJianTouTip,go)
                                return
                            end
                            local pos = self.ctrlSkills[i].skill[m].gameObject.transform.position
                            self.tipGroup[i][m] = go
                            go.transform:SetParent(self.transform)
                            go.transform.position = pos
                            go.transform.localPosition = Vector3.New(go.transform.localPosition.x, go.transform.localPosition.y + 80, 0);
                            go.transform.localScale = Vector3.New(1,1,1)
                        end
                    end)
                end
            else
                self.tipState[i][m] = false
                if self.tipGroup[i][m] ~= nil then
                    GameObjectPool:GetInstance():RecycleGameObject(BattleJianTouTip,self.tipGroup[i][m])
                    self.tipGroup[i][m] = nil
                end
            end
        end
        if not self.ctrlSkills[i].dead and (self.ctrlSkills[i].skill_name_effect_game.activeInHierarchy or (self.ctrlSkills[i].skill_call_effect_game.activeInHierarchy and not showSkillTip)) then
            if self.tipGroup[i][3] == nil and not self.tipState[i][3] then
                self.tipState[i][3] = true
                GameObjectPool:GetInstance():GetGameObjectAsync(BattleJianTouTip,function(go)
                    if not IsNull(go) then
                        if not self.tipState[i][3] then
                            GameObjectPool:GetInstance():RecycleGameObject(BattleJianTouTip,go)
                            return
                        end
                        local pos = self.ctrlSkills[i].skill_name_effect_game.transform.position
                        self.tipGroup[i][3] = go
                        go.transform:SetParent(self.transform)
                        go.transform.position = pos
                        go.transform.localPosition = Vector3.New(go.transform.localPosition.x, go.transform.localPosition.y + 100, 0);
                        go.transform.localScale = Vector3.New(1,1,1)
                    end
                end)
            end
        else
            self.tipState[i][3] = false
            if self.tipGroup[i][3] ~= nil then
                GameObjectPool:GetInstance():RecycleGameObject(BattleJianTouTip,self.tipGroup[i][3])
                self.tipGroup[i][3] = nil
            end
        end
    end
end
-- 更新头顶对话框提示
local function ShowDialogTip(self, dialogType)
    self.dialog_tip:OnRefresh(dialogType)
end
-- 更新脚下的箭头提示
local function UpdateBattleArrowTip(self)
    self.dialog_tip:ShowHeroDirectionTip()
end
-- 更新释放召唤和绝技状态
local function ShowPowerTip(self)
    local transPos = {1, 0, 2}
    for i = 1, 3 do
        if self.ui_show_type == 1 and not self.ctrlSkills[i].dead and (self.ctrlSkills[i].skill_name_effect_game.activeInHierarchy or self.ctrlSkills[i].skill_call_effect_game.activeInHierarchy) then
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_HERO_POWER_TIP, 1, transPos[i], true)
        else
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_HERO_POWER_TIP, 1, transPos[i], false)
        end
        -- 是否使用了绝技和召唤
        if self.ui_show_type == 1 and not self.ctrlSkills[i].dead and self.initData.hero[i] ~= nil then
            --判断是否使用了召唤
            local isCall = false
            for j = 1, 4 do
                if self.slect_skill[j]~=nil and self.slect_skill[j] == i and self.showSkills[j].gameObject.activeInHierarchy and self.showSkills[j].skillIcon:GetSpriteName() == self.initData.hero[i].icon then
                    isCall = true
                    break
                end
            end
            if isCall or self.ctrlSkills[i].selectHero or (self.ctrlSkills[i].skill[3] ~= nil and self.ctrlSkills[i].skill[3].select) then
                UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_HERO_POWER_TIP, 2, transPos[i], true)
            else
                UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_HERO_POWER_TIP, 2, transPos[i], false)
            end
        else
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_HERO_POWER_TIP, 2, transPos[i], false)
        end
    end
end


--获取某个英雄在这个位置没 喝死了没
local function GetHeroDeaStatus(self, heroPos,id)
    if self.initData.hero[ heroPos] then
        if self.initData.hero[ heroPos].type==1 and self.initData.hero[ heroPos].id== id and self.initData.hero[heroPos].skill[3].costType==2 then
            return not self.ctrlSkills[heroPos].dead
        end
    end
    return false
end
--10110 检测中间是曹艳冰
local function GetHeroGuideByID(self,hero_pos,id)
    if self.initData.hero[hero_pos].type==1 and self.initData.hero[hero_pos].id== id then
        if self.initData.hero[hero_pos].skill[3].costType==1 then
            return true
        end
    end
    return false
end
--守护灵死过的次数 2  1  3
local function GetHeroSHLStatus(self,hero_pos)
    return self.model.guideDeadNum[hero_pos]<=0
end
-- 获取某个位置英雄大招是否能够释放（新手引导用）
local function IsCanUseSkill3(self, heroPos)
    if not self.ctrlSkills[heroPos].dead and self.ctrlSkills[heroPos].skill_call_effect_game.activeInHierarchy then
        return true
    end
    return false
end

--判断位置技能
local function JudgePosSkill(self,first_hero,first_skill,pos)
    local first_skill_id=self.initData.hero[first_hero].skill[first_skill].id
    return self.slect_skill[pos]==first_skill_id
end
--判断技能先后顺序
local function JudegSkillSort(self,first_hero,first_skill,last_hero,last_skill)
    if not self:IsUsedSkill(first_hero,first_skill) then
        return false
    end
    if not self:IsUsedSkill(last_hero,last_skill) then
        return false
    end
    local first_skill_id=self.initData.hero[first_hero].skill[first_skill].id
    local last_skill_id=self.initData.hero[last_hero].skill[last_skill].id
    local first_index=0
    local last_index=0
    for i, v in ipairs(self.slect_skill) do
        first_index= v==first_skill_id and i or first_index
        last_index= v==last_skill_id and i or last_index
    end
    if first_index<last_index then
        return true
    end
    return false
end
-- 判断某个位置英雄的某个技能是否使用了（新手引导用）
local function IsUsedSkill(self, heroPos, skillPos)
    if not self.ctrlSkills[heroPos].dead and not self.ctrlSkills[heroPos].skill[skillPos].isNull then
        return self.ctrlSkills[heroPos].skill[skillPos].select
    end
    return false
end

local function PlaySkillReadyEffect(self,comp)
    GameObjectPool:GetInstance():GetGameObjectAsync(skill_burst_effect,function(go)
        if not IsNull(go) then
            self.team_tip_game = go
            local inst_trans = go.transform
            inst_trans:SetParent(self.transform)
            inst_trans.localScale = Vector3.New(1,1,1)
            inst_trans.position = comp.transform.position
            TimerManager:GetInstance():SimpleTimerArgs(0.6,function()
                if not IsNull(go) then
                    GameObjectPool:GetInstance():RecycleGameObject(skill_burst_effect,go)
                end
            end,nil,true)
        end
    end)
end


local function PlayerEnterAnim(self,type)
    self.isPlayingEnterGameAnim = true
    if type == 1 then
        local index = 0;
        for i, v in ipairs(self.enter_anim_game) do
            if  GuideManager:GetInstance():CheckRunning() and  GuideManager:GetInstance():GetGuideGroup() < 8 and v.transform.name=="BackBtn"   then
                v.transform.gameObject:SetActive(false)
            elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.PVP and v.transform.name=="BackBtn" then
                v.transform.gameObject:SetActive(false)
            elseif GuideWeakCheckManager:GetInstance():CheckLevelIsGuide(self.battle_fightId) and v.transform.name=="BackBtn" then
                v.transform.gameObject:SetActive(false)
            else
                if i < 7 then
                    v.transform.gameObject:SetActive(true)
                end
            end
            v.transform.position = v.p2
            if v.tweener ~= nil then
                LuaTweener.StopTweener(v.tweener)
                v.tweener = nil
            end
            v.tweener = LuaTweener.TransMoveTo(v.transform,v.p2,v.p1,0.67,EaseFormula.InOutQuad,function()
                v.tweener = nil
                index = index+1
                if index == #self.enter_anim_game then
                    self.isPlayingEnterGameAnim = false
                    --[[
                    if GuideGroup:GetInstance().Runing or GuideWeakGroup:GetInstance().Runing  then
                        print("----动画完成DataMessageNames.UI_Guide_NeedEvent")
                        DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_NeedEvent)
                    end
                    --]]
                end
            end)
        end
        return 0.4
    elseif type == 2 then
        if not GuideGroup:GetInstance().Runing and not GuideWeakGroup:GetInstance().Runing then
            UIUtil.SetChatImgStatus(false)
            UIManager:GetInstance():CloseWindow(UIWindowNames.UIChat)
        end
        for i, v in ipairs(self.enter_anim_game) do
            if i ~= 1 then
                v.transform.position = v.p1
                --if GuideGroup:GetInstance().Runing and v.transform.name=="BackBtn" then
                --    v.transform.gameObject:SetActive(false)
                --else
                --    v.transform.gameObject:SetActive(true)
                --end
                if v.tweener ~= nil then
                    LuaTweener.StopTweener(v.tweener)
                    v.tweener = nil
                end
                v.tweener =  LuaTweener.TransMoveTo(v.transform,v.p1,v.p2,0.3,EaseFormula.Linear,function()
                    v.tweener = nil
                    --播放完隐藏UI
                    --if self.model.ui_show_type == 2 then
                    --    UIManager:GetInstance():CloseWindow(UIWindowNames.UIBattleIn)
                    --end
                end)
            end
        end
        return 0.3
    end
end

local function OnRefresh(self,play_effect)
    --更新资源数量
    for i = 1, 3 do
        if self.resource[i] >= 0 then
            self.friendResShow[i].text:SetText(math.floor(self.resource[i]))
        else
            self.friendResShow[i].text:SetText("0")
        end
        --if self.enemy_resource[i] >= 0 then
        --    self.enemyResShow[i].text:SetText(math.floor(self.enemy_resource[i]))
        --else
        --    self.enemyResShow[i].text:SetText("0")
        --end

    end
    if self.enemyInfoComp ~= nil then
        self.enemyInfoComp:UpdateCry(self.enemy_resource)
    end
    if self.ui_show_type ~= 1 then
        return
    end

    for i = 1, 3 do
        if  self.initData.hero[i] ~= nil then
            if self.ctrlSkills[i].dead == false then
                for m = 1, 2 do
                    if not self.ctrlSkills[i].skill[m].isNull then
                        local tempSkill = self.ctrlSkills[i].skill[m]
                        tempSkill.showTip = false
                        --if self.ctrlSkills[i].selectHero then
                        --    if tempSkill.select == false then
                        --        tempSkill.icon:SetMat(self.grayMat)
                        --        if self.initData.hero[i].type == 1 and m==3 then
                        --            tempSkill.skillFrame:SetMat(self.grayMat)
                        --        end
                        --    end
                        --else
                        if tempSkill.lock then
                            tempSkill.mask_game:SetActive(false)
                            tempSkill.forbid_game:SetActive(false)
                            tempSkill.icon:SetMat(self.grayMat)
                            if self.initData.hero[i].type == 1 and m==3 then
                                tempSkill.skillFrame:SetMat(self.grayMat)
                            end
                        elseif tempSkill.skillType == 2 then
                            tempSkill.mask_game:SetActive(false)
                            tempSkill.forbid_game:SetActive(false)
                            tempSkill.icon:SetMat(nil)
                        elseif tempSkill.cd > 0 then
                            tempSkill.icon:SetMat(nil)
                            tempSkill.skillFrame:SetMat(nil)
                            tempSkill.mask_game:SetActive(true)
                            local maxCd = self.initData.hero[i].skill[m].maxCd
                            if maxCd == 0 or maxCd == tempSkill.cd then
                                tempSkill.mask_img:SetFillVal(0.95)
                            else
                                tempSkill.mask_img:SetFillVal(tempSkill.cd/maxCd)
                            end
                            tempSkill.forbid_game:SetActive(false)
                        elseif self.ctrlSkills[i].state == 1 or self.ctrlSkills[i].state == 2 then
                            tempSkill.mask_game:SetActive(false)
                            tempSkill.forbid_game:SetActive(true)
                            tempSkill.icon:SetMat(nil)
                            tempSkill.skillFrame:SetMat(nil)
                        else
                            if self.resource[tempSkill.costType] ~= nil then
                                tempSkill.mask_game:SetActive(false)
                                tempSkill.forbid_game:SetActive(false)
                                if tempSkill.needNum <= self.resource[tempSkill.costType] then
                                    tempSkill.icon:SetMat(nil)
                                    tempSkill.skillFrame:SetMat(nil)
                                    tempSkill.readyGame:SetActive(true)
                                    if play_effect then
                                        PlaySkillReadyEffect(self,tempSkill.icon)
                                    end
                                    if self.initData.hero[i].skill[m].extralCryType > 0 and self.initData.hero[i].skill[m].extralCryNum > 0 then
                                        tempSkill.showTip = true
                                    end
                                else
                                    tempSkill.readyGame:SetActive(false)
                                    if tempSkill.select == false  then
                                        tempSkill.icon:SetMat(self.grayMat)
                                        if self.initData.hero[i].type == 1 and m==3 then
                                            tempSkill.skillFrame:SetMat(self.grayMat)
                                        end
                                    else
                                        tempSkill.skillFrame:SetMat(nil)
                                        tempSkill.icon:SetMat(nil)
                                    end
                                end
                            else
                                tempSkill.mask_game:SetActive(false)
                                tempSkill.forbid_game:SetActive(false)
                                tempSkill.icon:SetMat(nil)
                                if tempSkill.skillType ~= 2 then
                                    tempSkill.readyGame:SetActive(true)
                                    if play_effect then
                                        PlaySkillReadyEffect(self,tempSkill.icon)
                                    end
                                end
                            end
                        end

                        --end
                    end

                end
                --检测4技能
                if self.initData.hero[i].skill[3] ~= nil then
                    if self.ctrlSkills[i].state ==1
                            or (self.initData.hero[i].skill[3].skillType > 0 and self.ctrlSkills[i].state == 2)
                            or (self.initData.hero[i].skill[3].skillType == 0 and self.ctrlSkills[i].state == 3) then
                        self.ctrlSkills[i].skill_name_game:SetActive(false)
                        self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                        self.ctrlSkills[i].skill_call_game:SetActive(false)
                        self.ctrlSkills[i].skill_call_effect_game:SetActive(false)
                        self.ctrlSkills[i].hero_forbid:SetActive(true)
                        self.ctrlSkills[i].mask_img.gameObject:SetActive(false)
                    elseif self.ctrlSkills[i].cd > 0 then
                        self.ctrlSkills[i].skill_name_game:SetActive(false)
                        self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                        self.ctrlSkills[i].skill_call_game:SetActive(false)
                        self.ctrlSkills[i].skill_call_effect_game:SetActive(false)
                        self.ctrlSkills[i].mask_img.gameObject:SetActive(true)
                        local maxCd = self.initData.hero[i].skill[3].maxCd
                        if maxCd == 0 or maxCd == self.ctrlSkills[i].cd then
                            self.ctrlSkills[i].mask_img:SetFillVal(0.95)
                        else
                            self.ctrlSkills[i].mask_img:SetFillVal(self.ctrlSkills[i].cd/maxCd)
                        end
                    else
                        self.ctrlSkills[i].mask_img.gameObject:SetActive(false)
                        self.ctrlSkills[i].hero_forbid:SetActive(false)
                        if self.resource[self.ctrlSkills[i].costType] ~= nil then
                            if self.ctrlSkills[i].needNum <= self.resource[self.ctrlSkills[i].costType] then
                                self.ctrlSkills[i].crysta_mask_icon:SetFillVal(0)
                                if self.initData.hero[i].skill[3].skillType > 0 then
                                    self.ctrlSkills[i].skill_call_game:SetActive(false)
                                    self.ctrlSkills[i].skill_call_effect_game:SetActive(false)
                                    if not self.ctrlSkills[i].selectHero and not self.ctrlSkills[i].lock then
                                        self.ctrlSkills[i].skill_name_game:SetActive(true)
                                        self.ctrlSkills[i].skill_name_effect_game:SetActive(true)
                                    else
                                        self.ctrlSkills[i].skill_name_game:SetActive(false)
                                        self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                                    end
                                else
                                    self.ctrlSkills[i].skill_name_game:SetActive(false)
                                    self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                                    self.ctrlSkills[i].skill_call_game:SetActive(true)
                                    self.ctrlSkills[i].skill_call_effect_game:SetActive(true)
                                end

                            else
                                self.ctrlSkills[i].skill_name_game:SetActive(false)
                                self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                                self.ctrlSkills[i].skill_call_game:SetActive(false)
                                self.ctrlSkills[i].skill_call_effect_game:SetActive(false)
                                self.ctrlSkills[i].crysta_mask_icon:SetFillVal(1-self.resource[self.ctrlSkills[i].costType]/self.ctrlSkills[i].needNum)
                            end
                        else
                            if self.initData.hero[i].skill[3].skillType > 0 then
                                self.ctrlSkills[i].skill_call_game:SetActive(false)
                                self.ctrlSkills[i].skill_call_effect_game:SetActive(false)
                                if not self.ctrlSkills[i].selectHero and not self.ctrlSkills[i].lock then
                                    self.ctrlSkills[i].skill_name_game:SetActive(true)
                                    self.ctrlSkills[i].skill_name_effect_game:SetActive(true)
                                else
                                    self.ctrlSkills[i].skill_name_game:SetActive(false)
                                    self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                                end
                            else
                                self.ctrlSkills[i].skill_name_game:SetActive(false)
                                self.ctrlSkills[i].skill_name_effect_game:SetActive(false)
                                self.ctrlSkills[i].skill_call_game:SetActive(true)
                                self.ctrlSkills[i].skill_call_effect_game:SetActive(true)
                            end
                            self.ctrlSkills[i].crysta_mask_icon:SetFillVal(0)
                        end
                    end
                else
                    self.ctrlSkills[i].mask_img.gameObject:SetActive(false)
                end

        end

        end

    end


    if self.select_skill_num > 0 then
        self.start_btn.gameObject:SetActive(true)
        self.ready_btn.gameObject:SetActive(false)
        self.skillCardPanel:SetActive(true)
    else
        self.start_btn.gameObject:SetActive(false)
        self.ready_btn.gameObject:SetActive(true)
        self.skillCardPanel:SetActive(false)
    end
    UpdateJianTouTip(self)
    ShowDialogTip(self, 1)
end

local function GetSpriteNameByCostType(type)
    if type == 1 then
        return "ui_t_Battle_038"
    elseif type == 2 then
        return "ui_t_Battle_037"
    elseif type == 3 then
        return "ui_t_Battle_039"
    else
        return "ui_t_Battle_021"
    end
end

local function GetCrystalSpriteNameByCostType(type)
    if type == 1 then
        return "ui_dtex_Quality_032"
    elseif type == 2 then
        return "ui_dtex_Quality_033"
    elseif type == 3 then
        return "ui_dtex_Quality_034"
    else
        return "ui_dtex_Quality_032"
    end
end


--更新一个英雄的数据
local function UpdateHeroByIndex(self,index,skill_lock)
    local tempHero = self.initData.hero[index]
    if tempHero.skill[3] ~= nil then
        self.ctrlSkills[index].crystal_game:SetActive(true)
        self.ctrlSkills[index].crystal_bg:SetSpriteName(GetCrystalSpriteNameByCostType(tempHero.skill[3].costType))
        self.ctrlSkills[index].crystal_num:SetText("-"..math.floor(tempHero.skill[3].cost))
        self.ctrlSkills[index].needNum = tempHero.skill[3].cost
        self.ctrlSkills[index].costType = tempHero.skill[3].costType
        self.ctrlSkills[index].cd = tempHero.skill[3].cd
        self.ctrlSkills[index].skill_extral_cry.gameObject:SetActive(false)
        if skill_lock ~= nil and tempHero.type == 2 then
            self.ctrlSkills[index].lock = skill_lock
        else
            self.ctrlSkills[index].lock = false
        end
    else
        self.ctrlSkills[index].crystal_game:SetActive(false)
        self.ctrlSkills[index].skill_extral_cry.gameObject:SetActive(false)
    end
    self.ctrlSkills[index].hero_select:SetActive(false)
    self.ctrlSkills[index].bg_icon:SetSpriteName(GetSpriteNameByCostType(tempHero.costType))
    self.ctrlSkills[index].hero_icon:SetSpriteName(tempHero.bigIcon)
    self.ctrlSkills[index].gameObject:SetActive(true)
    self.ctrlSkills[index].call = tempHero.call
    self.ctrlSkills[index].selectHero = false
    self.ctrlSkills[index].state = tempHero.state
    if tempHero.hp <= 0 then
        self.ctrlSkills[index].dead = true
        self.ctrlSkills[index].hero_icon:SetMat(self.grayMat)
        self.ctrlSkills[index].hero_forbid:SetActive(false)
        self.ctrlSkills[index].skill_name_game:SetActive(false)
        self.ctrlSkills[index].skill_name_effect_game:SetActive(false)
        self.ctrlSkills[index].skill_call_game:SetActive(false)
        self.ctrlSkills[index].skill_call_effect_game:SetActive(false)
        self.ctrlSkills[index].mask_img.gameObject:SetActive(false)
        for m = 1, 2 do
            local showSkill = self.ctrlSkills[index].skill[m]
            showSkill.selectGame:SetActive( false)
            showSkill.readyGame:SetActive(false)
            if tempHero.skill[m] ~= nil then
                showSkill.isNull = false
                showSkill.mask_game:SetActive(false)
                showSkill.forbid_game:SetActive(false)
                showSkill.needNum = tempHero.skill[m].cost
                showSkill.costType = tempHero.skill[m].costType
                showSkill.skillType = tempHero.skill[m].skillType
                showSkill.icon:SetSpriteName(tempHero.skill[m].icon)
                showSkill.gameObject:SetActive(true)
                showSkill.bgGame:SetActive(false)
                showSkill.select = false
                showSkill.icon:SetMat(self.grayMat)
                showSkill.emptyGame:SetActive(false)
                showSkill.btn.gameObject:SetActive(true)
                if showSkill.skillType == 2 then
                    showSkill.passiveGame:SetActive(true)
                    showSkill.skillFrame.gameObject:SetActive(false)
                else
                    showSkill.skillFrame.gameObject:SetActive(true)
                    showSkill.skillFrame:SetSpriteName("ui_t_Battle_048")
                    showSkill.passiveGame:SetActive(false)
                end
                BattleAssistFunction.SetSkillCryText(showSkill.skill_extral_cry,showSkill.skill_extral_cry_img,showSkill.skill_extral_cry_text,tempHero.skill[m].extralCryType,tempHero.skill[m].extralCryNum )
            else
                BattleAssistFunction.SetSkillCryText(showSkill.skill_extral_cry,showSkill.skill_extral_cry_img,showSkill.skill_extral_cry_text,0,0)
                showSkill.isNull = true
                showSkill.passiveGame:SetActive(false)
                showSkill.skillFrame.gameObject:SetActive(true)
                showSkill.skillFrame:SetSpriteName("ui_t_Battle_048")
                showSkill.bgGame:SetActive(true)
                showSkill.emptyGame:SetActive(true)
                showSkill.btn.gameObject:SetActive(false)
            end
        end
    else
        self.ctrlSkills[index].dead = false
        self.ctrlSkills[index].hero_icon:SetMat(nil)
        for m = 1, 2 do
            local showSkill = self.ctrlSkills[index].skill[m]
            showSkill.selectGame:SetActive( false)
            showSkill.readyGame:SetActive(false)
            if tempHero.skill[m] ~= nil then
                showSkill.isNull = false
                showSkill.needNum = tempHero.skill[m].cost
                showSkill.costType = tempHero.skill[m].costType
                showSkill.skillType = tempHero.skill[m].skillType
                showSkill.icon:SetSpriteName(tempHero.skill[m].icon)
                showSkill.cd = tempHero.skill[m].cd
                showSkill.gameObject:SetActive(true)
                showSkill.bgGame:SetActive(false)
                showSkill.select = false
                if skill_lock ~= nil and tempHero.type == 2 then
                    showSkill.lock = skill_lock
                else
                    showSkill.lock = false
                end
                showSkill.emptyGame:SetActive(false)
                showSkill.btn.gameObject:SetActive(true)
                if showSkill.skillType == 2 then
                    showSkill.passiveGame:SetActive(true)
                    showSkill.skillFrame.gameObject:SetActive(false)
                else
                    showSkill.skillFrame.gameObject:SetActive(true)
                    showSkill.skillFrame:SetSpriteName("ui_t_Battle_048")
                    showSkill.passiveGame:SetActive(false)
                end
                BattleAssistFunction.SetSkillCryText(showSkill.skill_extral_cry,showSkill.skill_extral_cry_img,showSkill.skill_extral_cry_text,tempHero.skill[m].extralCryType,tempHero.skill[m].extralCryNum )
            else
                BattleAssistFunction.SetSkillCryText(showSkill.skill_extral_cry,showSkill.skill_extral_cry_img,showSkill.skill_extral_cry_text,0,0)
                showSkill.isNull = true
                showSkill.passiveGame:SetActive(false)
                showSkill.skillFrame.gameObject:SetActive(true)
                showSkill.skillFrame:SetSpriteName("ui_t_Battle_048")
                showSkill.bgGame:SetActive(true)
                showSkill.emptyGame:SetActive(true)
                showSkill.btn.gameObject:SetActive(false)
            end
        end
    end
end

local function SelectSkillRightShow(self,index,hero_icon,skill_icon,is_select,skill_id,heroIndex)
    if is_select then
        if  GuideWeakGroup:GetInstance().Runing and self.round==1 and index==1 then
            self.skill_fun=false
            self.head_fun=false
        end
        self.showSkills[index].gameObject:SetActive(true)
        self.showSkills[index].emptyGame:SetActive(false)
        self.showSkills[index].skillIcon:SetSpriteName(skill_icon,nil,nil,function ()
            if  GuideWeakGroup:GetInstance().Runing and self.round==1 and index==1 then
                self.skill_fun=true
                if self.head_fun then
                    DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_Skill_Add_CryEvent)
                end
            end
        end)
        self.showSkills[index].heroIcon:SetSpriteName(hero_icon,nil,nil,function ()
            if  GuideWeakGroup:GetInstance().Runing and self.round==1 and index==1 then
                self.head_fun=true
                if self.skill_fun then
                    DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_Skill_Add_CryEvent)
                end
            end
        end)
        self.slect_skill[index]=skill_id
        if skill_id == 0 then
            self.slect_skill[index]=heroIndex
        end
    else
        self.showSkills[index].gameObject:SetActive(false)
        self.showSkills[index].emptyGame:SetActive(true)
        self.slect_skill[index]=nil
    end

end

local function SelectSkillCallBack(self,hero_id,skill_id,is_call,state)
    if not is_call then
        local hero_skill = false
        for i = 1, 3 do
            if self.initData.hero[i] ~= nil and self.initData.hero[i].id == hero_id then
                if self.initData.hero[i].skill[3] ~= nil and self.initData.hero[i].skill[3].id == skill_id  then
                    self.ctrlSkills[i].selectHero = state >= 0
                    self.ctrlSkills[i].hero_select:SetActive(self.ctrlSkills[i].selectHero)
                    hero_skill = true
                end
                break
            end
        end
        if not hero_skill then
            for i = 1, 3 do
                if self.initData.hero[i] ~= nil and self.initData.hero[i].id == hero_id then
                    for m = 1, 3 do
                        if self.initData.hero[i].skill[m] ~= nil and self.initData.hero[i].skill[m].id == skill_id then
                            local selectSkill =  self.ctrlSkills[i].skill[m]
                            selectSkill.select = state >= 0
                            selectSkill.selectGame:SetActive(selectSkill.select)
                            selectSkill.readyGame:SetActive(not selectSkill.select)
                            break
                        end
                    end
                    break
                end
            end
        end

    end
    if state >= 0 then
        --self.select_skill_num = self.select_skill_num+state
        --选择技能加水晶在播放完动效后再刷新
    else
        SelectSkillRightShow(self,self.select_skill_num,nil,nil,false)
        self.select_skill_num = self.select_skill_num+state
        OnRefresh(self)
        ShowPowerTip(self)
    end
end

--[[local function CrystalChangeNoAnim(self,data)
    if data ~= nil then
        for i = 1, 3 do
            self.resource[i] = self.resource[i]+data[1][i]
            self.enemy_resource[i] = self.enemy_resource[i]+data[2][i]
        end
    end
end]]

local function CreateCrystalText(self,comp,str,val,cry_type,isAdd)
    if not comp.gameObject.activeInHierarchy then
        Logger.Log("图标未显示 不播放")
        return
    end
    local oldPos = comp.transform.position
    local new_game = CS.UnityEngine.GameObject.Instantiate( self.skill_tip_anim)
    new_game.transform:SetParent(self.transform)
    new_game.transform.localScale = Vector3.New(1,1,1)
    new_game:SetActive(true)
    local newPos = oldPos+Vector3.New(0,val,0)
    UIUtil.FindText(UIUtil.GetChild(new_game.transform,1).transform).text = str
    UIUtil.FindText(UIUtil.GetChild(new_game.transform,2).transform).text = str
    if cry_type == nil then
        UIUtil.GetChild(new_game.transform,0).gameObject:SetActive(false)
        UIUtil.GetChild(new_game.transform,1).gameObject:SetActive(false)
        UIUtil.GetChild(new_game.transform,2).gameObject:SetActive(true)
    else
        new_game.name="add_cry"
        UIUtil.GetChild(new_game.transform,0).gameObject:SetActive(true)
        UIUtil.GetChild(new_game.transform,1).gameObject:SetActive(true)
        UIUtil.GetChild(new_game.transform,2).gameObject:SetActive(false)
        UIUtil.CommonLoadImg(UIUtil.GetChild(new_game.transform,0),AtlasConfig.DynamicTex,GetCrystalSpriteNameByCostType(cry_type))
    end
    local endPos = self.friendResShow[2].text.transform.position
    if cry_type ~= nil then
        endPos = self.friendResShow[cry_type].text.transform.position
    end
    local time = 0.1
    --LJAudioManger:GetInstance():PlayVoice("UI_Crystal")
    LuaTweener.TransMoveTo(new_game.transform,oldPos,newPos,time,EaseFormula.OutQuad,function()
        if not IsNull(new_game) then
            UIUtil.FindText(UIUtil.GetChild(new_game.transform,1).transform).text = ""
            if isAdd then
                LuaTweener.TransMoveTo(new_game.transform, newPos, endPos, 0.1, EaseFormula.OutQuad, function ()
                    if not IsNull(new_game) then
                        CS.UnityEngine.GameObject.Destroy(new_game)
                    end
                end)
            else
                CS.UnityEngine.GameObject.Destroy(new_game)
            end
        end
    end)
end

local function CrystalChange(self,temp_data)
    local cry_type = temp_data[3]
    local success = temp_data[4]
    local play_type = 0
    --local tip_str = ""
    if cry_type == 3001 and success == 1 then --获取水晶
        play_type = 1
       -- tip_str = "<color=#72d54f>获得水晶成功</color>"
    elseif cry_type == 3002 then --消减水晶
        if success == 1 then
            play_type = 2
           -- tip_str = "<color=#72d54f>获得水晶成功</color>"
        else
            play_type = 3
           -- tip_str = "<color=#cbcccb>获得水晶失败</color>"
        end
    elseif cry_type == 3003 then --偷取水晶
        if success == 1 then
            play_type = 4
            --tip_str =  "<color=#72d54f>减少敌方水晶成功</color>"
        else
            play_type = 5
            --tip_str =  "<color=#cbcccb>减少敌方水晶失败</color>"
        end
    end
--[[    if self.cur_select_skill ~= nil then
        CreateCrystalText(self,self.ctrlSkills[self.cur_select_skill[1]]--[[.skill[self.cur_select_skill[2]]--[[.icon,tip_str,50)
    end]]

    local enemy_data = temp_data[2]
    if enemy_data ~= nil then
        if enemy_data.reduce ~= nil then
            for i, v in pairs(enemy_data.reduce) do
                self.enemy_resource[i] = self.enemy_resource[i]-v
            end
        end
        if enemy_data.add ~= nil then
            --local play_red_game = {}
            for i, v in pairs(enemy_data.add) do
                self.enemy_resource[i] = self.enemy_resource[i]+v
                --if v < 0 then
                --    if play_type == 2 or play_type == 4 then
                --        play_red_game[i] = v
                --    end
                --end
            end
            --TimerManager:GetInstance():SimpleTimerArgs(0.5,function()
            --    for i, v in pairs(play_red_game) do
            --        if v < 0 then
            --            CreateCrystalText(self,self.enemyResShow[i].text,"<color=#ec6b60>"..math.floor(v).."</color>",-50)
            --        else
            --            CreateCrystalText(self,self.enemyResShow[i].text,"<color=#72d54f>+"..math.floor(v).."</color>",-50)
            --        end
            --        self.enemyResShow[i].red_cry:SetActive(true)
            --    end
            --    TimerManager:GetInstance():SimpleTimerArgs(0.5,function()
            --        for i, v in pairs(play_red_game) do
            --            self.enemyResShow[i].red_cry:SetActive(false)
            --        end
            --    end,nil,true)
            --end,nil,true)

        end
    end

    local mine_data = temp_data[1]
    if mine_data ~= nil then
        local play_add_game = {}
        if mine_data.reduce ~= nil then
            for i, v in pairs(mine_data.reduce) do
                self.resource[i] = self.resource[i]-v
                if v > 0 then
                    play_add_game[i] = -v
                end
            end
        end

        --播放水晶增加动画
        local interval_time = 0
        if mine_data.add ~= nil then
            interval_time = 0.5
            for i, v in pairs(mine_data.add) do
                self.resource[i] =  self.resource[i]+v
                if self.ui_show_type == 1 then
                    if play_type == 1 or play_type == 4 then
                        play_add_game[i] = v
                    end
                    if v >= 0 then
                        if self.cur_select_skill ~= nil then
                            if self.cur_select_skill[2] ~= 3 then
                                CreateCrystalText(self,self.ctrlSkills[self.cur_select_skill[1]].skill[self.cur_select_skill[2]].icon,"X"..math.floor(v),50,i,true)
                            else
                                CreateCrystalText(self,self.ctrlSkills[self.cur_select_skill[1]].hero_icon,"X"..math.floor(v),50,i,true)
                            end

                        end
                    end
                end
            end
        end
        if self.ui_show_type == 1 then
            self.isCrystarMoving = true
            TimerManager:GetInstance():SimpleTimerArgs(interval_time,function()
                LJAudioManger:GetInstance():PlayVoice("UI_Crystal")
                for i, v in pairs(play_add_game) do
                    if v > 0 then
                        CreateCrystalText(self,self.friendResShow[i].text,"<color=#72d54f>+"..math.floor(v).."</color>",50,nil,false)
                    else
                        CreateCrystalText(self,self.friendResShow[i].text,"<color=#ec6b60>"..math.floor(v).."</color>",-50,nil,false)
                    end
                    self.friendResShow[i].add_cry:SetActive(true)
                end
                OnRefresh(self)
                ShowPowerTip(self)
                self.isCrystarMoving = false
                DataManager:GetInstance():Broadcast("BattleCrystarMoving")
                TimerManager:GetInstance():SimpleTimerArgs(0.5,function()
                    for i, v in pairs(play_add_game) do
                        self.friendResShow[i].add_cry:SetActive(false)
                    end
                end,nil,true)
            end,nil,true)
        else
            OnRefresh(self)
        end
    else
        OnRefresh(self)
        --ShowPowerTip(self)
    end
    --刷新血条水晶
    if self.ui_show_type == 1 then
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_REFRESH_BLOOD_CRY,self.resource,self.enemy_resource)
    end

end

local function CanSelectSkill(self,heroIndex,skillIndex,pos,costType,needNum,heroType)
    local is_call = false
    local skill_id = self.initData.hero[heroIndex].skill[skillIndex].id
    if skill_id == 0 then
        is_call = true
    end
    self.select_effect.transform.position = pos
    self.select_effect:SetActive(true)
    TimerManager:GetInstance():SimpleTimerArgs(0.6,function()
        self.select_effect:SetActive(false)
    end,nil,true)

    local moveIndex = self.select_skill_num + 1
    self.skillCardPanel:SetActive(true)
    local oldPos = Vector2.New(0,0)
    if is_call or self.ctrlSkills[heroIndex].skill[skillIndex] == nil then
        oldPos = self.ctrlSkills[heroIndex].hero_icon.transform.position
    else
        oldPos = self.ctrlSkills[heroIndex].skill[skillIndex].btn.transform.position
    end
    self.skillMoveItems[moveIndex].icon:SetSpriteName(self.initData.hero[heroIndex].skill[skillIndex].icon)
    self.skillMoveItems[moveIndex].obj:SetActive(true)
    local newPos = self.showSkills[moveIndex].gameObject.transform.position
    self.mask_game:SetActive(true)
    self.isSkillMoving = true
    LuaTweener.TransMoveTo(self.skillMoveItems[moveIndex].obj.transform,oldPos,newPos,0.2,EaseFormula.OutQuad,function()
        self.select_skill_num = self.select_skill_num + 1
        SelectSkillRightShow(self,moveIndex,self.initData.hero[heroIndex].icon, self.initData.hero[heroIndex].skill[skillIndex].icon,true,self.initData.hero[heroIndex].skill[skillIndex].id,heroIndex)
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_SELECT_SKILL,
                {self.initData.hero[heroIndex].id,skill_id,is_call,{[costType] = needNum}},heroType,self.enemy_resource,self.resource)
        self.skillMoveItems[moveIndex].obj:SetActive(false)
        self.mask_game:SetActive(false)
        self.isSkillMoving = false
        DataManager:GetInstance():Broadcast("BattleSkillMove")
    end)
end
--点击技能图标
local function ClickBtn(self,heroIndex,skillIndex)
    LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    --自动战斗阶段  禁止选择技能
    if self.auto_battle == 1 or self.isSkillMoving then
        return
    end
    if self.select_skill_num >= 4 then
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100035))
        return
    end
    local tempHero = self.ctrlSkills[heroIndex]
    if tempHero.dead then
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100036))
        return
    end
    if tempHero.state == 1 then
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100037))
        --UISpecial:GetInstance():UITipText("技能被禁锢  "..tempHero.state)
        return
    end
    if skillIndex == 3 then
        if tempHero.cd > 0 then
            UISpecial:GetInstance():UITipText(string.format(DataUtil.GetClientText(100039),math.floor(tempHero.cd)))
            return
        end

        if self.initData.hero[heroIndex].skill[skillIndex] == nil then
            Logger.Log("技能不存在")
            return
        end

        if (tempHero.state == 2 and self.initData.hero[heroIndex].skill[skillIndex].skillType > 0)--只禁止技能
        or (tempHero.state == 3 and self.initData.hero[heroIndex].skill[skillIndex].skillType == 0) --只禁止召唤
        then
            UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100037))
            return
        end

        if tempHero.selectHero == false and not tempHero.lock then
            if self.resource[tempHero.costType] == nil or tempHero.needNum <= self.resource[tempHero.costType] then
                CanSelectSkill(self,heroIndex,skillIndex,tempHero.hero_icon.transform.position,tempHero.costType,tempHero.needNum,tempHero.costType)
            else
                UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100040))
            end
        end
        return
    end
    local selectSkill =  tempHero.skill[skillIndex]
    if tempHero.state == 2 then --只禁止技能
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100037))
        return
    end
    if selectSkill.skillType == 2 then
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100038))
        return
    end
    if selectSkill.cd > 0 then
        UISpecial:GetInstance():UITipText(string.format(DataUtil.GetClientText(100039),math.floor(selectSkill.cd)))
        return
    end
    if selectSkill.select == false and not selectSkill.lock then
        if self.resource[selectSkill.costType] == nil or selectSkill.needNum <= self.resource[selectSkill.costType] then
            CanSelectSkill(self,heroIndex,skillIndex,selectSkill.icon.transform.position,selectSkill.costType,selectSkill.needNum,tempHero.costType)
        else
            UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100040))
        end
    elseif selectSkill.select == true then
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100041))
    end

end

--开始战斗
local function BeginBattle(self,type)
    --自动战斗阶段  禁止玩家开始
    if type == 1 and self.auto_battle == 1 then
        return
    end

    if self.isCrystarMoving or self.isSkillMoving then
        return
    end

    self.cur_select_skill = nil
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_UIBATTLE_IN_START,1,self.auto_battle)
    self.skillCardPanel:SetActive(false)

end
local function CheckLevel(self)
    if self.isCrystarMoving or self.isSkillMoving then
        return
    end
    if UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleGuide,true,true) ~= nil then
        local BattleGuideView = UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleGuide).View
        self.easyfunc = Bind(self,BeginBattle,1)
        if BattleGuideView:GuideClickFun(self.round,self.battle_fightId,self.easyfunc) then
            BeginBattle(self,1)
        end
    else
        BeginBattle(self,1)
    end
end
local function Update(self)

    if self.long_tap_check and Time.timeSinceLevelLoad - self.cur_select_skill_time > 1 and self.cur_select_skill ~= nil then
        UIManager:GetInstance():Broadcast(UIMessageNames.UI_GUIDE_TIP_STATUS,false)
        self.skill_tip:OnRefresh(self.initData.hero[self.cur_select_skill[1]].skill[self.cur_select_skill[2]],self.cur_select_skill[3],1,self.model.battlePlayer.player1:GetGuardById(self.initData.hero[self.cur_select_skill[1]].id))
        self.long_tap_check = false
    end

    if self.ui_show_type == 1 then
        if self.down_count ~= nil and self.down_count > 0 then
            local remain_time = math.floor(self.down_count - Time.realtimeSinceStartup + self.start_down_count)
            if remain_time > 0 then
                self.down_count_text:SetText(remain_time)
            else
                BeginBattle(self,1)
                self.down_count_text:SetText(0)
                self.down_count = nil
            end
        end
        if self.auto_count ~= nil and self.auto_count > 0 then
            local remain_time = math.floor(self.auto_count - Time.realtimeSinceStartup + self.start_auto_count)
            if remain_time > 0 then
            else
                BeginBattle(self,2)
                self.auto_count = nil
            end
        end
    end
end

local function SkillBtnUp(self)
    if self.cur_select_skill ~= nil and self.long_tap_check then
        if self.skill_tip_state == 1 then
            ClickBtn(self,self.cur_select_skill[1],self.cur_select_skill[2])
        else
            self.skill_tip:OnRefresh(self.initData.hero[self.cur_select_skill[1]].skill[self.cur_select_skill[2]],self.cur_select_skill[3],1,self.model.battlePlayer.player1:GetGuardById(self.initData.hero[self.cur_select_skill[1]].id))
        end
    else
        UIManager:GetInstance():Broadcast(UIMessageNames.UI_GUIDE_TIP_STATUS,true)
        self.skill_tip:OnShowOrHide(false)
    end
    self.long_tap_check = false
end

local function SkillBtnDown(self,heroIndex,skillIndex,pos)
    --self.cur_select_hero=heroIndex
    self.cur_select_skill = {heroIndex,skillIndex,pos,self.initData.hero[heroIndex]}
    self.cur_select_skill_time = Time.timeSinceLevelLoad
    self.long_tap_check = true
end
local function SkillBtnExit(self)
    --self.cur_select_skill = nil
    self.long_tap_check = false
end

local function EmptySkillFrame(self,index,m)
    LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    if self.initData.hero[index].type == 1 then
        if m == 3 then
            UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100042))
        else
            UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100043))
        end

    else
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100044))
    end
end
--设置自动战斗属性
local function SetAutoBattleProp(self,time)
    if self.auto_battle == 1 then
        self.auto_img:SetSpriteName("ui_t_c2_341")
        self.auto_count = time
        self.start_auto_count = Time.realtimeSinceStartup
    else
        self.auto_img:SetSpriteName("ui_t_c2_340")
        self.auto_count = nil
    end
end
local function SetAudioSpeed(self,value)
    Logger.LogVars("Speed:",value)
    LJAudioManger:GetInstance():PlayVoice(value)
end
--设置速度属性
local function SetSpeedProp(self)
    local value = "Time_x0"
    if self.speed_state == 1 then
        self.speed_img:SetSpriteName("ui_t_c2_343")
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_SET_TIME_SCALE_MULT,self.model.speed_mult)
        value = "Time_x2"
     else
        self.speed_img:SetSpriteName("ui_t_c2_342")
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_SET_TIME_SCALE_MULT,self.model.init_speed)
    end
    SetAudioSpeed(self,value)
end
-- 设置简化三连击动画属性
local function SetSimpleThreeProp(self)
    if self.simpleThree_state == 1 then
        self.simpleThree_img:SetSpriteName("ui_t_c2_453")
    else
        self.simpleThree_img:SetSpriteName("ui_t_c2_452")
    end
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_SIMPLE_THREE_STATE, self.simpleThree_state)
end

--初始化查找ui
local function OnCreate(self)
    base.OnCreate(self)
    --选择技能
    self.slect_skill={}
    --技能tip状态
    self.skill_tip_state = 1
    --自动战斗状态
    self.auto_battle = 0
    --速度倍数
    self.speed_state = 0
    --简化动画
    self.simpleThree_state = 0
    --技能操作区域
    self.ctrlSkills = {}
    self.select_skill_num = 0
    self.grayMat = nil
    --self.enemyBtn = self:AddComponent(UIButton,"SystemPage/Back_EmemyInfo")
    --self.enemyBtn:SetOnClick(function()
    --    UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleEnemyInfo,2)
    --end)
    self.teach_tip=UIUtil.FindTrans(self.transform,"ReadyPage/SkillCardPanel/Tip")
    self.teach_btn=self:AddComponent(UIButton,"SystemPage/RoundInfo/teach_btn")
    self.teach_img=self:AddComponent(UIImage,"SystemPage/RoundInfo/teach_btn/teach_img",AtlasConfig.Language)
    self.teach_img:SetSpriteName("ui_t_c2_233")
    self.teach_btn:SetOnClick(function ()
        if BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.TEACHING then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICardStarUpSuccess,3,self.battle_fightId);
        else
            Logger.Log("非教学关卡能点击")
        end


    end)
    for i = 1, 3 do
        local skills = {selectHero = false,call = false,dead = false,state = 0,needNum = -1,costType = -1,cd = 0,lock = false}
        skills.bg_icon = self:AddComponent(UIImage,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Bg",i,i),AtlasConfig.DynamicTex)
        skills.crystal_bg = self:AddComponent(UIImage,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Crystal/Role%s_Crystal",i,i,i,i),AtlasConfig.DynamicTex)
        skills.crystal_num = self:AddComponent(UIText,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Crystal/Role%s_Crystal_Num",i,i,i,i))
        skills.crystal_game = UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Crystal",i,i,i)).gameObject
        self:AddComponent(UICanvas,  string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Crystal",i,i,i), 2)
        skills.crysta_mask_icon = self:AddComponent(UIImage,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Crystal/Role%s_Mask",i,i,i,i),AtlasConfig.DynamicTex)
        skills.hero_icon = self:AddComponent(UIImage,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Hero_Icon",i,i,i),AtlasConfig.DynamicTex)
        skills.hero_icon_btn = self:AddComponent(UIEventTrigger,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Hero_Icon",i,i,i))
        skills.mask_img = self:AddComponent(UIImage,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Skill_Mask",i,i,i),AtlasConfig.DynamicTex)
        skills.hero_icon_btn:SetOnPointerUp(self,SkillBtnUp)
        skills.hero_icon_btn:SetOnPointerDown(self,SkillBtnDown,i,3,skills.hero_icon_btn.transform.position)
        skills.hero_icon_btn:SetOnPointerExit(self,SkillBtnExit)
        skills.hero_select =UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Btn1_Active",i,i,i)).gameObject
        skills.hero_forbid =UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Forbid",i,i,i)).gameObject
        skills.hero_forbid:SetActive(false)
        skills.role_buff = UIBattleHeroBuffList.New(self,string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Buff",i,i,i))
        skills.role_buff:OnCreate()
        skills.gameObject = UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s",i)).gameObject
        skills.skill_name_game = UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_SkillName",i,i)).gameObject
        UIUtil.CommonLoadImg(UIUtil.FindImage(skills.skill_name_game),AtlasConfig.Language,"ui_t_c2_236")
        self:AddComponent(UICanvas,  string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_SkillName",i,i), 2)
        skills.skill_name_effect_game = UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_SkillName_Effect",i,i)).gameObject
        skills.skill_call_game = UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Call",i,i)).gameObject
        UIUtil.CommonLoadImg(UIUtil.FindImage(skills.skill_call_game),AtlasConfig.Language,"ui_t_c2_134")
        self:AddComponent(UICanvas,  string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Call",i,i), 2)
        skills.skill_call_effect_game = UIUtil.FindTrans(self.transform,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Call_Effect",i,i)).gameObject
        skills.skill_extral_cry = self:AddComponent(UIText,
                string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Hero/Role%s_Extral_Cry",i,i,i))
        skills.skill_name_game:SetActive(false)
        skills.skill_call_game:SetActive(false)
        skills.skill_call_effect_game:SetActive(false)
        skills.skill_name_effect_game:SetActive(false)
        skills.skill = {}
        for m = 1, 2 do
            local skillBtns = {select = false,needNum = -1,costType = -1,lock = false,skillType = 1,cd = 0,isNull = false}
            skillBtns.btn = self:AddComponent(UIEventTrigger,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Icon",i,i,m,i,m))
            skillBtns.icon = self:AddComponent(UIImage,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Icon",i,i,m,i,m),AtlasConfig.DynamicTex)
            skillBtns.emptyGame = UIUtil.FindTrans(self.transform,string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Empty",i,i,m,i,m)).gameObject
            local empty_btn = self:AddComponent(UIButton,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Empty",i,i,m,i,m),AtlasConfig.DynamicTex)
            empty_btn:SetOnClick(self,EmptySkillFrame,i,m)
            --skillBtns.num = self:AddComponent(UIText,
            --        string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Crystal/Role%s_Btn%s_Cost_Num",i,i,m,i,m,i,m))
            --skillBtns.numIcon = self:AddComponent(UIImage,
            --        string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Crystal/Role%s_Btn%s_Cost_Icon",i,i,m,i,m,i,m),AtlasConfig.DynamicTex)
            --skillBtns.num_game = UIUtil.FindTrans(self.transform,
            --    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Crystal",i,i,m,i,m,i,m)).gameObject
            skillBtns.selectGame = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Active",i,i,m,i,m)).gameObject
            skillBtns.readyGame = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Tip",i,i,m,i,m)).gameObject
            skillBtns.readyGame:SetActive(false)
            skillBtns.passiveGame = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_PassiveSkill",i,i,m,i,m)).gameObject
            skillBtns.skillFrame = self:AddComponent(UIImage,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_ActiveSkill",i,i,m,i,m),AtlasConfig.DynamicTex)
            skillBtns.bgGame = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Bg",i,i,m,i,m)).gameObject
            skillBtns.mask_game = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Mask",i,i,m,i,m)).gameObject
            skillBtns.mask_img = self:AddComponent(UIImage,string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Mask",i,i,m,i,m))
            skillBtns.forbid_game = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Forbid",i,i,m,i,m)).gameObject
            skillBtns.skill_extral_cry = UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Extral_CryBg",i,i,m,i,m)).gameObject
            skillBtns.skill_extral_cry_img = self:AddComponent(UIImage,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Extral_CryBg/Role%s_Btn%s_Extral_CryImg",i,i,m,i,m,i,m),AtlasConfig.DynamicTex)
            skillBtns.skill_extral_cry_text = self:AddComponent(UIText,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s/Role%s_Btn%s_Extral_CryBg/Role%s_Btn%s_Extral_Cry",i,i,m,i,m,i,m))
            skillBtns.mask_game:SetActive(false)
            skillBtns.forbid_game:SetActive(false)
            table.insert(skills.skill,skillBtns)
            skillBtns.btn:SetOnPointerUp(self,SkillBtnUp)
            skillBtns.btn:SetOnPointerDown(self,SkillBtnDown,i,m,skillBtns.btn.transform.position)
            skillBtns.btn:SetOnPointerExit(self,SkillBtnExit)
            skillBtns.gameObject =  UIUtil.FindTrans(self.transform,
                    string.format("ReadyPage/RoleInfoModule/Role%s/Role%s_Btn%s",i,i,m,i)).gameObject
            if self.grayMat == nil then
                self.grayMat = skillBtns.icon:GetMat()
            end
        end
        table.insert(self.ctrlSkills,skills)
    end
    --技能显示区域
    self.showSkills = {}
    for i = 1, 4 do
        local showSki = {}
        showSki.heroIcon = self:AddComponent(UIImage,
                string.format("ReadyPage/SkillCardPanel/%s/%s_Bg/%s_Bg_Icon",i,i,i),AtlasConfig.DynamicTex)
        showSki.skillIcon = self:AddComponent(UIImage,
                string.format("ReadyPage/SkillCardPanel/%s/%s_Skill/%s_Skill_Icon",i,i,i),AtlasConfig.DynamicTex)
        showSki.gameObject = UIUtil.FindTrans(self.transform,"ReadyPage/SkillCardPanel/"..i).gameObject
        showSki.emptyGame = UIUtil.FindTrans(self.transform,"ReadyPage/SkillCardPanel/"..i.."_Empty").gameObject
        showSki.emptyGame:SetActive(true)
        showSki.gameObject:SetActive(false)
        showSki.btn = self:AddComponent(UIButton,"ReadyPage/SkillCardPanel/"..i)
        showSki.btn:SetOnClick(function()
            --自动战斗阶段  禁止选择技能
            if self.auto_battle == 1 then
                return
            end
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_CANCEL_SKILL,i)
        end)
        table.insert(self.showSkills,showSki)
    end
    self.ready_img=self:AddComponent(UIImage,"ReadyPage/BattleStateControlModule/Image_Ready",AtlasConfig.Language)
    self.ready_img:SetSpriteName("ui_t_c2_132")
    self.start_img=self:AddComponent(UIImage,"ReadyPage/BattleStateControlModule/Image_Start",AtlasConfig.Language)
    self.start_img:SetSpriteName("ui_t_c2_043")

    self.ready_btn = self:AddComponent(UIButton,"ReadyPage/BattleStateControlModule/Image_Ready")
    self.start_btn = self:AddComponent(UIButton,"ReadyPage/BattleStateControlModule/Image_Start")
    self.ready_btn:SetOnClick(function ()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        self:CheckLevel()
    end)
    self.start_btn:SetOnClick(function ()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        self:CheckLevel()
    end)
    --我方水晶数量
    self.friendResShow = {}
    --self.enemyResShow = {}
    for i = 1, 3 do
        local val_text = self:AddComponent(UIText,
                string.format("ReadyPage/Friend/%s/%s_num",i,i))
        val_text:SetText("0")
        local add_cry = UIUtil.FindTrans(self.transform,string.format("ReadyPage/Friend/%s/%s_add",i,i)).gameObject
        local red_cry = UIUtil.FindTrans(self.transform,string.format("ReadyPage/Friend/%s/%s_red",i,i)).gameObject
        local get_cry = UIUtil.FindTrans(self.transform,string.format("ReadyPage/Friend/%s/%s_get",i,i)).gameObject
        add_cry:SetActive(false)
        red_cry:SetActive(false)
        get_cry:SetActive(false)
        table.insert(self.friendResShow,{text = val_text,add_cry = add_cry,red_cry = red_cry,get_cry = get_cry})

        --val_text = self:AddComponent(UIText,
        --        string.format("SystemPage/BottomMenuBar/Ememy/%s/%s_num_em",i,i))
        --add_cry = UIUtil.FindTrans(self.transform,string.format("SystemPage/BottomMenuBar/Ememy/%s/%s_add_em",i,i)).gameObject
        --red_cry = UIUtil.FindTrans(self.transform,string.format("SystemPage/BottomMenuBar/Ememy/%s/%s_red_em",i,i)).gameObject
        --add_cry:SetActive(false)
        --red_cry:SetActive(false)
        --table.insert(self.enemyResShow,{text = val_text,add_cry = add_cry,red_cry = red_cry})
    end
    self:AddComponent(UICanvas, "ReadyPage/Friend", 3)
    self.get_crystal_anim = self:AddComponent(UIAnim,"SystemPage/ef_ui_fight_get crystal")
    self.get_crystal_anim.gameObject:SetActive(false)
    self.get_crystal_anim_num = {false,false,false}
    for i = 1, 3 do
        self.get_crystal_anim_num[i] = self:AddComponent(UIText,"SystemPage/ef_ui_fight_get crystal/"..i)
    end
    --初始化赋值
    self.resource = {0,0,0}
    --self.haveHeroNum = table.count(self.initData.hero)

    self.mask_game = UIUtil.FindTrans(self.transform,"Mask").gameObject

    self.round_player_text = self:AddComponent(UIText,"SystemPage/RoundInfo/player")
    self.round_num_text = self:AddComponent(UIText,"SystemPage/RoundInfo/TextGroup/Round")
    self.round_max_text = self:AddComponent(UIText,"SystemPage/RoundInfo/TextGroup/MaxRound")

    self.skill_tip = UIBattleSkillTip.New(self,"SkillTip")
    self:AddComponent(UICanvas,"SkillTip", 4)
    self.skill_tip:OnCreate()

    --提示气泡
    self.dialog_tip = UIBattleDialogTip.New(self,"")
    self.dialog_tip:OnCreate()

    --添加提示
    --[[
    self.hurt_btn = self:AddComponent(UIButton,"SystemPage/BottomMenuBar/ConfigMenu/Button")
    self.hurt_btn:SetOnClick(function ()
        local all_pos = {{0.63,0,-6.45},{-3.96,0,-5.96},{5.27,0,-5.16},{-1.33,0,3.51},{3.6,0,3.15},{-5.66,0,1.38}}
        local pos = all_pos[math.random(1,#all_pos)]
        pos[2] = 2
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_UIBATTLE_IN_START,{pos = pos,num = 1234567890,type = math.random(0,2)})
    end)
    ]]--
    --血条测试
    --[[
    self.hurt_btn = self:AddComponent(UIButton,"SystemPage/BottomMenuBar/ConfigMenu/Button")
    self.hurt_btn:SetOnClick(function ()
        local all_pos = {{84.85,2,124.44},{89.44,2,123.95},{94.08,2,125.24},{83.15,2,131.78},{87.48,2,133.91},{92.41,2,133.55}}
        local all_id = {11,23,34,45,65,86}
        local random_id = math.random(1,#all_pos)
        local pos = all_pos[random_id]
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_UIBATTLE_IN_START,{pos = pos,val = math.random(),type = math.random(0,2),id = all_id[random_id]})
        self.blood_init = true
    end)
    ]]
    self.battle_hide_game = UIUtil.FindTrans(self.transform,"ReadyPage").gameObject
    --连击
    --self.battle_combo_game = UIUtil.FindTrans(self.transform,"SystemPage/Combo").gameObject
    --self.battle_combo_game:SetActive(false)
    self.back_btn = self:AddComponent(UIButton,"SystemPage/BackBtn/Back")
    self.back_btn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayOtherVoice("UI_Cancel")
        UIManager:GetInstance():OpenTwoButtonTip("提示","是否退出战斗？","确定","取消",function()
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_QUIT)
        end,nil)
    end)

    self.auto_btn = self:AddComponent(UIButton,"SystemPage/BackBtn/Auto")
    self.auto_img = self:AddComponent(UIImage,"SystemPage/BackBtn/Auto",AtlasConfig.Language)
    self.auto_btn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        local lockdata ,type,des= UnlockData:GetInstance():GetLockDataState(309)
        if not lockdata then
            UISpecial:GetInstance():UITipText(des)
            return
        end
        if BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.TEACHING then
            UISpecial:GetInstance():UITipText("集训营不可自动战斗")
            return
        end
        self.auto_battle = 1-self.auto_battle
        if BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.SOLO_ARENA then
            CS.UnityEngine.PlayerPrefs.SetInt("auto_battle_"..ClientData:GetInstance():GetServerUserId().."_solo_arena", self.auto_battle)
        else
            CS.UnityEngine.PlayerPrefs.SetInt("auto_battle_"..ClientData:GetInstance():GetServerUserId(), self.auto_battle)
        end
        SetAutoBattleProp(self,0.3+self.model.auto_wait_time)
    end)

    self.speed_btn = self:AddComponent(UIButton,"SystemPage/BackBtn/Speed")
    self.speed_img = self:AddComponent(UIImage,"SystemPage/BackBtn/Speed",AtlasConfig.DynamicTex)
    self.speed_btn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        local lockdata ,type,des= UnlockData:GetInstance():GetLockDataState(308)
        if not lockdata then
            UISpecial:GetInstance():UITipText(des)
            return
        end
        self.speed_state = 1-self.speed_state
        if BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.SOLO_ARENA then
            CS.UnityEngine.PlayerPrefs.SetInt("speed_state_"..ClientData:GetInstance():GetServerUserId().."_solo_arena", self.speed_state)
        else
            CS.UnityEngine.PlayerPrefs.SetInt("speed_state_"..ClientData:GetInstance():GetServerUserId(), self.speed_state)
        end
        SetSpeedProp(self)
    end)

    self.simpleThree_btn = self:AddComponent(UIButton,"SystemPage/BackBtn/SimpleThree")
    self.simpleThree_img = self:AddComponent(UIImage,"SystemPage/BackBtn/SimpleThree",AtlasConfig.Language)
    self.simpleThree_btn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        local lockdata ,type,des= UnlockData:GetInstance():GetLockDataState(310)
        if not lockdata then
            UISpecial:GetInstance():UITipText(des)
            return
        end
        self.simpleThree_state = 1-self.simpleThree_state
        if BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.SOLO_ARENA then
            CS.UnityEngine.PlayerPrefs.SetInt("simple_three_beat_"..ClientData:GetInstance():GetServerUserId().."_solo_arena", self.simpleThree_state)
        else
            CS.UnityEngine.PlayerPrefs.SetInt("simple_three_beat_"..ClientData:GetInstance():GetServerUserId(), self.simpleThree_state)
        end
        SetSimpleThreeProp(self)
    end)
    self.help_panel = UIUtil.FindTrans(self.transform, "UIBattleHelp")
    self:AddComponent(UICanvas, "UIBattleHelp", 9)
    self.help_panel.gameObject:SetActive(false)
    self.help_panel_close = self:AddComponent(UIButton, "UIBattleHelp/UIBattleHelpPanel")
    self.help_panel_close:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        self.help_panel.gameObject:SetActive(false)
    end)
    self.help_btn = self:AddComponent(UIButton, "SystemPage/RoundInfo/Help")
    self.help_btn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        self.help_panel.gameObject:SetActive(true)
    end)

    self.m_cam = CS.UnityEngine.Camera.main
--[[    self.click_btn = self:AddComponent(UIButton,"SystemPage/BG")
    self.click_btn:SetOnClick(function ()
        if self.ui_show_type == 1 then
            local ray = self.m_cam:ScreenPointToRay(Input.mousePosition)
            local result,hit = CS.PhysicsTool.Raycast(ray,1000)
            if result then
                local temp_agr =  string.split(hit.collider.name,"_",1,true)
                if tonumber(temp_agr[1]) == 0 then
                    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_GET_ROLE_DATA,tonumber(temp_agr[1]),tonumber(temp_agr[2]))
                end
            end
        end
    end)]]

    self.skill_tip_anim = UIUtil.FindTrans(self.transform,"SkillTipAnim").gameObject
    self:AddComponent(UICanvas, "SkillTipAnim", 5)
    self.skill_tip_anim:SetActive(false)

    self.down_count_text = self:AddComponent(UIText,"ReadyPage/BattleStateControlModule/Time")
    self.down_count_text.gameObject:SetActive(false)

    self.select_effect = UIUtil.FindTrans(self.transform,"ef_ui_fight_skillbutton_choose yellow").gameObject
    self.select_effect:SetActive(false)

    self.enter_anim_game = {
        {transform = false,p1 = false,p2 = false},{transform = false,p1 = false,p2 = false},{transform = false,p1 = false,p2 = false},
        {transform = false,p1 = false,p2 = false},{transform = false,p1 = false,p2 = false},{transform = false,p1 = false,p2 = false},
        {transform = false,p1 = false,p2 = false},{transform = false,p1 = false,p2 = false}}
    local anim_offset = 100
    self.enter_anim_game[1].transform = UIUtil.FindTrans(self.transform,"SystemPage/BackBtn")
    self.enter_anim_game[1].p1 = self.enter_anim_game[1].transform.position
    self.enter_anim_game[1].p2 = self.enter_anim_game[1].transform.position+Vector3.New(-anim_offset,anim_offset,0)
    self.enter_anim_game[2].transform = UIUtil.FindTrans(self.transform,"SystemPage/RoundInfo")
    self.enter_anim_game[2].p1 = self.enter_anim_game[2].transform.position
    self.enter_anim_game[2].p2 = self.enter_anim_game[2].transform.position+Vector3.New(anim_offset,anim_offset,0)
    self.enter_anim_game[3].transform = UIUtil.FindTrans(self.transform,"EnemyInfo/Back_EmemyInfo")
    self.enter_anim_game[3].p1 = self.enter_anim_game[3].transform.position
    self.enter_anim_game[3].p2 = self.enter_anim_game[3].transform.position+Vector3.New(0,anim_offset,0)
    self.enter_anim_game[4].transform = UIUtil.FindTrans(self.transform,"ReadyPage/TalkMenu")
    self.enter_anim_game[4].p1 = self.enter_anim_game[4].transform.position
    self.enter_anim_game[4].p2 = self.enter_anim_game[4].transform.position+Vector3.New(-anim_offset,-anim_offset,0)
    self.enter_anim_game[5].transform = UIUtil.FindTrans(self.transform,"ReadyPage/RoleInfoModule")
    self.enter_anim_game[5].p1 = self.enter_anim_game[5].transform.position
    self.enter_anim_game[5].p2 = self.enter_anim_game[5].transform.position+Vector3.New(0,-anim_offset - 50,0)
    self.enter_anim_game[6].transform = UIUtil.FindTrans(self.transform,"ReadyPage/BattleStateControlModule")
    self.enter_anim_game[6].p1 = self.enter_anim_game[6].transform.position
    self.enter_anim_game[6].p2 = self.enter_anim_game[6].transform.position+Vector3.New(anim_offset,-anim_offset,0)
    self.enter_anim_game[7].transform = UIUtil.FindTrans(self.transform,"ReadyPage/Friend")
    self.enter_anim_game[7].p1 = self.enter_anim_game[7].transform.position
    self.enter_anim_game[7].p2 = self.enter_anim_game[7].transform.position+Vector3.New(0,-90,0)
    self.enter_anim_game[8].transform = UIUtil.FindTrans(self.transform,"EnemyInfo/Cry")
    self.enter_anim_game[8].p1 = self.enter_anim_game[8].transform.position
    self.enter_anim_game[8].p2 = self.enter_anim_game[8].transform.position+Vector3.New(0,0,0)
    --self.enter_anim_game[9].transform = UIUtil.FindTrans(self.transform,"ReadyPage/BG")
    --self.enter_anim_game[9].p1 = self.enter_anim_game[9].transform.position
    --self.enter_anim_game[9].p2 = self.enter_anim_game[9].transform.position+Vector3.New(0,-anim_offset,0)
    self.skillCardPanel = UIUtil.FindTrans(self.transform,"ReadyPage/SkillCardPanel").gameObject
    self.skillCardPanel:SetActive(false)
    self.skillMoveItems = {}
    for i = 1, 4 do
        self.skillMoveItems[i] = {}
        self.skillMoveItems[i].obj = UIUtil.FindTrans(self.transform,"ReadyPage/SkillMoveObj/SkillMoveImg"..i).gameObject
        self.skillMoveItems[i].icon = self:AddComponent(UIImage, "ReadyPage/SkillMoveObj/SkillMoveImg"..i.."/Move_Skill_Icon"..i, AtlasConfig.DynamicTex)
        self.skillMoveItems[i].obj:SetActive(false)
    end
    self.enemyInfoComp = BattleEnemyRoleInfo.New(self,"EnemyInfo")
    self.enemyInfoComp:OnCreate()
    self.enemyInfoComp:OnInit()



    --SwitchCam
    self.switch_btn=self:AddComponent(UIButton,"SystemPage/SwitchCam");
    self.switch_btn.gameObject:SetActive(false)
    if self.switch_btn ~= nil then
        self.switch_btn:SetOnClick(function()
            UIManager:GetInstance():Broadcast(UIMessageNames.UIEMBATTLE_CHANGE__CAMFOV);
            self.skill_tip_state = 1-self.skill_tip_state
        end)
    end

end

local function ShowAllBlood(self)
    --显示所有血条
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_SHOW_ALL_BLOOD)
    for i = 1, 3 do
        if self.initData.hero[i] ~= nil  then
            self.ctrlSkills[i].role_buff:OnRefresh(self.initData.hero[i].effects)
        end
    end

end

local function OnTeamTipOver(self)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_TEAM_TIP_HIDE,1)
    --播放入场动画
    local interval_time = PlayerEnterAnim(self,1)
    TimerManager:GetInstance():SimpleTimerArgs(interval_time,function()
        --播放动画
        local isPlay = false
        local add = {0,0,0}
        if self.initData.friendRes.add ~= nil then
            for i, v in ipairs(self.initData.friendRes.add) do
                add[i] = v
            end
        end
        for i = 1, 3 do
            if add[i] > 0 then
                isPlay = true
                self.get_crystal_anim_num[i]:SetText(math.floor(add[i]))
            else
                self.get_crystal_anim_num[i]:SetText(math.floor(add[i]))
                self.resource[i] =  self.resource[i]+add[i]
            end
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_GUIDE_CRY_BEGIN)
        UpdateBattleArrowTip(self)
        if isPlay then
            self.mask_game:SetActive(true)
            self.get_crystal_anim.gameObject:SetActive(true)
            self.get_crystal_anim:Play("ef_ui_fight_get crystal")
            if GuideManager:GetInstance():CheckRunning() then
                TimerManager:GetInstance():SimpleTimerArgs(1,function()
                    DataManager:GetInstance():Broadcast(DataMessageNames.UI_Guide_MidEvent)
                end,nil,true)
            end
            LJAudioManger:GetInstance():PlayVoice("UI_Crystal_01")
            TimerManager:GetInstance():SimpleTimerArgs(2.5,function()
                self.get_crystal_anim.gameObject:SetActive(false)
                self.mask_game:SetActive(false)
                ShowAllBlood(self)
                UpdateJianTouTip(self)
                ShowDialogTip(self)
                ShowPowerTip(self)
                if  GuideWeakGroup:GetInstance().Runing or GuideManager:GetInstance():CheckRunning()  then
                    if GuideWeakGroup:GetInstance().Runing and GuideWeakGroup:GetInstance().CurGuideItem.NeedEventRound then
                        if GuideWeakGroup:GetInstance().CurGuideItem.NeedEventRound == self.round then
                            DataManager:GetInstance():Broadcast(DataMessageNames.ON_GUIDE_CRY_PLAY_OVER_ROUND)
                        end
                    else
                        DataManager:GetInstance():Broadcast(DataMessageNames.ON_GUIDE_CRY_PLAY_OVER)
                    end
                end
                if not GuideManager:GetInstance():CheckRunning() and not GuideWeakGroup:GetInstance().Runing then
                    UIUtil.SetChatImgStatus(true)
                end
            end,nil,true)
            TimerManager:GetInstance():SimpleTimerArgs(1.7,function(add)
                for i = 1, 3 do
                    if add[i] > 0 then
                        self.resource[i] =  self.resource[i]+add[i]
                    end
                end
                OnRefresh(self,true)
            end,add,true)
        else
            self.mask_game:SetActive(false)
            ShowAllBlood(self)
            OnRefresh(self,true)
            if GuideGroup:GetInstance().Runing or GuideWeakGroup:GetInstance().Runing  then
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_GUIDE_CRY_PLAY_OVER)
            end
        end

    end,nil,true)


end

local function ActiveGetCryAnim(self,active)
    UIUtil.FindTrans(self.transform,string.format("ReadyPage/Friend")).gameObject:SetActive(active)
    UIUtil.FindTrans(self.transform,string.format("EnemyInfo/Cry")).gameObject:SetActive(active)
    if active then
        self.enter_anim_game[7].transform.position = self.enter_anim_game[7].p2
        self.enter_anim_game[8].transform.position = self.enter_anim_game[8].p2
    end
end

local function UpdateEnemyRefresh(self,play_cry)
    self.enemy_resource = {0,0,0}
    for i = 1, 3 do
        if self.initData.emeyRes[i] ~= nil then
            self.enemy_resource[i] = self.initData.emeyRes[i]
        else
            Logger.Log("敌方水晶类型为"..i.."的值为空")
        end
    end
    if play_cry and self.enemyInfoComp ~= nil then
        self.enemyInfoComp:UpdateCry(self.enemy_resource,true)
    end
    --OnRefresh(self)
end
local function ShowRoundTip(self,type,round)
    self.round_max_text:SetText("/"..self.model.max_round)
    self.round=round
    self.round_num_text:SetText(round)
    if type == 1 then
        self.round_player_text:SetText("你的回合")
    else
        self.round_player_text:SetText("敌方回合")
    end
end

local function ImmediateRefresh(self)
    self.initData = self.model.initData
    self.select_skill_num = 0
    for i = 1, 3 do
        if self.initData.hero[i] ~= nil  then
            UpdateHeroByIndex(self,i)
        else
            self.ctrlSkills[i].gameObject:SetActive(false)
        end
    end

    --清空选择技能
    for i = 1, 4 do
        if self.showSkills[i] ~= nil then
            self.showSkills[i].gameObject:SetActive(false)
            self.showSkills[i].emptyGame:SetActive(true)
        end
    end
    self.resource = {0,0,0}
    if self.initData.friendRes.cur ~= nil then
        for i, v in pairs(self.initData.friendRes.cur) do
            self.resource[i] = v
        end
    end
    --更新敌方资源数量
    UpdateEnemyRefresh(self)
    OnRefresh(self)
    ShowRoundTip(self,1,math.floor((self.initData.roundNum+1)/2))

    --更新倒計時
    self.down_count = self.model.down_count
    if self.down_count ~= nil and self.down_count > 0 then
        self.start_down_count = Time.realtimeSinceStartup
        self.down_count_text.gameObject:SetActive(true)
    else
        self.down_count_text.gameObject:SetActive(false)
    end

    SetAutoBattleProp(self,5+self.model.auto_wait_time)
    SetSpeedProp(self)
    SetSimpleThreeProp(self)
end
--ui打开的时候刷新界面
local function RefreshHero(self)
    ImmediateRefresh(self)
    --先隐藏动画物体
    for i, v in ipairs(self.enter_anim_game) do
        if i < 7 then
            v.transform.gameObject:SetActive(false)
        end
    end
    self.enter_anim_game[7].transform.position = self.enter_anim_game[7].p2
    self.enter_anim_game[8].transform.position = self.enter_anim_game[8].p2
    --ActiveGetCryAnim(self, true)
    --OnTeamTipOver(self)
    self.mask_game:SetActive(true)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_TEAM_TIP_SHOW,1,math.floor((self.initData.roundNum+1)/2))
    TimerManager:GetInstance():SimpleTimerArgs(1.5,OnTeamTipOver,self,true)

end



local function RefreshHero2(self)
    ImmediateRefresh(self)
    ShowAllBlood(self)
end

local function UIHideCtrl(self,type)
    if type == self.ui_show_type then
        if type == 1 then
            RefreshHero2(self)
        end
        return
    end
    if type == 1 then
        self.battle_hide_game:SetActive(true)
        self.ui_show_type = 1
        RefreshHero(self)
        if self.enemyInfoComp ~= nil then
            self.enemyInfoComp:OnInit()
        end

    elseif type == 2 then
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_HIDE_All_BLOOD)
        self.ui_show_type = 2
        local interval_time = PlayerEnterAnim(self,2)
        if self.enemyInfoComp ~= nil then
            self.enemyInfoComp:OnQuit()
        end
        TimerManager:GetInstance():SimpleTimerArgs(interval_time,function()
            if self.ui_show_type == 2 then
                --self.battle_hide_game:SetActive(false)
            else
                Logger.Log("UIHideCtrl类型错误 ")
            end
        end,nil,true)
    elseif type == 3 then
        self.battle_hide_game:SetActive(false)
        for i, v in ipairs(self.enter_anim_game) do
            if i ~= 1 then
                v.transform.position = v.p2
            end
        end
        UpdateEnemyRefresh(self,true)
    end
    UpdateJianTouTip(self)
    ShowDialogTip(self)
    UpdateBattleArrowTip(self)
    ShowPowerTip(self)
end

local function OnEnable(self)
    base.OnEnable(self)
    self.battle_fightId=BattleFieldManager:GetInstance().fightId
    GuideWeakCheckManager:GetInstance():CheckLevelCanLanch(self.battle_fightId)
    if  not MapData:GetInstance():CheckPassLevel(self.battle_fightId)  then
       --GuideWeakCheckManager:GetInstance():CheckLevelCanLanch(self.battle_fightId)
    end


    local curLevel = MapData:GetInstance():GetCurSelectLevelId();
    if curLevel>=10107 and curLevel<=10109 then
        UserData:GetInstance():SetFightData(curLevel)--记录战斗1-9
    end

    self.auto_battle = self.model.auto_battle
    self.speed_state = self.model.speed_state
    self.simpleThree_state = self.model.simpleThree_state
    self.teach_btn.gameObject:SetActive(BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.TEACHING)
    if GuideManager:GetInstance():CheckRunning() and GuideManager:GetInstance():GetGuideGroup() < 8 then
        self.back_btn.gameObject :SetActive(false)
    else
        self.back_btn.gameObject :SetActive(true)
    end
    self.initData = self.model.initData

    self.battle_hide_game:SetActive(true)
    self.ui_show_type = 0
    if self.initData.roundNum % 2 == 0 then
        ShowRoundTip(self,2,math.floor((self.initData.roundNum+1)/2))
    else
        ShowRoundTip(self,1,math.floor((self.initData.roundNum+1)/2))
    end


    if self.model.show_type ~= nil then
        UIHideCtrl(self,self.model.show_type)
        --更新水晶资源
        if self.model.show_type == 2 then
            if self.initData.friendRes.cur ~= nil then
                for i, v in ipairs(self.initData.friendRes.cur) do
                    self.resource[i] = v
                end
            end
            UpdateEnemyRefresh(self)
        end
    else
        UIHideCtrl(self,1)
    end
    self.auto_btn.gameObject:SetActive(BattleFieldManager:GetInstance().battleType ~= BattleEnum.BattleType.TEACHING)
end
-- 关闭：窗口隐藏
local function OnDisable(self)
    base.OnDisable(self)
    SetAudioSpeed(self,"Time_x0")
end
local function OnDestroy(self)
    base.OnDestroy(self)
    --归位
    if self.enter_anim_game ~= nil then
        for i, v in ipairs(self.enter_anim_game) do
            v.transform.position = v.p1
        end
    end

end


local function CallSwitchHero(self,index,lock)
    UpdateHeroByIndex(self,index,lock)
    OnRefresh(self)
end

local function ShowEnemyInfo(self,data)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleEnemySkill,data)
end

local function ShowGetCryEffect(self, index)
    self.friendResShow[index].get_cry:SetActive(true)
    TimerManager:GetInstance():SimpleTimerArgs(0.5,function()
        self.friendResShow[index].get_cry:SetActive(false)
    end,nil,true)
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.UIBATTLE_UI_HIDE,UIHideCtrl)
    self:AddUIListener(UIMessageNames.UIBATTLE_ON_ROUND, UpdateEnemyRefresh)
    self:AddUIListener(UIMessageNames.UIBATTLE_SELECT_SKILL_BACK, SelectSkillCallBack)
    self:AddUIListener(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE, CrystalChange)
    self:AddUIListener(UIMessageNames.UIBATTLE_CALL_SWITCH, CallSwitchHero)
    self:AddUIListener(UIMessageNames.UIBATTLE_BACK_ROLE_DATA, ShowEnemyInfo)
    self:AddUIListener(UIMessageNames.UIBATTLE_ROUND_TIP, ShowRoundTip)
    self:AddUIListener(UIMessageNames.UIBATTLE_PLAY_CRY_ANIM, ActiveGetCryAnim)
    self:AddUIListener(UIMessageNames.UIBATTLE_PLAY_GETCRY_EFFECT, ShowGetCryEffect)
end
local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    -- UI消息注销
    self:RemoveUIListener(UIMessageNames.UIBATTLE_UI_HIDE,UIHideCtrl)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_ON_ROUND, UpdateEnemyRefresh)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_SELECT_SKILL_BACK, SelectSkillCallBack)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE, CrystalChange)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_CALL_SWITCH, CallSwitchHero)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_BACK_ROLE_DATA, ShowEnemyInfo)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_ROUND_TIP, ShowRoundTip)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_PLAY_CRY_ANIM, ActiveGetCryAnim)
    self:RemoveUIListener(UIMessageNames.UIBATTLE_PLAY_GETCRY_EFFECT, ShowGetCryEffect)
end


UIBattleInView.Update = Update
UIBattleInView.OnCreate = OnCreate
UIBattleInView.OnEnable = OnEnable
UIBattleInView.OnDisable = OnDisable
UIBattleInView.OnDestroy = OnDestroy
UIBattleInView.OnAddListener = OnAddListener
UIBattleInView.OnRemoveListener = OnRemoveListener
--UIBattleInView.CloseExitBtn = CloseExitBtn
UIBattleInView.UpdateJianTouTip = UpdateJianTouTip
UIBattleInView.CheckLevel = CheckLevel
UIBattleInView.IsCanUseSkill3 = IsCanUseSkill3
UIBattleInView.IsUsedSkill = IsUsedSkill
UIBattleInView.JudegSkillSort = JudegSkillSort
UIBattleInView.JudgePosSkill = JudgePosSkill
UIBattleInView.GetHeroDeaStatus = GetHeroDeaStatus
UIBattleInView.SetAudioSpeed = SetAudioSpeed
UIBattleInView.GetHeroSHLStatus = GetHeroSHLStatus
UIBattleInView.GetHeroGuideByID = GetHeroGuideByID
return UIBattleInView