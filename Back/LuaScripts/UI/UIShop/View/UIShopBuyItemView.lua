---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LJ095.
--- DateTime: 2019/2/20 14:37
---
local UIShopBuyItemView = BaseClass("UIShopBuyItemView", UIBaseView)
local base = UIBaseView

local close_btn_path="panel/exitBtn";
local reduce_btn_path="panel/subtractBtn";
local add_btn_path="panel/addBtn";
local buy_btn_path="panel/confirmBtn";
local item_icon_path="panel/item/icon";
local item_frame_path="panel/item/frame";
local item_name_path="panel/name";
local buy_num_text_path="panel/haveNum/haveNumTxt";
local price_num_text_path="panel/PriceNum/PriceNumTxt";
local slider_path="panel/BugSlider";
local limit_count_path="panel/limitCount";
local recommand_obj_path="panel/item/RecommandObj";
local discount_obj_path="panel/item/DiscountObj";
local discount_text_path="panel/item/DiscountObj/disText";
local cost_item_icon_path="panel/PriceNum/CostIcon";
local buy_item_icon_path="panel/haveNum/buyIcon";
local item_des_path="panel/DesText";
local item_num_path="panel/item/itemNum";
local next_num_text_path="panel/nextNum/nextNumTxt";
local next_item_icon_path="panel/nextNum/nextIcon";
local mask_btn_path = "maskBtn";


--静态文本
local static_title_path_text_path="panel/titleTxt";
local static_price_num_text_path="panel/PriceNum";
local static_have_num_path="panel/haveNum";
local static_buy_btn_text_path="panel/confirmBtn/confirmText";

--显示静态文本
local function ShowStaticText(self)
    local titleText=self:AddComponent(UIText,static_title_path_text_path);
    titleText:SetText(DataUtil.GetClientText(100106));
    local staticPriceNum=self:AddComponent(UIText,static_price_num_text_path);
    staticPriceNum:SetText(DataUtil.GetClientText(100104));
    local staticHaveNum=self:AddComponent(UIText,static_have_num_path);
    staticHaveNum:SetText(DataUtil.GetClientText(100103));
    self.staticBuyBtnText=self:AddComponent(UIText,static_buy_btn_text_path);
    --self.staticBuyBtnText:SetText(DataUtil.GetClientText(100107));
    self.buyBtnOutline=self:AddComponent(UIOutlineEx,static_buy_btn_text_path);
end

local function BuyItem(self)
    LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    local haveCoin=BackpackData:GetInstance():GetItemNumById(self.model.singleGoodsData.costId);
    if haveCoin>=self.finalPrice then
        self.ctrl:SendBuyItemRequest(self.goodsId,self.buyNum);
    else
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100105))
    end

end

--获取当前货币可以购买的物品数量
local function GetCurCoinCanByNum(self,_haveCoin)
    local finalNum=0;
    if self.xlsxData.SellType~=1 then
        finalNum=math.floor(_haveCoin/self.xlsxData.Price[1]);
    else
        local curIndex=self.todayBuyCount+1;
        local initIndex=self.todayBuyCount;
        local curPrice=0;
        for i = 1, #self.xlsxData.Price do
            if i>initIndex then
                curPrice=self.xlsxData.Price[curIndex]+curPrice;
                if curPrice<=_haveCoin then
                    finalNum=finalNum+1;
                    curIndex=curIndex+1;
                else
                    break;
                end
            end
        end
        if curPrice<_haveCoin then
            finalNum=math.floor((_haveCoin-curPrice)/self.xlsxData.Price[#self.xlsxData.Price])+finalNum;
        end
    end
    return finalNum;
end

--获取货币数量
local function GetFinalNeedCoinByNum(self,buyNum)
    local finalPrice=0;
    if self.xlsxData.SellType~=1 then
        finalPrice=self.xlsxData.Price[1]*buyNum;
    else
        local todayBuyCount=self.todayBuyCount+1;
        local curIndex=0;
        for i = 1, #self.xlsxData.Price do
            if i==todayBuyCount then
                if curIndex<buyNum then
                    finalPrice=self.xlsxData.Price[todayBuyCount]+finalPrice;
                    todayBuyCount=todayBuyCount+1;
                    curIndex=curIndex+1;
                end

            end
        end
        finalPrice=finalPrice+(buyNum-curIndex)*self.xlsxData.Price[#self.xlsxData.Price];
    end
    return finalPrice;
end

--获取下次购买需要的货币数量
local function GetNextNeedCoinBuyNum(self,buyNum)
    local nextPrice = 0;
    if self.xlsxData.SellType ~= 1 then
        nextPrice = self.xlsxData.Price[1];
    else
        local priceNum = #self.xlsxData.Price;
        if self.todayBuyCount + buyNum + 1 >= priceNum then
            nextPrice = self.xlsxData.Price[priceNum]
        else
            nextPrice = self.xlsxData.Price[self.todayBuyCount + buyNum + 1]
        end
    end
    return nextPrice
end

--通过购买数量获取需要的货币数量
local function CalculateNeedCoinByNum(self,buyNum)
    local haveCoin=BackpackData:GetInstance():GetItemNumById(self.model.singleGoodsData.costId);
    local nextPrice = GetNextNeedCoinBuyNum(self,buyNum);
    local nextPriceShow = DataUtil.GetDataNumDes(nextPrice);
    self.nextPriceText:SetText(nextPriceShow);
    self.finalPrice=0;
    self.finalPrice=GetFinalNeedCoinByNum(self,buyNum);
    local priceShow=DataUtil.GetDataNumDes(self.finalPrice);
    local priceStr=self.finalPrice<=haveCoin and string.format("<color=#EFEADE>%s</color>",priceShow)
            or string.format("<color=#FF0600>%s</color>",priceShow);
    self.priceText:SetText(priceStr);
    if self.finalPrice<=haveCoin then
        UIUtil.SetButtonState(self.buyBtn,self.buyBtnImg,self.staticBuyBtnText,self.buyBtnOutline,self.grayMat,true);
    else
        UIUtil.SetButtonState(self.buyBtn,self.buyBtnImg,self.staticBuyBtnText,self.buyBtnOutline,self.grayMat,false);
    end
    local num=math.modf(buyNum)
    self.buyNumText:SetText(num);
    if self.leftCount == 0 then
        self.sliderObj:SetValue(1)
    else
        self.sliderObj:SetValue(buyNum/self.leftCount);
    end
end

--slider 滚动监控
local function OnSliderValueChange(self)
    if self.isCheckSliderValueChange==true then
        local sliderValue=self.sliderObj:GetValue();
        self.buyNum=math.modf(sliderValue*self.leftCount)==0 and 1 or math.modf(sliderValue*self.leftCount);

        CalculateNeedCoinByNum(self,self.buyNum);
    else
        self.isCheckSliderValueChange=true;
    end
end
--增加或者减少购买的数量
local function AddOrReduceBuyNum(self,type)
    self.isCheckSliderValueChange=false;
    if type==0 then
        self.buyNum=self.buyNum-1==0 and 1 or self.buyNum-1;
    else
        local minCount = self.leftCount
        if minCount <= 0 then
            minCount = 1
        end
        self.buyNum=self.buyNum+1>minCount and minCount or self.buyNum+1;
    end
    CalculateNeedCoinByNum(self,self.buyNum);

end

local function OnCreate(self)
    base.OnCreate(self)
    ShowStaticText(self);
    self.closeBtn=self:AddComponent(UIButton,close_btn_path);
    self.reduceBtn=self:AddComponent(UIButton,reduce_btn_path);
    self.addBtn=self:AddComponent(UIButton,add_btn_path);
    self.buyBtn=self:AddComponent(UIButton,buy_btn_path);
    self.buyBtnImg=self:AddComponent(UIImage,buy_btn_path,AtlasConfig.DynamicTex);
    self.grayMat=self.buyBtnImg:GetMat();
    self.icon=self:AddComponent(UIImage,item_icon_path,AtlasConfig.DynamicTex);
    self.itemFrame=self:AddComponent(UIImage,item_frame_path,AtlasConfig.DynamicTex);
    self.itemName=self:AddComponent(UIText,item_name_path);
    self.buyNumText=self:AddComponent(UIText,buy_num_text_path);
    self.priceText=self:AddComponent(UIText,price_num_text_path);
    self.nextPriceText=self:AddComponent(UIText,next_num_text_path);
    self.closeBtn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_Cancel")
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIShopBuyItem); end)
    self.maskBtn=self:AddComponent(UIButton,mask_btn_path);
    self.maskBtn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_Cancel")
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIShopBuyItem);
    end)
    self.buyBtn:SetOnClick(function() BuyItem(self) end);
    self.sliderObj=self:AddComponent(UISlider,slider_path);
    self.sliderObj:SetOnValueChange(self,OnSliderValueChange);
    self.limit_text=self:AddComponent(UIText,limit_count_path);
    self.recommandObj=UIUtil.FindTrans(self.transform,recommand_obj_path);
    self.discountObj=UIUtil.FindTrans(self.transform,discount_obj_path);
    self.disText=self:AddComponent(UIText,discount_text_path);
    self.costIcon=self:AddComponent(UIImage,cost_item_icon_path,AtlasConfig.DynamicTex);
    self.buyItemIcon=self:AddComponent(UIImage,buy_item_icon_path,AtlasConfig.DynamicTex);
    self.nextItemIcon=self:AddComponent(UIImage,next_item_icon_path,AtlasConfig.DynamicTex);
    self.desText=self:AddComponent(UIText,item_des_path);
    self.numText=self:AddComponent(UIText,item_num_path);
    self.bgObj = UIUtil.FindTrans(self.transform,"panel/bg/bg (7)")
    self.addBtn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        AddOrReduceBuyNum(self,1) end)
    self.reduceBtn:SetOnClick(function()
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
        AddOrReduceBuyNum(self,0) end)
end

--获取价格
local function GetCurPriceBySelltypeAndBuyTimes(self,selfType,buyTimes,price)
    local finalPrice=0;
    if selfType==0 then
        finalPrice=price[1];
    else
        finalPrice=buyTimes>#price and price[buyTimes] or price[#price];
    end
    return finalPrice;
end


local function OnEnable(self)
    base.OnEnable(self);
    self:SetData()
end
local function SetData(self)
    if self.model.singleGoodsData==nil then
        return;
    end

    self.goodsId=self.model.singleGoodsData.id;
    self.buyItemIcon:SetSpriteName(self.model.singleGoodsData.icon);
    self.icon:SetSpriteName(self.model.singleGoodsData.icon);
    self.itemFrame:SetSpriteName(self.model.singleGoodsData.itemFrame);
    self.itemName:SetText(self.model.singleGoodsData.goodsName);
    self.numText:SetText(self.model.singleGoodsData.xlsxData.Good.Val);
    self.buyNumText:SetText(1);
    --设置限制次数文本显示
    local xlsxData=self.model.singleGoodsData.xlsxData;
    self.xlsxData=xlsxData;
    self.desText:SetText(self.model.singleGoodsData.desStr);
    self.limit_text.gameObject:SetActive(xlsxData.LimitType~=0);
    self.bgObj.gameObject:SetActive(xlsxData.LimitType~=0)
    self.isCheckSliderValueChange=true;
    local tipStr="";
    if xlsxData.LimitType==2 then
        tipStr=DataUtil.GetClientText(100007);
    elseif xlsxData.LimitType==3 then
        tipStr=DataUtil.GetClientText(100008);
    elseif xlsxData.LimitType==4 then
        tipStr=DataUtil.GetClientText(100009);
    end
    self.todayBuyCount=0;
    local haveCoin=BackpackData:GetInstance():GetItemNumById(self.model.singleGoodsData.costId);
    local curleftCount= xlsxData.LimitType==0 and 999 or xlsxData.LimitNum;
    local canBuyNum=GetCurCoinCanByNum(self,haveCoin);
    self.leftCount=canBuyNum==0 and 1 or math.min(curleftCount,canBuyNum);
    self.limit_text:SetText(string.format(DataUtil.GetClientText(100010),tipStr,math.modf(curleftCount)));
    --self.tagObj.gameObject:SetActive(self.model.singleGoodsData.SellType==1);
    if (self.model.singleGoodsData.serverGoodsData) then
        local curleftCount=xlsxData.LimitType==0 and 999 or self.model.singleGoodsData.serverGoodsData[2];
        self.todayBuyCount=self.model.singleGoodsData.serverGoodsData[1];
        self.leftCount=canBuyNum==0 and 1 or math.min(curleftCount,canBuyNum);
        self.limit_text:SetText(string.format(DataUtil.GetClientText(100010),tipStr,math.modf(curleftCount)));
    end
    --设置价格
    local curPrice=GetCurPriceBySelltypeAndBuyTimes(self,xlsxData.SellType,self.todayBuyCount,xlsxData.Price);
    local discountNum=curPrice/xlsxData.Cost;
    self.discountObj.gameObject:SetActive(false);
    --self.disText:SetText(string.format(DataUtil.GetClientText(100011),discountNum*10));

    self.recommandObj.gameObject:SetActive(xlsxData.Recommend==1);
    self.costIcon:SetSpriteName(self.model.singleGoodsData.costIcon);
    self.nextItemIcon:SetSpriteName(self.model.singleGoodsData.costIcon);
    self.buyNum=1;

    CalculateNeedCoinByNum(self,1);

end
local function OnAddListener(self)
    base.OnAddListener(self)
    -- UI消息注册
    self:AddUIListener(UIMessageNames.UISHOP_BUY_UPDATE, SetData)

end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    -- UI消息注销
    self:RemoveUIListener(UIMessageNames.UISHOP_BUY_UPDATE, SetData)

end
UIShopBuyItemView.OnAddListener = OnAddListener
UIShopBuyItemView.OnRemoveListener = OnRemoveListener
UIShopBuyItemView.OnCreate = OnCreate;
UIShopBuyItemView.OnEnable=OnEnable;
UIShopBuyItemView.SetData =SetData
return UIShopBuyItemView;