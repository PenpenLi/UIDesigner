---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LJ095.
--- DateTime: 2018/11/27 11:09
---
local SubShopData = {
    id = -1,
    subShopName = "",--分签商店名字
    xlsxData={},
    open = false,--是否开启
    itemList={},--物品列表
}
local SingleItemData={
    id=-1,
    goodsxlsxData=0,--数据库数据
    isCanBuy=0,--是否可以购买
    isDiscount=0,--是否打折
    isForeverLimitCount=0,--是否永久限制次数
    cellOutState=0,--不可购买状态
}
local ShopUIData={
    id=-1,
    shopName="",--商店名字
    xlsxData={},
    subShopList={},--分签商店列表
}

local UIShopMainModel = BaseClass("UIShopMainModel", UIBaseModel);
local base = UIBaseModel;
local ShopDataModel = DataClass("ShopDataModel",ShopUIData);
local SubShopDataModel = DataClass("SubShopDataModel",SubShopData);
local SingleItemDataModel=DataClass("SingleItemDataModel",SingleItemData);
-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    -- 窗口生命周期内保持的成员变量放这
    local GlobalData=DataUtil.GetData("global");
    self.lingshiShopTagId=0;
    for i, v in pairs(GlobalData) do
        if v.Key=="ZuanShiShangDian" then
            self.lingshiShopTagId=v.valueN;
        end
    end

    self.curOpenShopId=1;
    self.curOpenSubShopId=1;
    self.shopList={};--商店列表
    self.subShopList={};--分签商店列表
    local shopXlsxData =  DataUtil.GetData("shop");
    self.shopListIndex={};
    for i, singlShopXlsx in ipairs(shopXlsxData) do
        if singlShopXlsx.IsShow then
            local newShopData= ShopDataModel.New();
            newShopData.id= i
            newShopData.shopName=singlShopXlsx.Name;
            newShopData.xlsxData=singlShopXlsx;
            newShopData.subShopList={};
            table.insert(self.shopList,newShopData);
        end
    end
    for i, v in ipairs(self.shopList) do
        self.shopListIndex[v.id]=i;
    end
    --添加分签数据
    local subShopXlsxData =  DataUtil.GetData("shop_tag");
    self.subShopListIndex = {}


    for i, singSubShopXlsx in pairs(subShopXlsxData) do
        local shopId=singSubShopXlsx.ShopId;
        if self.shopListIndex[shopId]~=nil then
            local subShopData=SubShopDataModel.New();
            subShopData.id=i;
            subShopData.subShopName=singSubShopXlsx.TagName;
            subShopData.xlsxData=singSubShopXlsx;
            local shopIndex=self.shopListIndex[shopId];
            table.insert(self.shopList[shopIndex].subShopList,subShopData)
            table.insert(self.subShopList,subShopData);
            self.subShopListIndex[subShopData.id]=#self.subShopList
        end
    end
    --商店的子分签商店排序
    for i, v in ipairs(self.shopList) do
        table.sort(v.subShopList,function(a,b) return a.id<b.id  end);
    end

    local shopGoodsXlsxData=DataUtil.GetData("shop_goods");
    for i, singShopGoodsXlsx in pairs(shopGoodsXlsxData) do
        if singShopGoodsXlsx.IfOpen==1 then
            local subShopId=singShopGoodsXlsx.ShopId;

            if self.subShopListIndex[subShopId]~=nil then
                local singleItem=SingleItemDataModel.New();
                local subIndex=self.subShopListIndex[subShopId];
                singleItem.goodsxlsxData=singShopGoodsXlsx;
                singleItem.id = i
                table.insert(self.subShopList[subIndex].itemList,singleItem);
            end
        end
    end
end
--获取货币信息
local function GetCoinData(self)
    local backPack =  BackpackData:GetInstance()
    self.stamina = backPack:GetItemNumById(CoinDefine.Stamina)
    self.gold = backPack:GetItemNumById(CoinDefine.Gold)
    self.gem = backPack:GetItemNumById(CoinDefine.Diamond)
end

--获取价格
local function GetCurPriceBySelltypeAndBuyTimes(self,sellType,buyTimes,price)
    local finalPrice=0;
    if sellType==0 then
        finalPrice=price[1];
    else
        finalPrice=buyTimes>#price and price[#price] or price[buyTimes];
    end
    return finalPrice;
end

--刷新商店商品列表
local function RefreshShopGoodsList(self)
    for i, v in ipairs(self.subShopList) do
        for a, b in ipairs(v.itemList) do
            local leftCanBuyCount=b.goodsxlsxData.LimitType==0 and 999 or b.goodsxlsxData.LimitNum;
            local todayBuyCount=0;
            if self.serverData[b.id]~=nil then
                leftCanBuyCount=b.goodsxlsxData.LimitType==0 and 999 or self.serverData[b.id][2];
                todayBuyCount=self.serverData[b.id][1];
            end
            b.isCanBuy=leftCanBuyCount>0 and 1 or 0;
            print("当前商店的货物id",b.id);
            local curPrice=GetCurPriceBySelltypeAndBuyTimes(self,b.goodsxlsxData.SellType,todayBuyCount+1,b.goodsxlsxData.Price);
            local discountNum=curPrice/b.goodsxlsxData.Cost;
            b.cellOutState=0;
            if leftCanBuyCount==0 and b.goodsxlsxData.LimitType==1 then
                b.cellOutState=1;
            elseif leftCanBuyCount==0 and b.goodsxlsxData.LimitType>1 then
                b.cellOutState=2;
            end
            b.isDiscount=discountNum<1 and 1 or 0;
            b.isForeverLimitCount=b.goodsxlsxData.LimitType==1 and 1 or 0;
        end
    end
end

--排序商店物品列表
local function SortGoodsList(self)
    for i, v in ipairs(self.subShopList) do
        table.sort(v.itemList,function(a,b)
            local r;
            if a.isCanBuy==b.isCanBuy then
                if a.cellOutState==b.cellOutState then
                    if a.goodsxlsxData.Recommend==b.goodsxlsxData.Recommend then
                        if a.isForeverLimitCount==b.isForeverLimitCount then
                            if a.isDiscount==b.isDiscount then
                                if a.goodsxlsxData.LimitType==b.goodsxlsxData.LimitType then
                                    r=a.id<b.id;
                                else
                                    r=a.goodsxlsxData.LimitType>b.goodsxlsxData.LimitType;
                                end
                            else
                                r=a.isDiscount>b.isDiscount;
                            end
                        else
                            r=a.isForeverLimitCount>b.isForeverLimitCount;
                        end
                    else
                        r=a.goodsxlsxData.Recommend>b.goodsxlsxData.Recommend;
                    end
                else
                    r=a.cellOutState>b.cellOutState
                end
            else
                r=a.isCanBuy>b.isCanBuy;
            end
            return r;
        end);
    end
end

--获取服务器数据并排序商店列表
local function GetServerDataAndSortGoodsList(self)
    self.serverData= ShopData:GetInstance():GetAllShopInfo();
    RefreshShopGoodsList(self);
    SortGoodsList(self);
end

local function OnEnable(self,_shopId,_subShopId)
    if _shopId~=nil and _shopId~=0 then
        self.curOpenShopId=_shopId;
    end
    if _subShopId~=nil and _subShopId~=0 then
        self.curOpenSubShopId=_subShopId;
    end
    GetCoinData(self);
    GetServerDataAndSortGoodsList(self);
end

--获取商店休息
local function GetShopInfo(self)
    GetServerDataAndSortGoodsList(self)
    self:UIBroadcast(UIMessageNames.UISHOP_REFRESH_ITEM)
end

local function UpdateStamina(self,val)
    GetCoinData(self)
    self:UIBroadcast(UIMessageNames.UIMAINCITY_STAMINA_UPDATE)
end

local function OnAddListener(self)
    self:AddDataListener(DataMessageNames.ON_SHOP_INFO_END, GetShopInfo)
    self:AddDataListener(DataMessageNames.ON_ITEM_CHANGE, UpdateStamina);
end
local function OnRemoveListener(self)
    self:RemoveDataListener(DataMessageNames.ON_SHOP_INFO_END, GetShopInfo)
    self:RemoveDataListener(DataMessageNames.ON_ITEM_CHANGE, UpdateStamina)
end

UIShopMainModel.OnCreate = OnCreate
UIShopMainModel.OnEnable=OnEnable;
UIShopMainModel.OnAddListener=OnAddListener;
UIShopMainModel.OnRemoveListener=OnRemoveListener;
return UIShopMainModel