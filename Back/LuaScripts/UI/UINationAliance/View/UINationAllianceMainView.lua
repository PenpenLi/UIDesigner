---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LJ095.
--- DateTime: 2019/4/26 11:34
---
local UINationAllianceMemberPanel = require "UI.UINationAliance.Component.UINationAllianceMemberPanel"
local UINationAllianceMyMessagePanel = require "UI.UINationAliance.Component.UINationAllianceMyMessagePanel"
local UINationAllianceManagerPanel = require "UI.UINationAliance.Component.UINationAllianceManagerPanel"
local UINationAllianceOccupyPanel = require "UI.UINationAliance.Component.UINationAllianceOccupyPanel"
local UINationAllianceLogPanel = require "UI.UINationAliance.Component.UINationAllianceLogPanel"

local UINationAllianceMainView = BaseClass("UINationAllianceListView", UIBaseView)
local base = UIBaseView

local resource_bar_parent_path = "resourceBarParent"
local right_btn_path = "LeftButtonList"

-- 页签界面刷新
local function __OnNationUnionUserUnionTabDataFlush(self)
    if self.model.unionId == 0 then
        self.ctrl:ExitNationUnionLogic()
    else
        if self.model.tabIndex == self.model.MAIN_FUNC_INDEX.MY_UNION_INFO then
            self.allLayoutList[self.model.MAIN_FUNC_INDEX.MY_UNION_INFO].script:__FlushMyNationMessageLayout()
        elseif self.model.tabIndex == self.model.MAIN_FUNC_INDEX.MEMBER_LIST then
            self.allLayoutList[self.model.MAIN_FUNC_INDEX.MEMBER_LIST].script:OnRefresh()
        end
    end
end

local function OnCreate(self)
    base.OnCreate(self)


    --MY_UNION_INFO = 1, --我的联盟信息
    --MEMBER_LIST = 2, --成员列表
    --MANAGER_TAB = 3, -- 管理页签
    --CAPTURE_TAB = 4, -- 占领页签
    --NOTE_LIST = 5, -- 日志页签

    self.layoutParentRoot = UIUtil.FindTrans(self.transform, "ParentRoot")

    --存放所有已经加载的页签
    self.allLayoutList = {}
    --存放页签预设位置容器
    self.UIPrefabSonPath = {}
    --存放页签脚本容器
    self.UIPrefabScript = {}

    self.UIPrefabScript[self.model.MAIN_FUNC_INDEX.MY_UNION_INFO] = UINationAllianceMyMessagePanel
    self.UIPrefabSonPath[self.model.MAIN_FUNC_INDEX.MY_UNION_INFO] = "UI/Prefabs/View/UINationAllianceMainMessageLayout.prefab"
    self.UIPrefabScript[self.model.MAIN_FUNC_INDEX.MEMBER_LIST] = UINationAllianceMemberPanel
    self.UIPrefabSonPath[self.model.MAIN_FUNC_INDEX.MEMBER_LIST] = "UI/Prefabs/View/UINationAllianceMainMemberLayout.prefab"
    self.UIPrefabScript[self.model.MAIN_FUNC_INDEX.MANAGER_TAB] = UINationAllianceManagerPanel
    self.UIPrefabSonPath[self.model.MAIN_FUNC_INDEX.MANAGER_TAB] = "UI/Prefabs/View/UINationAllianceMainManagerLayout.prefab"
    self.UIPrefabScript[self.model.MAIN_FUNC_INDEX.CAPTURE_TAB] = UINationAllianceOccupyPanel
    self.UIPrefabSonPath[self.model.MAIN_FUNC_INDEX.CAPTURE_TAB] = "UI/Prefabs/View/UINationAllianceMainAreaLayout.prefab"
    self.UIPrefabScript[self.model.MAIN_FUNC_INDEX.NOTE_LIST] = UINationAllianceLogPanel
    self.UIPrefabSonPath[self.model.MAIN_FUNC_INDEX.NOTE_LIST] = "UI/Prefabs/View/UINationAllianceMainLogManager.prefab"

    self.TitleBar = UIUtil.FindTrans(self.transform, "TopLeft")
    UIUtil.CreatCloseBtnComponent(self, self.TitleBar.transform, function(go)
        self.closeComponent = go
    end, function()
        self.ctrl:CloseSelf()
    end, function()
        self.ctrl:CloseSelf()
    end, DataUtil.GetClientText(200055), false, 0, true)

    self.resourceBarParent = UIUtil.FindTrans(self.transform, resource_bar_parent_path)
    ResourceBarComponentManager:GetInstance():CreatResourceBarComponent(self.resourceBarParent, UIWindowNames.UINationAllianceMain, ResourceBarType.NATION_MAIN, self)

    --左侧按钮
    self.leftBtnParent = self:AddComponent(UIBaseContainer, right_btn_path)
    self.allRightBtnList = {};
    local count = self.leftBtnParent.transform.childCount;
    for i = 1, count do
        local tempBtn = self.leftBtnParent:AddComponent(UIButton, i - 1)
        tempBtn:AddComponent(UIBaseContainer, "")
        tempBtn:SetOnClick(function()
            self.ctrl:tempBtnClick(i)
        end)
        local tempBtnText = tempBtn:AddComponent(UIText, "Text")
        local redPointTran = UIUtil.FindTrans(tempBtn.transform, "redpoint");
        local btnData = { btn = tempBtn, btnName = tempBtnText }
        if not IsNull(redPointTran) then
            btnData.redPoint = redPointTran
        end
        table.insert(self.allRightBtnList, btnData);
    end
    self.selectBtnTrans = UIUtil.FindTrans(self.transform, "SelectBtn")
    self.selectBtnText = self:AddComponent(UIText, "SelectBtn/SelectText")
end

local function OnEnable(self)
    base.OnEnable(self)
    --第一次初始化
    self:__SetViewTabChange(self.model.tabIndex)
    self:__OnRedPointChangedEvent()
end

--通过事件，切换页签
local function OnNationUnionTabsResSwitchEvent(self, __lastSelectIndex, sendParams)
    self:__SetViewTabChange(__lastSelectIndex, sendParams)
end

--动态加载页签
local function InitLayoutView(self, index, __lastSelectIndex, sendParams)
    GameObjectPool:GetInstance():GetGameObjectAsync(self.UIPrefabSonPath[index], function(go)
        if not IsNull(go) then
            go.transform:SetParent(self.layoutParentRoot)
            local commonBtnObj = self.UIPrefabScript[index].New(self, go)
            commonBtnObj:OnCreate(self)
            self.allLayoutList[index] = { id = index, obj = go, script = commonBtnObj, path = self.UIPrefabSonPath[index] }
            local rectTrans = UIUtil.FindComponent(commonBtnObj.transform, typeof(CS.UnityEngine.RectTransform))
            rectTrans.localScale = Vector3.New(1, 1, 1)
            rectTrans.anchoredPosition3D = Vector3.New(0, 0, 0)

            --刷新脚本
            commonBtnObj:SetActive(true)
            if commonBtnObj.__OnTabTargetByIndex ~= nil then
                commonBtnObj:__OnTabTargetByIndex(__lastSelectIndex, sendParams)
            end
        end
    end)
end

--切换页签
local function __SetViewTabChange(self, __lastSelectIndex, sendParams)
    local tabIndex = self.model.tabIndex

    for i, v in pairs(self.allLayoutList) do
        if v ~= nil then
            if v.id ~= tabIndex and v.script:GetActive() then
                v.script:SetActive(false)
            elseif v.id == tabIndex and v.script:GetActive() == false then
                v.script:SetActive(true)
            end
            --当页签切换到目标的时候 targetIndex目标页签 __lastSelectIndex上一次的页签 force 是否有事件， 只有管理页签用了
            if v.script.__OnTabTargetByIndex ~= nil then
                v.script:__OnTabTargetByIndex(__lastSelectIndex, sendParams)
            end
        end
    end

    if self.allLayoutList[tabIndex] == nil then
        InitLayoutView(self, tabIndex, __lastSelectIndex, sendParams)
    end
    local btnData = self.allRightBtnList[tabIndex]
    self.selectBtnTrans:SetParent(btnData.btn.transform)
    self.selectBtnTrans.localPosition = Vector3.zero
    self.selectBtnText:SetText(btnData.btnName:GetText())
    if not IsNull(btnData.redPoint) then
        btnData.redPoint:SetAsLastSibling()
    end
end

----释放当前页签资源 index页签  force 是否有事件
--local function __TabClearByIndex(self, __lastSelectIndex, sendParams)
--    for k, v in pairs(self.allLayoutList) do
--        if v.script.__OnTabClearByIndex ~= nil then
--            v.script:__OnTabClearByIndex(__lastSelectIndex, sendParams)
--        end
--    end
--end

----当页签切换到目标的时候 targetIndex目标页签 __lastSelectIndex上一次的页签 force 是否有事件
--local function __TabTargetByIndex(self, __lastSelectIndex, sendParams)
--    for k, v in pairs(self.allLayoutList) do
--        if v.script.__OnTabTargetByIndex ~= nil then
--            v.script:__OnTabTargetByIndex(__lastSelectIndex, sendParams)
--        end
--    end
--end
--红点刷新
local function __OnRedPointChangedEvent(self)
    self.allRightBtnList[self.model.MAIN_FUNC_INDEX.MANAGER_TAB].redPoint.gameObject:SetActive(
            RedPointData:GetInstance():GetRedState(
                    RedPointData:GetInstance().RedName.Nation_Union_Apply_Red))
end

local function OnAddListener(self)
    base.OnAddListener(self)
    -- UI消息注册
    --self:AddUIListener(UIMessageNames.UI_NATION_UNION_USER_UNION_TAB_DATA_FLUSH, self.__OnNationUnionUserUnionTabDataFlush)
    self:AddUIListener(UIMessageNames.UI_NATION_UNION_MY_UNION_TABS_RES_SWITCH, self.OnNationUnionTabsResSwitchEvent)
    self:AddUIListener(UIMessageNames.UI_NATION_UNION_JOIN_UNION_LIST_USER_UNION_FLUSH, self.__OnNationUnionUserUnionTabDataFlush)
    self:AddUIListener(UIMessageNames.ON_RED_POINT_CHANGE, self.__OnRedPointChangedEvent)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    -- UI消息注销
    --self:RemoveUIListener(UIMessageNames.UI_NATION_UNION_USER_UNION_TAB_DATA_FLUSH, self.__OnNationUnionUserUnionTabDataFlush)
    self:RemoveUIListener(UIMessageNames.UI_NATION_UNION_MY_UNION_TABS_RES_SWITCH, self.OnNationUnionTabsResSwitchEvent)
    self:RemoveUIListener(UIMessageNames.UI_NATION_UNION_JOIN_UNION_LIST_USER_UNION_FLUSH, self.__OnNationUnionUserUnionTabDataFlush)
    self:RemoveUIListener(UIMessageNames.ON_RED_POINT_CHANGE, self.__OnRedPointChangedEvent)
end

local function OnDisable(self)
    base.OnDisable(self)

    if self.allLayoutList ~= nil then
        for i, v in pairs(self.allLayoutList) do
            if v.script:GetActive() then
                v.script:SetActive(false)
            end
        end
    end
end

local function OnDestroy(self)
    -- 销毁
    base.OnDestroy(self)

    if self.closeComponent ~= nil or not IsNull(self.closeComponent) then
        self.closeComponent:RecyleSelf()
    end
    ResourceBarComponentManager:GetInstance():DestroyResourceBar(UIWindowNames.UINationAllianceMain)

    --回收页签
    if self.allLayoutList ~= nil then
        for i, v in pairs(self.allLayoutList) do
            if not IsNull(v.obj) then
                v.script:OnDestroy()
            end
        end
    end
    if self.allLayoutList ~= nil then
        for i, v in pairs(self.allLayoutList) do
            if not IsNull(v.obj) then
                GameObjectPool:GetInstance():RecycleGameObject(v.path, v.obj)
            end
        end
    end
end

--UINationAllianceMainView.__TabTargetByIndex = __TabTargetByIndex
UINationAllianceMainView.__SetViewTabChange = __SetViewTabChange
UINationAllianceMainView.OnNationUnionTabsResSwitchEvent = OnNationUnionTabsResSwitchEvent
UINationAllianceMainView.__OnNationUnionUserUnionTabDataFlush = __OnNationUnionUserUnionTabDataFlush

UINationAllianceMainView.OnCreate = OnCreate
UINationAllianceMainView.OnEnable = OnEnable
UINationAllianceMainView.OnDisable = OnDisable
UINationAllianceMainView.OnDestroy = OnDestroy
UINationAllianceMainView.OnAddListener = OnAddListener
UINationAllianceMainView.OnRemoveListener = OnRemoveListener
UINationAllianceMainView.__OnRedPointChangedEvent = __OnRedPointChangedEvent
return UINationAllianceMainView