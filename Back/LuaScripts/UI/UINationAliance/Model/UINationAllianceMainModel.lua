---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LJ095.
--- DateTime: 2019/4/26 11:38
---


local UINationAllianceMainModel = BaseClass("UINationAllianceMainModel", UIBaseModel)
local base = UIBaseModel

local ItemInfo = DataUtil.GetData("item")

--local SingleMemberData=
--{
--    headIcon="",--头像
--    headFrame="",--头像框
--    memberName="",--成员名字q
--    totalContribute=0,--总贡献
--    weekContribute=0,--本周贡献
--    weekExploit=0,--本周功勋
--    belongsArea="",--所属域
--    shiliValue=0,--势力值
--    pos="",--职位
--
--}
--local SingleMemberDataModel = DataClass("SubShopDataModel",SingleMemberData);

-- 我的联盟功能索引
local MAIN_FUNC_INDEX = {
    MY_UNION_INFO = 1, --我的联盟信息
    MEMBER_LIST = 2, --成员列表
    MANAGER_TAB = 3, -- 管理页签
    CAPTURE_TAB = 4, -- 占领页签
    NOTE_LIST = 5, -- 日志页签
}

-- 我的联盟二级功能索引
local SUB_FUNC_INDEX = {

}

-- 联盟管理二级功能索引
local SUB_MANAGER_TAB_FUNC_INDEX = {
    APPLY_MANAGE = 1, --申请管理
    INVITE_MANAGE = 2, -- 邀请管理
}

-- 联盟管理刷新界面类型
local SUB_MANAGER_TAB_SWITCH_TYPE = {
    BY_TAB = 1, -- tab切换模式
    BY_DATA = 2, -- 数据刷新模式
}

--联盟日志类型枚举
local EnumLogType = {
    Event = 1, --事件
    Battle = 2, --战斗
}

-- 联盟管理刷新界面类型
local SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS = {
    NO_ACCPET = 1, -- 未操作
    AGREE = 2, -- 已同意
    REFUSE = 3, -- 已拒绝
}

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self.RES_ID = {
        NationDefine.ITEM_WOOD_ID,
        NationDefine.ITEM_IRON_ID,
        NationDefine.ITEM_STONE_ID,
        NationDefine.ITEM_FOOD_ID,
    }

    local itemXlsx = DataUtil.GetData("item")
    self.RES_ADD_NAME = {}

    for i, v in ipairs(self.RES_ID) do
        table.insert(self.RES_ADD_NAME, { resId = v, itemData = itemXlsx[v] })
    end
end

local function __FirstInit(self)
    local national_alliance_VarCfgs = NationMapInfoData:GetInstance().national_alliance_VarCfgs
    self.NoticeLimit = math.modf(national_alliance_VarCfgs.NoticeLimit) -- 联盟公告长度限制

    --self.mainFuncIndex = self.MAIN_FUNC_INDEX.MY_UNION_INFO -- 默认是我的联盟界面

    --加入联盟
    --self.alianceTable={};
    --self.alianceList={};
    self:__UpdateMyNationUnionData()

    self.subFuncIndex = 0
    --self.tabIndex=self.dyMainTabIndexs[0]-- 默认是我的联盟界面
    self.tabIndex = self.MAIN_FUNC_INDEX.MY_UNION_INFO-- 默认是我的联盟界面

    self.logList = {}
end

local function __UpdateMyNationUnionData(self)
    local unionId, dataMyNation, myMember = NationUnionData:GetInstance():GetPlayerNationUnionData()

    self.unionId = unionId
    if self.unionId ~= 0 then
        self.myNationUnion = NationUnionData:GetInstance().UtilCreateNationUnionData(dataMyNation)
        self.myUnionMember = NationUnionData:GetInstance().UtilCreateNationMemberData(myMember)
        self.myNationAddition = {}
        local addVal = 0
        local intVal, floatVal = math.modf(self.myNationUnion.currentNationalUnionLevelData.SourceAdd * 100)
        if floatVal ~= 0 then
            addVal = intVal + floatVal
        else
            addVal = intVal
        end

        --联盟等级的资源加成
        for i, v in ipairs(self.RES_ADD_NAME) do
            local resFormat = floatVal == 0 and
                    string.format(DataUtil.GetClientText(200239), v.itemData.Name, addVal) or
                    string.format(DataUtil.GetClientText(200230), v.itemData.Name, addVal)
            table.insert(self.myNationAddition, { resId = v.resId, content = resFormat, resIcon = v.itemData.Icon })
        end

        --占领城池的属性加成
        self.occupyBuff = {}
        local itemInfo = nil
        for k, v in pairs(NationUnionData:GetInstance().occupyBuff) do
            if v > 0 then
                itemInfo = ItemInfo[k]
                local temp = {}
                temp.name = itemInfo.Name
                temp.resImage = itemInfo.Icon
                temp.value = v
                table.insert(self.occupyBuff, temp)
            end
        end

        --是否有管理页签
        self.hasManagerSetLimit = self.myUnionMember.positionData.SetLimit == 1 -- 设置申请条件
        self.hasHandleApply = self.myUnionMember.positionData.HandleApply == 1 -- 处理申请
        self.hasInviteMember = self.myUnionMember.positionData.InviteMember == 1 -- 邀请
        self.hasAllMembersMail = self.myUnionMember.positionData.AllMembersMail == 1 -- 全体邮件
        self.hasManagerBtn = self.hasManagerSetLimit or self.hasHandleApply or self.hasInviteMember

        --判断是否有管理大页签
        if self.hasManagerBtn then
            self.dyMainTabIndexs = {
                self.MAIN_FUNC_INDEX.MY_UNION_INFO,
                self.MAIN_FUNC_INDEX.MEMBER_LIST,
                self.MAIN_FUNC_INDEX.MANAGER_TAB,
                self.MAIN_FUNC_INDEX.CAPTURE_TAB,
                self.MAIN_FUNC_INDEX.NOTE_LIST,
            }
        else
            self.dyMainTabIndexs = {
                self.MAIN_FUNC_INDEX.MY_UNION_INFO,
                self.MAIN_FUNC_INDEX.MEMBER_LIST,
                self.MAIN_FUNC_INDEX.CAPTURE_TAB,
                self.MAIN_FUNC_INDEX.NOTE_LIST,
            }
        end

        --判断是否含有管理页签内的，二级功能页签
        self.subManagerTabIndexs = {}
        if self.hasHandleApply then
            table.insert(self.subManagerTabIndexs, self.SUB_MANAGER_TAB_FUNC_INDEX.APPLY_MANAGE)
        end
        if self.hasInviteMember then
            table.insert(self.subManagerTabIndexs, self.SUB_MANAGER_TAB_FUNC_INDEX.INVITE_MANAGE)
        end
    else
        --没有联盟数据
        self.myNationUnion = {}
        self.myUnionMember = {}
        self.myNationAddition = {}
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self:__FirstInit()

    ----信息
end

--处理日志链接攻城排行榜
local function OnDataMsgHandleRankData(self, msgObj)
    self.logRankKillList = {}
    self.logRankBreakList = {}
    for _, v in ipairs(msgObj.killEvent) do
        local temp = {}
        temp.rank = math.modf(tonumber(v.rank))
        temp.name = v.name
        temp.score = math.modf(v.score)

        table.insert(self.logRankKillList, temp)
    end

    for _, v in ipairs(msgObj.breakEvent) do
        local temp = {}
        temp.rank = math.modf(tonumber(v.rank))
        temp.name = v.name
        temp.score = math.modf(v.score)

        table.insert(self.logRankBreakList, temp)
    end

    UIManager:GetInstance():Broadcast(UIMessageNames.UI_NATION_UNION_LOG_RANK_REFRESH)
end

--处理联盟日志的时间
local function HandleAliianceLogsTime(self, msgObj)
    self.logList = {}
    if msgObj.event == nil then
        return
    end

    local curDay = 99999
    local curItemDay = 0
    local curItemHMS_stamp = 0
    --服务器传的list，排序是时间戳从大到小
    for _, v in ipairs(msgObj.event) do
        local temp = {}
        temp.severStampID = v.time
        temp.timeStamp = math.modf(tonumber(v.time) / 1000)
        temp.timeStamp = temp.timeStamp + 28800
        curItemDay, curItemHMS_stamp = math.modf(temp.timeStamp / 86400)
        curItemHMS_stamp = curItemHMS_stamp * 86400

        if v.buildingId ~= 0 then
            temp.buildID = v.buildingId
            temp.content = v.content .. "<a href=openSiegeRank>" .. DataUtil.GetClientText(200238) .. "</a>"
        else
            temp.content = v.content
        end

        temp.timeText = UIUtil.GetFinialTime(curItemHMS_stamp)

        if curDay > curItemDay then
            curDay = curItemDay
            local temp1 = {}
            temp1.date = os.date(DataUtil.GetClientText(200237), temp.timeStamp)
            temp1.timeStamp = temp.timeStamp - curItemHMS_stamp + 86400
            temp1.isDate = true
            table.insert(self.logList, temp1)
        end

        table.insert(self.logList, temp)
    end

    table.sort(self.logList, function(a, b)
        return a.timeStamp > b.timeStamp
    end)
end

-- 某个tab切换目标（切换大页签）
local function __OnNationUnionMyUnionTabsResSwitch (self, tabIndex, packages)
    local lastIndex = self.tabIndex
    if lastIndex == self.MAIN_FUNC_INDEX.MY_UNION_INFO then

    elseif lastIndex == self.MAIN_FUNC_INDEX.MEMBER_LIST then

    elseif lastIndex == self.MAIN_FUNC_INDEX.MANAGER_TAB then
        self.managerDataMemberList = nil
        self.managerDataMemberTable = nil
        self.inviteManagePageIndex = 0
    elseif lastIndex == self.MAIN_FUNC_INDEX.CAPTURE_TAB then

    else

    end

    local sendParam = nil
    if tabIndex == self.MAIN_FUNC_INDEX.MY_UNION_INFO then
        --联盟信息界面
        self:__UpdateMyNationUnionData()
    elseif tabIndex == self.MAIN_FUNC_INDEX.MEMBER_LIST then
        self.members = {}
        if packages.member == nil or packages.member._is_null then

        else
            for k, v in ipairs(packages.member) do
                local member = NationUnionData:GetInstance().UtilCreateNationMemberData(v, nil, true)
                member.contribution = member.contribution < 10000 and DataUtil.GetClientText(200233) .. member.contribution
                        or string.format(DataUtil.GetClientText(200234), (member.contribution / 10000))
                member.contributionWeek = member.contributionWeek < 10000 and DataUtil.GetClientText(200235) .. member.contributionWeek
                        or string.format(DataUtil.GetClientText(200236), (member.contributionWeek / 10000))
                if member.uid == UserData:GetInstance().roleID then
                    member.isMine = true
                    self.localPlayerIndex = k
                else
                    member.isMine = false
                end

                --头像
                member.headIcon = ItemInfo[member.head].Icon
                member.headFrame = SpriteDefine:GetItemQualityFrameByType(ItemInfo[member.head].Quality)
                ----更新盟主的名字
                --if member.position == NationDefine.NATION_UNION_POSITION.LEADER then
                --    local leaderData = {}
                --    leaderData.leaderName = member.name
                --    NationUnionData:GetInstance():UpdateNationUnionLeaderInfo(leaderData, false)
                --end

                table.insert(self.members, member)
            end
        end
        NationUnionData:GetInstance():UpdateMyNationMembersCount(table.length(self.members))

        table.sort(self.members, function(a, b)
            return a.position < b.position
        end)

        --self.myMemberCtrlConfig=DataUtil.GetData("national_alliance").Right[self.myUnionMember.position]
    elseif tabIndex == self.MAIN_FUNC_INDEX.MANAGER_TAB then
        local targetSubTabIndex = packages.targetSubTabIndex
        local switchType = packages.switchType
        local pageIndex = packages.pageIndex
        if targetSubTabIndex == self.SUB_MANAGER_TAB_FUNC_INDEX.APPLY_MANAGE then
            self.subFuncIndex = self.SUB_MANAGER_TAB_FUNC_INDEX.APPLY_MANAGE
        else
            self.subFuncIndex = self.SUB_MANAGER_TAB_FUNC_INDEX.INVITE_MANAGE
            self.inviteManagePageIndex = pageIndex
        end

        if switchType == self.SUB_MANAGER_TAB_SWITCH_TYPE.BY_TAB then
            -- 切换页签
            local data = packages.data
            self.managerDataMemberList = {}
            self.managerDataMemberTable = {}
            if data.member == nil or data.member._is_null then
            else
                for i, v in ipairs(data.member) do
                    local member = NationUnionData:GetInstance().UtilCreateNationMemberData(v, nil, true)
                    if targetSubTabIndex == self.SUB_MANAGER_TAB_FUNC_INDEX.APPLY_MANAGE then
                        member.agreeStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.NO_ACCPET
                    else
                        member.inviteStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.NO_ACCPET
                    end

                    --头像
                    member.headIcon = ItemInfo[member.head].Icon
                    member.headFrame = SpriteDefine:GetItemQualityFrameByType(ItemInfo[member.head].Quality)

                    table.insert(self.managerDataMemberList, member)
                    self.managerDataMemberTable[member.uid] = member
                end
            end
        else
            -- by data update
            local data = packages.data
            if data.member == nil or data.member._is_null then
            else
                for i, v in ipairs(data.member) do
                    local findOne = self.FindTableDataById(self.managerDataMemberTable, data.member.uid)
                    local isCreate = false
                    if findOne == nil then
                        isCreate = true
                    end
                    findOne = NationUnionData:GetInstance().UtilCreateNationMemberData(v, findOne, true)

                    if isCreate then
                        if targetSubTabIndex == self.SUB_MANAGER_TAB_FUNC_INDEX.APPLY_MANAGE then
                            findOne.agreeStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.NO_ACCPET
                        else
                            findOne.inviteStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.NO_ACCPET
                        end
                        table.insert(self.managerDataMemberList, findOne)
                        self.managerDataMemberTable[findOne.id] = findOne
                    end
                end
            end
        end
        sendParam = { switchType = switchType, targetSubTabIndex = targetSubTabIndex }
    elseif tabIndex == self.MAIN_FUNC_INDEX.CAPTURE_TAB then
        --切换到占领页签
        self.holdBuildings = {}
        local buildList = NationUnionData:GetInstance().myNationUnion.occupyBuildList
        if buildList ~= nil then
            for k, v in ipairs(buildList) do
                local item = {}
                local buildInfo = NationMapInfoData:GetInstance():GetNationalMapById(v)
                item.name = buildInfo.Name
                item.des = buildInfo.Des
                item.region = NationMapInfoData:GetInstance():GetNationalAscriptionById(buildInfo.Territory)
                item.posID = buildInfo.BuildId
                table.insert(self.holdBuildings, item)
            end
        end
    elseif tabIndex == self.MAIN_FUNC_INDEX.NOTE_LIST then
        --处理日志数据
        if packages.data.event ~= nil then
            HandleAliianceLogsTime(self, packages.data)
        end
    end
    self.tabIndex = tabIndex
    self:UIBroadcast(UIMessageNames.UI_NATION_UNION_MY_UNION_TABS_RES_SWITCH, lastIndex, sendParam)
end

local function __OnNationUserUnionDataFlush (self)
    self:__UpdateMyNationUnionData()
    UIManager:GetInstance():Broadcast(UIMessageNames.UI_NATION_UNION_JOIN_UNION_LIST_USER_UNION_FLUSH)
end

local function FindTableDataById (datas, id)
    if datas == nil then
        return nil
    end
    return datas[id]
end

local function RemoveTableListDataByUId (tableDatas, listDatas, uid)
    tableDatas[uid] = nil
    if listDatas ~= nil then
        for i, v in ipairs(listDatas) do
            if v.uid == uid then
                table.remove(listDatas, i)
                return
            end
        end
    end
end

local function _OnNationMemberCtrlClick(self, index)
    if self.tabIndex == self.MAIN_FUNC_INDEX.MEMBER_LIST then
        self.memberCtrlIndex = index
        self.ctrlMember = self.members[self.memberCtrlIndex]
        if self.myUnionMember.uid == self.ctrlMember.uid then
            --操作自己
            self.isMine = true
        else
            --操作别人
            self.isMine = false
        end
    else
        Logger.Log("界面逻辑错误")
        return
    end
    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_CTRL_SETBTN_CLICK)
end

local function __OnNationUnionManagerSubAgreeDeal(self, opCode, uid, isAgree)

    local findOne = self.FindTableDataById(self.managerDataMemberTable, uid)
    if findOne == nil then
        self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MANAGER_SUB_TAB_REFLUSH)
        return
    end
    if opCode ~= 0 then
        self.RemoveTableListDataByUId(self.managerDataMemberTable, self.managerDataMemberList, uid)
        self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MANAGER_SUB_TAB_REFLUSH)
        return
    end

    if isAgree then
        findOne.agreeStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.AGREE
    else
        findOne.agreeStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.REFUSE
    end

    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MANAGER_SUB_TAB_REFLUSH)
end

local function __OnNationUnionManagerSubInviteDeal(self, opCode, uid)
    local findOne = self.FindTableDataById(self.managerDataMemberTable, uid)
    if findOne == nil then
        self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MANAGER_SUB_TAB_REFLUSH)
        return
    end

    if opCode ~= 0 then
        self.RemoveTableListDataByUId(self.managerDataMemberTable, self.managerDataMemberList, uid)
    else
        findOne.inviteStatus = self.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS.AGREE
    end
    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MANAGER_SUB_TAB_REFLUSH)
end

local function __OnNationMemberOperateErrorFlushMembers(self, opCode, packages)
    self.members = {}
    if packages.member == nil or packages.member._is_null then

    else
        for k, v in ipairs(packages.member) do
            local member = NationUnionData:GetInstance().UtilCreateNationMemberData(v, nil, true)
            member.contribution = member.contribution < 10000 and DataUtil.GetClientText(200233) .. member.contribution
                    or string.format(DataUtil.GetClientText(200234), (member.contribution / 10000))
            member.contributionWeek = member.contributionWeek < 10000 and DataUtil.GetClientText(200235) .. member.contributionWeek
                    or string.format(DataUtil.GetClientText(200236), (member.contributionWeek / 10000))
            if member.uid == UserData:GetInstance().roleID then
                member.isMine = true
                self.localPlayerIndex = k
            else
                member.isMine = false
            end
            table.insert(self.members, member)
        end
    end
    NationUnionData:GetInstance():UpdateMyNationMembersCount(table.length(self.members))
    table.sort(self.members, function(a, b)
        return a.position < b.position
    end)
    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_SUB_TAB_REFLUSH)
end

--踢出成员
local function _OnTiChuMember(self, opCode, msg, uid)
    if opCode ~= 0 then
        UISpecial:GetInstance():UITipText(msg)
        -- 刷新界面逻辑
        NationNetManager:GetInstance():SendGetUnionMemberListRequest(BindCallback(self, self.__OnNationMemberOperateErrorFlushMembers))
        return
    end

    for i = 1, #self.members do
        if self.members[i].uid == uid then
            table.remove(self.members, i)
            break
        end
    end
    NationUnionData:GetInstance():UpdateMyNationMembersCount(table.length(self.members))
    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_CTRL_TICHU_CLICK)
end
--禅让盟主
local function _OnGrantUnion(self, opCode, msg, uid, name)
    if opCode ~= 0 then
        -- 刷新界面逻辑
        UISpecial:GetInstance():UITipText(msg, 2)
        NationNetManager:GetInstance():SendGetUnionMemberListRequest(BindCallback(self, self.__OnNationMemberOperateErrorFlushMembers))
        return
    end
    --local params = msg_obj.Params
    --if msg_obj.OpCode ~= 0 then
    --    Logger.LogAny(msg_obj.Packages, "禅让失败：ERROR GrantUnionRequest ~~ ； ")
    --    UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
    --    return
    --end
    NationUnionData:GetInstance():UpdateGrantUnion(uid, name)
    local unionId, dataMyNation, myMember = NationUnionData:GetInstance():GetPlayerNationUnionData()
    --self.myUnionMember = NationUnionData:GetInstance().UtilCreateNationMemberData(myMember)
    self:__UpdateMyNationUnionData()
    for i = 1, #self.members do
        if self.members[i].uid == self.myUnionMember.uid then
            self.members[i].position = NationDefine.NATION_UNION_POSITION.MEMBER
            self.members[i].positionData = NationMapInfoData:GetInstance():GetNationalAllianceAuthorityById(self.members[i].position)
        end
        if self.members[i].uid == uid then
            self.members[i].position = NationDefine.NATION_UNION_POSITION.LEADER
            self.members[i].positionData = NationMapInfoData:GetInstance():GetNationalAllianceAuthorityById(self.members[i].position)
        end
    end
    table.sort(self.members, function(a, b)
        return a.position < b.position
    end)
    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_CTRL_GRANT_CLICK)
end

--放弃职位
local function _OnFangQiPosition(self, opCode, msg)
    if opCode ~= 0 then
        -- 刷新界面逻辑
        UISpecial:GetInstance():UITipText(msg)
        NationNetManager:GetInstance():SendGetUnionMemberListRequest(BindCallback(self, self.__OnNationMemberOperateErrorFlushMembers))
        return
    end
    NationUnionData:GetInstance().myMember.position = NationDefine.NATION_UNION_POSITION.MEMBER
    local unionId, dataMyNation, myMember = NationUnionData:GetInstance():GetPlayerNationUnionData()
    self:__UpdateMyNationUnionData()
    for i = 1, #self.members do
        if self.members[i].uid == self.myUnionMember.uid then
            self.members[i].position = NationDefine.NATION_UNION_POSITION.MEMBER
            self.members[i].positionData = NationMapInfoData:GetInstance():GetNationalAllianceAuthorityById(self.members[i].position)
            break
        end
    end
    table.sort(self.members, function(a, b)
        return a.position < b.position
    end)

    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_CTRL_FANGQI_CLICK)
end

--职位任命
local function _OnPositionCtrl(self)

    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_CTRL_POSITION_CLICK)
end

--职位操作
local function _OnPostionManager(self, opCode, msg, uid, position)

    if opCode ~= 0 then
        -- 刷新界面逻辑
        UISpecial:GetInstance():UITipText(msg)
        NationNetManager:GetInstance():SendGetUnionMemberListRequest(BindCallback(self, self.__OnNationMemberOperateErrorFlushMembers))
        return
    end

    for k, v in ipairs(self.members) do
        if v.uid == uid then
            v.position = position
            v.positionData = NationMapInfoData:GetInstance():GetNationalAllianceAuthorityById(v.position)
            break
        end
    end
    self:UIBroadcast(UIMessageNames.ON_NATION_UNION_MEMBER_CTRL_POSITION_MANAGER_CLICK)
end

local function OnDataMsgUpdateAllianceLog(self, msgObj)
    HandleAliianceLogsTime(self, msgObj)
    UIManager:GetInstance():Broadcast(UIMessageNames.UI_NATION_UNION_REFRESH_LOG)
end

-- 监听
local function OnAddListener(self)
    base.OnAddListener(self)

    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MY_UNION_TABS_RES_SWITCH, self.__OnNationUnionMyUnionTabsResSwitch)
    --self:AddDataListener(DataMessageNames.ON_NATION_UNION_MY_UNION_TABS_RES_RESET,self.__OnNationUnionMyUnionTabsResReset)
    self:AddDataListener(DataMessageNames.ON_NATION_USER_UNION_DATA_FLUSH, self.__OnNationUserUnionDataFlush)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_SETBTN_CLICK, _OnNationMemberCtrlClick)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_TICHU_CLICK, _OnTiChuMember)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_GRANT_CLICK, _OnGrantUnion)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_FANGQI_CLICK, _OnFangQiPosition)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_POSITION_CLICK, _OnPositionCtrl)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_POSITION_MANAGER_CLICK, _OnPostionManager)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MANAGER_SUB_AGREE_DEAL, self.__OnNationUnionManagerSubAgreeDeal)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_MANAGER_SUB_INVITE_DEAL, self.__OnNationUnionManagerSubInviteDeal)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_UPDATE_LOG, OnDataMsgUpdateAllianceLog)
    self:AddDataListener(DataMessageNames.ON_NATION_UNION_LOG_RANK_OPEN, OnDataMsgHandleRankData)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)

    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MY_UNION_TABS_RES_SWITCH, self.__OnNationUnionMyUnionTabsResSwitch)
    --self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MY_UNION_TABS_RES_RESET,self.__OnNationUnionMyUnionTabsResReset)
    self:RemoveDataListener(DataMessageNames.ON_NATION_USER_UNION_DATA_FLUSH, self.__OnNationUserUnionDataFlush)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_SETBTN_CLICK, _OnNationMemberCtrlClick)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_TICHU_CLICK, _OnTiChuMember)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_GRANT_CLICK, _OnGrantUnion)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_FANGQI_CLICK, _OnFangQiPosition)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_POSITION_CLICK, _OnPositionCtrl)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MEMBER_CTRL_POSITION_MANAGER_CLICK, _OnPostionManager)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MANAGER_SUB_AGREE_DEAL, self.__OnNationUnionManagerSubAgreeDeal)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_MANAGER_SUB_INVITE_DEAL, self.__OnNationUnionManagerSubInviteDeal)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_UPDATE_LOG, OnDataMsgUpdateAllianceLog)
    self:RemoveDataListener(DataMessageNames.ON_NATION_UNION_LOG_RANK_OPEN, OnDataMsgHandleRankData)
end


-- 关闭
local function OnDisable(self)
    base.OnDisable(self)
    -- 清理成员变量
    self.logList = {}
    self.localPlayerIndex = nil
    self.logRankKillList = nil
    self.logRankBreakList = nil

end

UINationAllianceMainModel.__OnNationUnionManagerSubAgreeDeal = __OnNationUnionManagerSubAgreeDeal
UINationAllianceMainModel.__OnNationUnionManagerSubInviteDeal = __OnNationUnionManagerSubInviteDeal

UINationAllianceMainModel.__OnNationUserUnionDataFlush = __OnNationUserUnionDataFlush
UINationAllianceMainModel.__OnNationUnionMyUnionTabsResSwitch = __OnNationUnionMyUnionTabsResSwitch
--UINationAllianceMainModel.__OnNationUnionMyUnionTabsResReset = __OnNationUnionMyUnionTabsResReset
UINationAllianceMainModel.__OnNationMemberOperateErrorFlushMembers = __OnNationMemberOperateErrorFlushMembers
UINationAllianceMainModel.__FirstInit = __FirstInit
UINationAllianceMainModel.__UpdateMyNationUnionData = __UpdateMyNationUnionData

UINationAllianceMainModel.MAIN_FUNC_INDEX = MAIN_FUNC_INDEX
UINationAllianceMainModel.SUB_FUNC_INDEX = SUB_FUNC_INDEX
UINationAllianceMainModel.SUB_MANAGER_TAB_FUNC_INDEX = SUB_MANAGER_TAB_FUNC_INDEX
UINationAllianceMainModel.SUB_MANAGER_TAB_SWITCH_TYPE = SUB_MANAGER_TAB_SWITCH_TYPE
UINationAllianceMainModel.SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS = SUB_MANAGER_TAB_APPLY_MANAGE_AGREE_STATUS

UINationAllianceMainModel.OnCreate = OnCreate
UINationAllianceMainModel.OnEnable = OnEnable
UINationAllianceMainModel.OnDisable = OnDisable
UINationAllianceMainModel.OnAddListener = OnAddListener
UINationAllianceMainModel.OnRemoveListener = OnRemoveListener
UINationAllianceMainModel.FindTableDataById = FindTableDataById
UINationAllianceMainModel.RemoveTableListDataByUId = RemoveTableListDataByUId
UINationAllianceMainModel.EnumLogType = EnumLogType

return UINationAllianceMainModel