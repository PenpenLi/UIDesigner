---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ljl.
--- DateTime: 2019/1/15 18:18
---
local UINationMyTeamItem = BaseClass("UINationMyTeamItem", UIWrapComponent)
local base = UIWrapComponent

local function OnCreate(self)
    base.OnCreate(self)
    self.model = self.view.model
    self.ctrl = self.view.ctrl

    --组建初始化
    self.icon_img = self:AddComponent(UIImage, "iconMaskImage/iconImage", AtlasConfig.DynamicTex)
    self.icon_img2 = self:AddComponent(UIImage, "iconMaskImage/iconImage2", AtlasConfig.DynamicTex)
    self.frame_img = self:AddComponent(UIImage, "frameImage", AtlasConfig.DynamicTex)
    self.teamButton = self:AddComponent(UIButton, "")
    self.statusText = self:AddComponent(UIText, "actionStatusText")
    self.actionStatusCountDownText = self:AddComponent(UIText, "actionStatusCountDown")

    self.selectObj = UIUtil.FindTrans(self.transform, "selectImg")
    self.selectObj.gameObject:SetActive(false)

    self.teamButton:SetOnClick(function()
        if self.model.selectMarchId == self.teamData.marchId and self.teamData.isReturnTown == nil then
            -- 选中的是一样的
            return
        end

        self.ctrl:OnTeamSelectItemPressed(self.teamData)
    end)

    self.teamDetailST_ERROR = DataUtil.GetClientText(200355) -- 错误
    self.teamDetailST_ERROR_NULL = DataUtil.GetClientText(200356) -- 队伍类型为Null
    self.teamDetailST_TRANSFER = DataUtil.GetClientText(200357) -- 行军
    self.teamDetailST_BACK = DataUtil.GetClientText(200358) -- 返回
    self.teamDetailST_DEFEND = DataUtil.GetClientText(200359) -- 驻守
    self.teamDetailST_STAY = DataUtil.GetClientText(200360) -- 待命
    self.teamDetailST_INJURED = DataUtil.GetClientText(200361) -- 负伤
    self.teamDetailST_RECRUIT = DataUtil.GetClientText(200362) -- 征募
    self.teamDetailST_SIEGE_KILL = DataUtil.GetClientText(200363) -- 攻城战中
    self.teamDetailST_BATTLE = DataUtil.GetClientText(200364) -- 战斗中
    self.teamDetailST_COLLECT = DataUtil.GetClientText(200365) -- 采集中
    self.teamDetailST_UNSET = DataUtil.GetClientText(200366) -- 未配置

end

-- 组件被复用时回调该函数，执行组件的刷新
local function OnRefresh(self, real_index)
    self.index = real_index + 1
    local teamData = self.view.model.allTeamList[self.index]
    self.teamData = teamData
    if teamData == nil then
        Logger.LogVars(" UINationMyTeamItem OnRefresh error teamData not exist!")
        return
    end

    --todo,优化
    if teamData.isReturnTown ~= nil then
        self.statusText:SetText(teamData.title)
        self.actionStatusCountDownText:SetText(teamData.pos)
        self.icon_img.gameObject:SetActive(false)
        self.icon_img2.gameObject:SetActive(true)
        return
    else
        self.icon_img.gameObject:SetActive(true)
        self.icon_img2.gameObject:SetActive(false)
        self.icon_img.rectTransform.sizeDelta = Vector2.New(80, 80)
    end
    --todo,end

    if self.model.selectMarchId == teamData.marchId then
        self.selectObj.gameObject:SetActive(true)
    else
        self.selectObj.gameObject:SetActive(false)
    end

    local isShowTimer = true
    local firstCard = teamData.firstCard
    if teamData.cardId ~= 0 then

        self.icon_img:SetSpriteName(firstCard.Icon)
        --self.frame_img:SetSpriteName(SpriteDefine:GetCardPoorByIDQuality(firstCard.Quality))
        local behavior = teamData.currentBehavior
        local openCode = behavior.type
        local state = behavior.state

        if openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.ERROR then
            self.statusText:SetText(self.teamDetailST_ERROR)
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.TRANSFER then
            self.statusText:SetText(self.teamDetailST_TRANSFER)
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.DEFEND_WARCELL then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_DEFEND)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.DEFEND_RES then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_DEFEND)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.BACK then
            self.statusText:SetText(self.teamDetailST_BACK)
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.STAY then
            local maxEndArmyTime = teamData.maxEndArmyTime
            local maxLastEndInJuryTime = teamData.maxLastEndInJuryTime
            local currentTime = TimeSyncManager:GetInstance():GetSimulationJavaMS()
            if maxEndArmyTime < currentTime then
                maxEndArmyTime = -1
            end

            if maxLastEndInJuryTime < currentTime then
                maxLastEndInJuryTime = -1
            end

            if maxEndArmyTime <= -1 then
                -- 不在征募
                if maxLastEndInJuryTime <= -1 then
                    -- 不在负伤
                    -- 待命
                    self.statusText:SetText(self.teamDetailST_STAY)
                else
                    -- 负伤
                    self.statusText:SetText(self.teamDetailST_INJURED)
                end
            else
                -- 征兵
                self.statusText:SetText(self.teamDetailST_RECRUIT)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.BATTLE then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BATTLE then
                self.statusText:SetText(self.teamDetailST_BATTLE)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BACK then
                self.statusText:SetText(self.teamDetailST_BACK)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.WAITING then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_ERROR_NULL)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.PUNITIVE then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BATTLE then
                self.statusText:SetText(self.teamDetailST_BATTLE)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BACK then
                self.statusText:SetText(self.teamDetailST_BACK)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.WAITING then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_ERROR_NULL)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.RESOURCE then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BATTLE then
                self.statusText:SetText(self.teamDetailST_BATTLE)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BACK then
                self.statusText:SetText(self.teamDetailST_BACK)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.WAITING then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_ERROR_NULL)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.RESOURCE_COLLECT then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.COLLECT then
                self.statusText:SetText(self.teamDetailST_COLLECT)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BACK then
                self.statusText:SetText(self.teamDetailST_BACK)
            else
                self.statusText:SetText(self.teamDetailST_ERROR_NULL)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.WARCELL then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BATTLE then
                self.statusText:SetText(self.teamDetailST_BATTLE)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BACK then
                self.statusText:SetText(self.teamDetailST_BACK)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.WAITING then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_ERROR_NULL)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.SIEGE_BREAK then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BATTLE then
                self.statusText:SetText(self.teamDetailST_BATTLE)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.BACK then
                self.statusText:SetText(self.teamDetailST_BACK)
            elseif state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.WAITING then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                self.statusText:SetText(self.teamDetailST_ERROR_NULL)
            end
        elseif openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.SIEGE_KILL then
            if state == NationDefine.NATION_TEAM_BEHAVIOR_STATE.MOVETO then
                self.statusText:SetText(self.teamDetailST_TRANSFER)
            else
                isShowTimer = false
                self.statusText:SetText(self.teamDetailST_SIEGE_KILL)
            end
        else
            self.statusText:SetText(self.teamDetailST_ERROR)
        end

        self:DisposeTimer()
        if isShowTimer then
            self:CheckTimerStart(teamData)
        else
            self.actionStatusCountDownText:SetText("")
        end
    else
        self.statusText:SetText(self.teamDetailST_UNSET)
        self.icon_img:SetSpriteName("ui_dtex_Quality_037")
        --self.frame_img:SetSpriteName("ui_dtex_Quality_037")
        self.actionStatusCountDownText:SetText("")
    end
end

local function CheckTimerStart(self, teamData)
    local behavior = teamData.currentBehavior
    local openCode = behavior.type
    local state = behavior.state
    local maxEndArmyTime = teamData.maxEndArmyTime
    local maxLastEndInJuryTime = teamData.maxLastEndInJuryTime

    local endTime = -1

    if openCode == NationDefine.NATION_TEAM_BEHAVIOR_TYPE.STAY then
        if maxEndArmyTime <= -1 then
            -- 不在征募
            if maxLastEndInJuryTime <= -1 then
                -- 不在负伤
                -- 待命
                endTime = -1
            else
                -- 负伤
                endTime = maxLastEndInJuryTime
            end
        else
            -- 征兵
            endTime = maxEndArmyTime
        end
    else
        if tonumber(behavior.endTime) <= 0 then
            endTime = -1
        else
            endTime = tonumber(behavior.endTime)
        end
    end

    if endTime <= -1 then
        self.actionStatusCountDownText:SetText("")
    else
        local currentTime = TimeSyncManager:GetInstance():GetSimulationJavaMS()
        if endTime - currentTime > 0 then
            self.timer = SyncTimer.New(SyncTimer.MODE_STEP, behavior.startTime,
                    500, false, self.OnTeamTimerCallback, { item = self.teamData, endTime = endTime, superSelf = self })
            self.timer:Start()
            local showTime = (endTime - currentTime) / 1000
            if showTime <= 0 then
                showTime = 0
            end
            local formatTime = os.date("%M:%S", math.modf(showTime))
            self.actionStatusCountDownText:SetText(formatTime)
        else
            self.actionStatusCountDownText:SetText("")
        end
    end
end

local function OnTeamTimerCallback(selfTimer, obj)
    --Logger.LogVars(" UINationMyTeamItem OnTeamTimerCallback running !")
    local superSelf = obj.superSelf
    --local endTimeStamp = selfTimer.timeStamp
    local endTime = obj.endTime
    local currentTime = TimeSyncManager:GetInstance():GetSimulationJavaMS()
    local showTime = (endTime - currentTime) / 1000
    local formatTime
    if currentTime > endTime then
        showTime = 0
        superSelf:DisposeTimer()
        formatTime = os.date("%M:%S", math.modf(showTime))
        superSelf.actionStatusCountDownText:SetText(formatTime)
    else
        formatTime = os.date("%M:%S", math.modf(showTime))
        superSelf.actionStatusCountDownText:SetText(formatTime)
    end
end

local function DisposeTimer(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function OnDispose(self)
    self:DisposeTimer()
    self.teamData = nil
end

local function OnDestroy(self)
    base.OnDestroy(self)
    self:OnDispose()
end

UINationMyTeamItem.OnDispose = OnDispose
UINationMyTeamItem.OnDestroy = OnDestroy

UINationMyTeamItem.OnCreate = OnCreate
UINationMyTeamItem.OnRefresh = OnRefresh
UINationMyTeamItem.OnTeamTimerCallback = OnTeamTimerCallback
UINationMyTeamItem.DisposeTimer = DisposeTimer
UINationMyTeamItem.CheckTimerStart = CheckTimerStart

return UINationMyTeamItem