---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/2/27 17:40
---

local UIFriendCon = BaseClass("UIBaseContainer", UIBaseContainer)
local itemData = DataUtil.GetData("item")
local base = UIBaseContainer
local PlayerChatWrap = require "UI.UIFriend.Component.PlayerChatWrap"
local WorldChatWrapGroup = require "UI.UIChat.Component.WorldChatWrapGroup"

local UIFriendPlayerWrap = require "UI.UIFriend.Component.UIFriendPlayerWrap"

local function OpenBtnGroup(self, list, index)
    for i, v in ipairs(list) do
        if i == index then
            --v[3]:SetColor32(168,168,168,255)
            --v[4]:SetColor32(255,255,255,255)
            v[1]:SetActive(true)
            if not IsNull(v[5]) then
                v[5]:SetActive(true)
            end
            v[2]:SetActive(false)
        else
            --v[3]:SetColor32(12,12,12,255)
            --v[4]:SetColor32(149,149,149,255)
            v[1]:SetActive(false)
            if not IsNull(v[5]) then
                v[5]:SetActive(false)
            end
            v[2]:SetActive(true)
        end
    end
end

local function SetWordShadow(self, index, list, list1, list2)
    self.num = index
    self.testList = list
    self.numList1 = list1
    self.numList2 = list2
    if self.num == 1 then
        self.testList[1][1]:SetActive(true)
        self.testList[1][2]:SetActive(false)
        self.testList[1][3].img:SetSpriteName("ui_t_c2_240")
        self.testList[1][4].text:SetColor32(239, 234, 222, 255)
        self.testList[1][4].outLine:SetColor32(5, 5, 5, 255)
        self.numList1.text:SetColor32(239, 234, 222, 255)
        self.numList1.outLine:SetColor32(5, 5, 5, 255)

        self.testList[2][1]:SetActive(false)
        self.testList[2][2]:SetActive(true)
        self.testList[2][3].img:SetSpriteName("ui_t_c2_239")
        self.testList[2][4].text:SetColor32(21, 24, 30, 255)
        self.testList[2][4].outLine:SetColor32(38, 74, 89, 255)
        self.numList2.text:SetColor32(21, 24, 30, 255)
        self.numList2.outLine:SetColor32(38, 74, 89, 255)
    else
        self.testList[1][1]:SetActive(false)
        self.testList[1][2]:SetActive(true)
        self.testList[1][3].img:SetSpriteName("ui_t_c2_239")
        self.testList[1][4].text:SetColor32(21, 24, 30, 255)
        self.testList[1][4].outLine:SetColor32(38, 74, 89, 255)
        self.numList1.text:SetColor32(21, 24, 30, 255)
        self.numList1.outLine:SetColor32(38, 74, 89, 255)

        self.testList[2][1]:SetActive(true)
        self.testList[2][2]:SetActive(false)
        self.testList[2][3].img:SetSpriteName("ui_t_c2_240")
        self.testList[2][4].text:SetColor32(239, 234, 222, 255)
        self.testList[2][4].outLine:SetColor32(5, 5, 5, 255)
        self.numList2.text:SetColor32(239, 234, 222, 255)
        self.numList2.outLine:SetColor32(5, 5, 5, 255)
    end
end

local function SelectRecentBtn(self, force_voice)
    if not force_voice then
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    end
    if self.select_list_type == 3 then
        return true
    end
    if self.recent_list ~= nil and #self.recent_list > 0 then
        self.select_list_type = 3
        self.left_list = self.recent_list
        self.friend_wrap_group:SetLength(#self.recent_list)
        self.friend_wrap_group:ResetToBeginning()
        self.friend_wrap_group:OnInit()
        --设置位置
        local v3 = self.scroll_rect.anchoredPosition3D
        v3.y = -55
        self.scroll_rect.anchoredPosition3D = v3
        v3 = self.team_rect.anchoredPosition3D
        v3.y = -475
        self.team_rect.anchoredPosition3D = v3
        OpenBtnGroup(self, self.recent_list_game_group, 1)
        self:SetWordShadow(1, self.recent_list_game_group, self.recent_limit_text, self.team_limit_text)        
        return true
    else
        return false
    end
end

local function SelectTeamBtn(self, force_voice)
    if not force_voice then
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    end
    return false
end

local function SelectFriendBtn(self, force_voice)
    if not force_voice then
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    end
    if self.select_list_type == 1 then
        return true
    end
    if self.friend_list ~= nil and #self.friend_list > 0 then
        self.select_list_type = 1
        self.left_list = self.friend_list
        self.friend_wrap_group:SetLength(#self.friend_list)
        self.friend_wrap_group:ResetToBeginning()
        self.friend_wrap_group:OnInit()
        --设置位置
        local v3 = self.scroll_rect.anchoredPosition3D
        v3.y = -55
        self.scroll_rect.anchoredPosition3D = v3
        v3 = self.black_rect.anchoredPosition3D
        v3.y = -475
        self.black_rect.anchoredPosition3D = v3
        OpenBtnGroup(self, self.friend_list_game_group, 1)
        self:SetWordShadow(1, self.friend_list_game_group, self.friend_limit_text, self.black_limit_text)
        return true
    else
        return false
    end
end

local function SelectBlackBtn(self, force_voice)
    if not force_voice then
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    end
    if self.select_list_type == 2 then
        return true
    end
    if self.black_list ~= nil and #self.black_list > 0 then
        self.select_list_type = 2
        self.left_list = self.black_list
        self.friend_wrap_group:SetLength(#self.black_list)
        self.friend_wrap_group:ResetToBeginning()
        self.friend_wrap_group:OnInit()
        --设置位置
        local v3 = self.scroll_rect.anchoredPosition3D
        v3.y = -150
        self.scroll_rect.anchoredPosition3D = v3
        v3 = self.black_rect.anchoredPosition3D
        v3.y = 140
        self.black_rect.anchoredPosition3D = v3
        OpenBtnGroup(self, self.friend_list_game_group, 2)
        self:SetWordShadow(2, self.friend_list_game_group, self.friend_limit_text, self.black_limit_text)

        return true
    else
        return false
    end
end

local function CheckIsFriend(self, id)
    local is_friend = true
    if self.select_list_type ~= 2 then
        is_friend = FriendData:GetInstance():CheckIsFriend(id)
    end
    if is_friend then
        self.add_friend_game:SetActive(false)
        local sizeDelta = self.chat_scroll_rect.sizeDelta
        sizeDelta.y = 580
        self.chat_scroll_rect.sizeDelta = sizeDelta
    else
        self.add_friend_game:SetActive(true)
        local sizeDelta = self.chat_scroll_rect.sizeDelta
        sizeDelta.y = 480
        self.chat_scroll_rect.sizeDelta = sizeDelta
    end
end

--切换最近页签  最近与组队
local function SwitchRecentPage(self)
    --先判断好友列表
    self.friend_list_game_group[2][5]:SetActive(false)
    self.recent_bottom_game:SetActive(true)
    if not SelectRecentBtn(self, true) then
        if not SelectTeamBtn(self, true) then
            self:SetWordShadow(1, self.recent_list_game_group, self.recent_limit_text, self.team_limit_text)
            self.friend_wrap_group:SetLength(0)
            local v3 = self.black_rect.anchoredPosition3D
            v3.y = 140
            self.team_rect.anchoredPosition3D = v3
            OpenBtnGroup(self, self.recent_list_game_group, -1)
            self.right_game:SetActive(false)
            self.emptyObj.gameObject:SetActive(true);
        else
            self.right_game:SetActive(true)
            self.emptyObj.gameObject:SetActive(false);
        end
    else
        self.right_game:SetActive(true)
        self.emptyObj.gameObject:SetActive(false);
    end
end

--切换好友页签  好友与陌生人
local function SwitchFriendPage(self)
    --先判断好友列表
    if not SelectFriendBtn(self, true) then
        if not SelectBlackBtn(self, true) then
            self:SetWordShadow(1, self.friend_list_game_group, self.friend_limit_text, self.black_limit_text)
            self.friend_wrap_group:SetLength(0)
            local v3 = self.black_rect.anchoredPosition3D
            v3.y = 140
            self.black_rect.anchoredPosition3D = v3
            OpenBtnGroup(self, self.friend_list_game_group, -1)
            self.right_game:SetActive(false)
            self.emptyObj.gameObject:SetActive(true);
        else
            self.right_game:SetActive(true)
            self.emptyObj.gameObject:SetActive(false);
        end
    else
        self.right_game:SetActive(true)
        self.emptyObj.gameObject:SetActive(false);
    end
end
--切换 好友 最近  页签
local function SwitchPage(self, index, force_voice)
    if not force_voice then
        LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
    end
    if self.current_page == index then
        return
    end
    if self.last_img ~= nil then
        --self.last_img.img:SetColor32(12,12,12,255)

        --更改底色图片（灰）
        self.last_img.img:SetSpriteName("ui_t_c2_002")
        if self.last_img.game then
            self.last_img.game:SetActive(false)
        end
    end
    --self.group[index].img:SetColor32(168,168,168,255)

    --更改底色图片（黄）
    self.group[index].img:SetSpriteName("ui_t_c2_001")
    self.last_img = self.group[index]
    if self.group[index].game then
        self.group[index].game:SetActive(true)
    end
    self.select_list_type = -1
    self.current_page = index
    if index == 1 then
        SwitchFriendPage(self)
    elseif index == 3 then
        SwitchRecentPage(self)
    end
end

local function OpenBtnFunctionWindow(self)
    if self.select_list_type ~= 2 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIPlayerFunc, self.left_list[self.last_chat_index])
    end
end

-- 创建
local function OnCreate(self)
    base.OnCreate(self)
    self.right_con = UIUtil.FindTrans(self.transform, "Right").gameObject
    self.emptyObj=UIUtil.FindTrans(self.transform,"EmptyFriend");
     --self:AddComponent
    self.group = {{img = false, game = false}, {img = false, game = false}, {img = false, game = false}}
    local btn = self:AddComponent(UIButton, "Left/Friend")
    btn:SetOnClick(self, SwitchPage, 1)
    self.group[1].img = self:AddComponent(UIImage, "Left/Friend", AtlasConfig.DynamicTex)
    self.group[1].game = UIUtil.FindTrans(self.transform, "Left/FriendBtn").gameObject
    self.group[1].game:SetActive(false)
    btn = self:AddComponent(UIButton, "Left/FriendBtn/FriendList")
    btn:SetOnClick(self, SelectFriendBtn)
    self.friend_list_game_group = {
        {false, false, {img = false}, {text = false, outLine = false}, false},
        {false, false, {img = false}, {text = false, outLine = false}, false}
    }
    self.friend_limit_text = {text = false, outLine = false}
    self.black_limit_text = {text = false, outLine = false}
    self.friend_list_game_group[1][1] =
        UIUtil.FindTrans(self.transform, "Left/FriendBtn/FriendList/FriendOpen").gameObject
    self.friend_list_game_group[1][2] =
        UIUtil.FindTrans(self.transform, "Left/FriendBtn/FriendList/FriendClose").gameObject
    self.friend_list_game_group[1][3].img = self:AddComponent(UIImage, "Left/FriendBtn/FriendList", AtlasConfig.DynamicTex)
    self.friend_list_game_group[1][4].text = self:AddComponent(UIText, "Left/FriendBtn/FriendList/FriendListTitle")
    self.friend_list_game_group[1][4].outLine =
        self:AddComponent(UIOutlineEx, "Left/FriendBtn/FriendList/FriendListTitle")
    self.friend_list_game_group[1][5] = UIUtil.FindTrans(self.transform, "Right/Botton").gameObject
    self.friend_limit_text.text = self:AddComponent(UIText, "Left/FriendBtn/FriendList/FriendListNum")
    self.friend_limit_text.outLine = self:AddComponent(UIOutlineEx, "Left/FriendBtn/FriendList/FriendListNum")
    btn = self:AddComponent(UIButton, "Left/FriendBtn/BlackList")
    btn:SetOnClick(self, SelectBlackBtn)
    self.friend_list_game_group[2][1] =
        UIUtil.FindTrans(self.transform, "Left/FriendBtn/BlackList/BlackListOpen").gameObject
    self.friend_list_game_group[2][2] =
        UIUtil.FindTrans(self.transform, "Left/FriendBtn/BlackList/BlackListClose").gameObject
    self.friend_list_game_group[2][3].img = self:AddComponent(UIImage, "Left/FriendBtn/BlackList", AtlasConfig.DynamicTex)
    self.friend_list_game_group[2][4].text = self:AddComponent(UIText, "Left/FriendBtn/BlackList/BlackListTitle")
    self.friend_list_game_group[2][4].outLine =
        self:AddComponent(UIOutlineEx, "Left/FriendBtn/BlackList/BlackListTitle")
    self.friend_list_game_group[2][5] = UIUtil.FindTrans(self.transform, "Right/BlackBtn").gameObject
    self.black_limit_text.text = self:AddComponent(UIText, "Left/FriendBtn/BlackList/BlackListNum")
    self.black_limit_text.outLine = self:AddComponent(UIOutlineEx, "Left/FriendBtn/BlackList/BlackListNum")
    btn = self:AddComponent(UIButton, "Left/Recent")
    btn:SetOnClick(self, SwitchPage, 3)
    self.group[3].img = self:AddComponent(UIImage, "Left/Recent", AtlasConfig.DynamicTex)
    self.group[3].game = UIUtil.FindTrans(self.transform, "Left/RecentBtn").gameObject
    self.group[3].game:SetActive(false)
    btn = self:AddComponent(UIButton, "Left/RecentBtn/RencentList")
    btn:SetOnClick(self, SelectRecentBtn)
    self.recent_list_game_group = {
        {false, false, {img = false}, {text = false, outLine = false}},
        {false, false, {img = false}, {text = false, outLine = false}}
    }
    self.recent_limit_text = {text = false, outLine = false}
    self.team_limit_text = {text = false, outLine = false}
    self.recent_list_game_group[1][1] =
        UIUtil.FindTrans(self.transform, "Left/RecentBtn/RencentList/RencentListOpen").gameObject
    self.recent_list_game_group[1][2] =
        UIUtil.FindTrans(self.transform, "Left/RecentBtn/RencentList/RencentListClose").gameObject
    self.recent_list_game_group[1][3].img = self:AddComponent(UIImage, "Left/RecentBtn/RencentList", AtlasConfig.DynamicTex)
    self.recent_list_game_group[1][4].text = self:AddComponent(UIText, "Left/RecentBtn/RencentList/RencentListTitle")
    self.recent_list_game_group[1][4].outLine =
        self:AddComponent(UIOutlineEx, "Left/RecentBtn/RencentList/RencentListTitle")
    self.recent_limit_text.text = self:AddComponent(UIText, "Left/RecentBtn/RencentList/RencentListNum")
    self.recent_limit_text.outLine = self:AddComponent(UIOutlineEx, "Left/RecentBtn/RencentList/RencentListNum")
    btn = self:AddComponent(UIButton, "Left/RecentBtn/TeamList")
    btn:SetOnClick(self, SelectTeamBtn)
    self.recent_list_game_group[2][1] =
        UIUtil.FindTrans(self.transform, "Left/RecentBtn/TeamList/TeamListOpen").gameObject
    self.recent_list_game_group[2][2] =
        UIUtil.FindTrans(self.transform, "Left/RecentBtn/TeamList/TeamListClose").gameObject
    self.recent_list_game_group[2][3].img = self:AddComponent(UIImage, "Left/RecentBtn/TeamList", AtlasConfig.DynamicTex)
    self.recent_list_game_group[2][4].text = self:AddComponent(UIText, "Left/RecentBtn/TeamList/TeamListTitle")
    self.recent_list_game_group[2][4].outLine = self:AddComponent(UIOutlineEx, "Left/RecentBtn/TeamList/TeamListTitle")
    self.team_limit_text.text = self:AddComponent(UIText, "Left/RecentBtn/TeamList/TeamListNum")
    self.team_limit_text.outLine = self:AddComponent(UIOutlineEx, "Left/RecentBtn/TeamList/TeamListNum")
    self.recent_bottom_game = UIUtil.FindTrans(self.transform, "Right/Botton").gameObject

    self.friend_wrap_group =
        self:AddComponent(UIWrapGroup3D, "Left/FriendScroll/grid_UIWrapGroup3D", UIFriendPlayerWrap, self)
    self.scroll_rect = UIUtil.FindComponent(self.transform, typeof(CS.UnityEngine.RectTransform), "Left/FriendScroll")
     --.anchoredPosition3D
    self.black_rect =
        UIUtil.FindComponent(self.transform, typeof(CS.UnityEngine.RectTransform), "Left/FriendBtn/BlackList")
    self.team_rect =
        UIUtil.FindComponent(self.transform, typeof(CS.UnityEngine.RectTransform), "Left/RecentBtn/TeamList")

    self.right_game = UIUtil.FindTrans(self.transform, "Right").gameObject
    --玩家信息
    self.player_name = self:AddComponent(UIText, "Right/RightTop/name")
    self.lv = self:AddComponent(UIText, "Right/RightTop/LvFrame/leftlv")
    self.frame = self:AddComponent(UIImage,"Right/RightTop/frame",AtlasConfig.DynamicTex)
    self.icon = self:AddComponent(UIImage,"Right/RightTop/icon",AtlasConfig.DynamicTex)
    self.chat_scroll_rect =
        UIUtil.FindComponent(self.transform, typeof(CS.UnityEngine.RectTransform), "Right/ChatScroll")
    self.add_friend_game = UIUtil.FindTrans(self.transform, "Right/AddFriend").gameObject

    btn = self:AddComponent(UIButton, "Right/RightTop/frame")
    btn:SetOnClick(self, OpenBtnFunctionWindow)

    btn = self:AddComponent(UIButton, "Right/BlackBtn")
    btn:SetOnClick(
        function()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            FriendData:GetInstance():DealFriend(8, self.left_list[self.last_chat_index])
        end
    )

    btn = self:AddComponent(UIButton, "Right/AddFriend/Button")
    btn:SetOnClick(
        function()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            self.view:OpenApplyWindow(self.left_list[self.last_chat_index])
        end
    )

    --聊天内容
    self.chat_wrap_group =
        self:AddComponent(
        WorldChatWrapGroup,
        "Right/ChatScroll/grid_chat",
        PlayerChatWrap,
        Vector2.New(1080, 150),
        self
    )
    self.chat_wrap_group:SetLength(0)
    self.unity_text = UIUtil.FindText(self.transform, "Right/unity_text")
    self.chat_input = self:AddComponent(UIInput, "Right/Botton/InputField")
    self.chat_send = self:AddComponent(UIButton, "Right/Botton/Send")
    self.chat_send:SetOnClick(
        function()
            LJAudioManger:GetInstance():PlayVoice("UI_CommonClick")
            local str = self.chat_input:GetText()
            local num = DataUtil.GetStringLength(str)
            if num > 0 then
                if num <= 50 then
                    FriendData:GetInstance():AddNewChat(self.left_list[self.last_chat_index], str)
                    self.chat_input:SetText("")
                else
                    UISpecial:GetInstance():UITipText("最大字数不超过50")
                end
            else
                UISpecial:GetInstance():UITipText("聊天内容不能为空")
            end
        end
    )
    --TODO:红点发生更改
    --好友红点
    self.friend_page_red = UIUtil.FindTrans(self.transform,"Left/Friend/redpoint").gameObject
    self.recent_page_red = UIUtil.FindTrans(self.transform,"Left/Recent/redpoint").gameObject
    self.friend_list_red = UIUtil.FindTrans(self.transform,"Left/FriendBtn/FriendList/redpoint").gameObject
    self.stranger_list_red = UIUtil.FindTrans(self.transform,"Left/RecentBtn/RencentList/redpoint").gameObject
end

local function RefreshRedPoint(self)
    self.friend_page_red:SetActive(RedPointData:GetInstance():GetRedState("friend_friend_friend"))
    self.friend_list_red:SetActive(RedPointData:GetInstance():GetRedState("friend_friend_friend"))
    self.recent_page_red:SetActive(RedPointData:GetInstance():GetRedState("friend_friend_stranger"))
    self.stranger_list_red:SetActive(RedPointData:GetInstance():GetRedState("friend_friend_stranger"))
end

local function UpdateChatPos(self, v, pos)
    local width = UIUtil.GetTextWidth(self.unity_text, v.content)
    local height = UIUtil.GetTextHeight(self.unity_text, v.content)
    v.pos = pos
    if width > 500 then
        width = 500
    end
    if height > 50 then
        v.y = 150 + height + 35 - 50
    else--150
        v.y = 150
    end
    v.size = Vector2.New(width + 60,height + 18)
    return pos + v.y
end

local function GetPlayerDataById(self, id)
    return self.view.model.all_player[id]
end

local function UpdatePlayerData(self, index, update)
    local data = GetPlayerDataById(self, self.left_list[index])
    CheckIsFriend(self, self.left_list[index])
    self.player_name:SetText(data.name)
    self.lv:SetText(data.lv)
    self.icon:SetSpriteName(itemData[data.head].Icon)
    self.frame:SetSpriteName(SpriteDefine:GetItemQualityFrameByType(itemData[data.head].Quality))
    self.chat_list = self.all_chat[data.id]

    local _type = FriendData:GetInstance():FindPlayerRelation(data.id)
    if _type == 1 then
        RedPointData:GetInstance():DelChild("friend_friend_friend_" .. data.id)
        RedPointData:GetInstance():DelChild("friend_friend_stranger_" .. data.id)
    elseif _type == 0 then
        RedPointData:GetInstance():DelChild("friend_friend_stranger_" .. data.id)
    end
    --计算位置
    if self.chat_list ~= nil then
        local pos = 0
        for i, v in ipairs(self.chat_list) do
            pos = UpdateChatPos(self, v, pos)
        end
    end

    if self.chat_list ~= nil and #self.chat_list > 0 then
        if update then
            self.chat_wrap_group:UpdateLength(#self.chat_list, self.chat_list, true)
        else
            self.chat_wrap_group:SetLength(#self.chat_list, self.chat_list)
            self.chat_wrap_group:ResetToBeginning()
        end
    else
        self.chat_wrap_group:SetLength(0, self.chat_list)
    end
    self.last_chat_index = index

    FriendData:GetInstance():GetChatList(data.id)
end
--更新聊天
local function UpdateChat(self, id)
    self.friend_list = self.view.model.friend_list
    self.black_list = self.view.model.black_list
    self.all_chat = self.view.model.all_chat
    if self.last_chat_index ~= nil then
        if self.left_list[self.last_chat_index] == id then
            UpdatePlayerData(self, self.last_chat_index, true)
        end
    end
    --更新红点
    self.friend_wrap_group:WrapContent(true)
    RefreshRedPoint(self)
end

local function OpenChat(self)
    local type = FriendData:GetInstance():FindPlayerRelation(self.view.open_chat_id)
    self.current_page = -1
    if type == 1 then
        for i, v in ipairs(self.friend_list) do
            if v == self.view.open_chat_id then
                table.remove(self.friend_list, i)
                table.insert(self.friend_list, 1, v)
                break
            end
        end
        SwitchPage(self, 1, true)
    elseif type == 2 then
        for i, v in ipairs(self.black_list) do
            if v == self.view.open_chat_id then
                table.remove(self.black_list, i)
                table.insert(self.black_list, 1, v)
                break
            end
        end
        SwitchPage(self, 1, true)
        SelectBlackBtn(self)
    else
        local add = false
        for i, v in ipairs(self.recent_list) do
            if v == self.view.open_chat_id then
                table.remove(self.recent_list, i)
                table.insert(self.recent_list, 1, v)
                add = true
                break
            end
        end
        if not add then
            table.insert(self.recent_list, 1, self.view.open_chat_id)
        end
        SwitchPage(self, 3, true)
    end
    self.open_chat_id = nil
end

local function OnInit(self)
    local temp = self.current_page
    if temp == nil then
        temp = 1
    end
    self.current_page = -1
    self.friend_list = self.view.model.friend_list
    self.black_list = self.view.model.black_list
    self.all_chat = self.view.model.all_chat
    self.recent_list = self.view.model.recent_list
    self.team_list = self.view.model.team_list
    self.limit = self.view.model.limit
    self.friend_limit_text.text:SetText(#self.friend_list .. "/" .. self.limit.friend)
    self.black_limit_text.text:SetText(#self.black_list .. "/" .. self.limit.black)
    self.recent_limit_text.text:SetText(#self.recent_list .. "/" .. self.limit.recent)
    self.team_limit_text.text:SetText(#self.team_list .. "/" .. self.limit.team)
    if self.view.open_chat_id ~= nil then
        OpenChat(self)
    else
        SwitchPage(self, temp, true)
    end
    RefreshRedPoint(self)
end
UIFriendCon.RefreshRedPoint = RefreshRedPoint
UIFriendCon.SetWordShadow = SetWordShadow
UIFriendCon.OpenBtnFunctionWindow = OpenBtnFunctionWindow
UIFriendCon.OpenChat = OpenChat
UIFriendCon.GetPlayerDataById = GetPlayerDataById
UIFriendCon.UpdatePlayerData = UpdatePlayerData
UIFriendCon.OnCreate = OnCreate
UIFriendCon.OnInit = OnInit
UIFriendCon.UpdateChat = UpdateChat
return UIFriendCon
