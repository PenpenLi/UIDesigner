---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2018/12/5 14:28
---
local Evaluate ={
    Linear = 0,
    InSine = 1,
    OutSine = 2,
    InOutSine = 3,

    InQuad = 4,
    OutQuad = 5,
    InOutQuad = 6,

    InCubic = 7,
    OutCubic = 8,
    InOutCubic= 9,

    InQuart = 10,
    OutQuart = 11,
    InOutQuart = 12,

    InQuint = 13,
    OutQuint = 14,
    InOutQuint = 15,

    InExpo = 16,
    OutExpo = 17,
    InOutExpo = 18,




    Evaluate = function (self,time,duration,type)
        if type == self.InSine then
            return -math.cos(time / duration * 1.57079637) + 1
        elseif type == self.OutSine then
            return math.sin(time / duration * 1.57079637)
        elseif type == self.InOutSine then
            return -0.5*(math.cos(time * 3.14159274 / duration)-1)
        elseif type==self.InQuad then
            time=time/duration;
            return time*time;
        elseif type==self.OutQuad then
            time=time/duration;
            return -time * (time - 2);
        elseif type == self.InOutQuad then
            time = time*2/duration
            if time < 1 then
                return 0.5 * time * time;
            else
                time = time-1
                return -0.5 * (time*(time-2)-1)
            end
        elseif type==self.InCubic then
            time=time/duration
            return time * time * time
        elseif type==self.OutCubic then
            time=time/duration - 1
            return time * time * time+1
        elseif type == self.InOutCubic then
            time = time*2/duration
            if time < 1 then
                return 0.5 * time * time * time;
            else
                time = time-2
                return 0.5 * (time * time * time + 2);
            end
        elseif type==self.InQuart then
            time=time/duration
            return time * time * time*time
        elseif type==self.OutQuart then
            time=time/duration-1
            return -(time * time * time*time-1)
        elseif type == self.InOutQuart then
            time = time*2/duration
            if time < 1 then
                return 0.5 * time * time * time*time;
            else
                time = time-2
                return -0.5 * (time * time * time*time - 2);
            end
        elseif type == self.InQuint then
            time = time/duration
            return time * time * time * time * time
        elseif type == self.OutQuint then
            time = time/duration - 1
            return time * time * time * time * time+1
        elseif type == self.InOutQuint then
            time = time*2/duration
            if time < 1 then
                return 0.5 * time * time * time * time * time
            else
                time = time - 2
                return 0.5 * (time * time * time * time * time+2)
            end
        elseif type == self.InExpo then
            if time ~= 0 then
              return Mathf.Pow(2, (10 * (time / duration - 1)));
            else
              return 0
            end
        elseif type == self.OutExpo then
            if time == duration then
                return 1
            else
                return -Mathf.Pow(2, (-10 * time / duration))+1;
            end
        elseif type == self.InOutExpo then
            if time == 0 then
                return 0
            end
            if time == duration then
                return 1
            end
            time = time*2/duration
            if time < 1 then
                return 0.5 * Mathf.Pow(2, (10 * (time / duration - 1)));
            else
                return 0.5 * (-Mathf.Pow(2, -10 * (time - 1 ))+2);
            end
        else
            return time / duration;
        end
    end
}
return Evaluate
