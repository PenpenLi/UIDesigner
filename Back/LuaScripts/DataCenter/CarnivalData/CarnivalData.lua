---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xupeng.
--- DateTime: 2019/7/25 16:49
---
local CarnivalData = BaseClass("CarnivalData",Singleton)
local all_carnival_data = DataUtil.GetData("week_promote")
local RED_NAME = RedPointData:GetInstance().RedName.Carnival_Red

local function initData(self)
    local now_carnival_data = all_carnival_data[self.now_week];
    ---初始化积分奖励信息
    for k, v in ipairs(now_carnival_data.Awards) do
        self.score_award_data[v.Id] = {num = v.Num, status = 0}; ---积分，领取状态（-1可领取 0未完成 1已领取）
    end

    for k, v in ipairs(now_carnival_data.Days) do
        for i, j in ipairs(v.Tabs) do
            ---初始化所有活动信息
            if j.Tasks ~= nil then
                for m, n in ipairs(j.Tasks) do
                    local val = 1
                    if n.Param ~= nil then
                        val = n.Param[1]
                    end
                    self.all_activity_data[n.Id] = {tag_progress = val, progress = 0, status = 0, day = k};---完成进度，当前进度，领取状态（-1可领取 0未完成 1已领取）
                end
            end
            ---初始化折扣商店信息
            if j.Goods ~= nil then
                for m, n in ipairs(j.Goods) do
                    self.goods_shop_data[n.Id] = {times = n.Times, buynum = 0};---可购买次数，已购买次数
                end
            end
        end
    end

    DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARNIVAL_DATA_INIT)
end

local function updateScoreAwardData(self)
    for k, v in pairs(self.score_award_data) do
        if v.status == 0 and v.num <= self.now_score then
            self.score_award_data[k].status = -1;
        end
    end
end

local function __init(self)

    self.show_red = false
    ---活动是否开启
    self.isOpen = true;
    ---当前是第几天
    self.now_day = 1;
    ---周期是第几周
    self.now_week = 1;
    ---该周期的结束时间
    self.end_time = 0;
    ---商店购买提示
    self.showBuyTip = true;
    ---当前积分
    self.now_score = 0;
    ---积分奖励数据
    self.score_award_data = {}
    ---活动状态数据
    self.all_activity_data = {}
    ---折扣商店数据
    self.goods_shop_data = {}
    ---初始化数据
    initData(self)
end

---请求嘉年华全部活动数据
local function RequestGetCarnivalData(self)
    if not self.isOpen then
        return
    end
    if self.have_send then
        Logger.LogError("已经请求过嘉年华")
    else
        self.have_send = true
    end
    local mission_info_id = MsgIDDefine.PBMISSION_GET_ALL_CARNIVAL_REQUEST
    NetManager:GetInstance():SendMessage(mission_info_id,nil,function (msg_obj)
         if msg_obj.OpCode ~= 0 then
             Logger.Log("ERROR PBMISSION_GET_ALL_CARNIVAL_REQUEST~~")
             self.isOpen = false;
             --UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
             UIManager:GetInstance():CloseWindow(UIWindowNames.UICarnival)
             UIManager:GetInstance():Broadcast(UIMessageNames.UI_CARNIVAL_OPEN_STATE)
             return
        else
            self.now_score = msg_obj.Packages.carnivalIntegral
            self.end_time = Mathf.Floor(tonumber(msg_obj.Packages.endTime) / 1000)
            self.now_day = msg_obj.Packages.nowDay
            for k, v in ipairs(msg_obj.Packages.hasDrawList) do
                if self.score_award_data[v] ~= nil then
                    self.score_award_data[v].status = 1;
                end
            end
            for k, v in ipairs(msg_obj.Packages.mission) do
                if self.all_activity_data[v.id] ~= nil then
                    self.all_activity_data[v.id].progress = v.progress
                    self.all_activity_data[v.id].status = v.status
                    if v.status == 0 and v.progress >= self.all_activity_data[v.id].tag_progress then
                        self.all_activity_data[v.id].status = -1
                    end
                end
            end
            updateScoreAwardData(self)
            if msg_obj.Packages.nowPeriod ~= self.now_week then
                self.now_week = msg_obj.Packages.nowPeriod
                initData(self)
            end
             for k, v in ipairs(msg_obj.Packages.goodsInfo) do
                 if self.goods_shop_data[v.goodsId] ~= nil then
                     self.goods_shop_data[v.goodsId].buynum = v.haveBuyNum;
                 end
             end
             DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARNIVAL_DATA_UPDATE)
            self:UpdateCarnivalRedPointState(self)
        end
    end)
end

---领取嘉年华活动奖励
local function SendGetAwardRequest(self,id)
    local reward_info_id = MsgIDDefine.PBMISSION_CARNIVAL_REWARD_REQUEST
    local reward_info = (MsgIDMap[reward_info_id])()
    reward_info.missionId = id
    self.sendMissionId = id
    NetManager:GetInstance():SendMessage(reward_info_id,reward_info,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBMISSION_CARNIVAL_REWARD_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            DataUtil.ParseDropItem(msg_obj.Packages.dropItem)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.dropItem,nil,1)
            self.now_score = msg_obj.Packages.carnivalIntegral
            self.all_activity_data[self.sendMissionId].status = 1
            updateScoreAwardData(self)
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARNIVAL_DATA_UPDATE)
            self:UpdateCarnivalRedPointState(self)
        end
    end)
end

---领取积分宝箱奖励
local function SendGetScoreAwardRequest(self,id)
    local reward_info_id = MsgIDDefine.PBMISSION_CARNIVAL_INTEGRAL_REWARD_REQUEST
    local reward_info = (MsgIDMap[reward_info_id])()
    reward_info.id = id
    NetManager:GetInstance():SendMessage(reward_info_id,reward_info,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBMISSION_CARNIVAL_INTEGRAL_REWARD_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            DataUtil.ParseDropItem(msg_obj.Packages.dropItem)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.dropItem,nil,1)
            for k, v in ipairs(msg_obj.Packages.hasDrawList) do
                if self.score_award_data[v] ~= nil then
                    self.score_award_data[v].status = 1;
                end
            end
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARNIVAL_DATA_UPDATE)
            self:UpdateCarnivalRedPointState(self)
        end
    end)
end

---购买折扣商店物品
local function SendBuyCarnivalGoodsRequest(self,id,num,costNum)
    local reward_info_id = MsgIDDefine.PBITEM_BUY_CARNIVAL_GOODS_REQUEST
    local reward_info = (MsgIDMap[reward_info_id])()
    reward_info.goodsId = id
    reward_info.num = num
    self.sendMissionId = id
    self.sendBuyNum = num
    self.costNum = costNum
    NetManager:GetInstance():SendMessage(reward_info_id,reward_info,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBITEM_BUY_CARNIVAL_GOODS_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            DataUtil.ParseDropItem(msg_obj.Packages.reward)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.reward,nil,1)
            self.now_score = msg_obj.Packages.carnivalIntegral
            self.goods_shop_data[self.sendMissionId].buynum = self.goods_shop_data[id].buynum + self.sendBuyNum
            updateScoreAwardData(self)
            BackpackData:GetInstance():UpdateItemData(CoinDefine.Diamond,-self.costNum)
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARNIVAL_DATA_UPDATE)
        end
    end)
end

local function UpdateCarnivalRedPointState(self)
    local k = 0
    for i, v in pairs( self.score_award_data) do
        k = i
        if v.status == -1 then
            k = 0
            self.show_red = true
            RedPointData:GetInstance():UpdateRedState(RED_NAME,true)
            break
        end
    end
    if k ~= 0 then
        self.show_red = false
        RedPointData:GetInstance():UpdateRedState(RED_NAME,false)
    end
    local k = 0
    for i, v in pairs(self.all_activity_data) do
        k = i
        if v.day <= self.now_day and v.status == -1 then
            k = 0
            RedPointData:GetInstance():UpdateRedState(RED_NAME,true)
            break
        end
    end
    if k ~= 0 then
        RedPointData:GetInstance():UpdateRedState(RED_NAME, self.show_red)
    end
    UIManager:GetInstance():Broadcast(UIMessageNames.UI_CARNIVAL_RED_STATE)
end

---更新嘉年华活动数据
local function GetCarnivalData(self,_data)
    if _data == nil then
        return
    end
    for k, v in ipairs(_data) do
        if self.all_activity_data[v.id] ~= nil then
            self.all_activity_data[v.id].progress = v.progress;
            self.all_activity_data[v.id].status = v.status;
            if v.status == 0 and v.progress >= self.all_activity_data[v.id].tag_progress then
                self.all_activity_data[v.id].status = -1
            end
        end
    end
    self:UpdateCarnivalRedPointState(self)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARNIVAL_DATA_UPDATE)
end


CarnivalData.__init = __init
CarnivalData.initData = initData
CarnivalData.RequestGetCarnivalData = RequestGetCarnivalData
CarnivalData.SendGetScoreAwardRequest = SendGetScoreAwardRequest
CarnivalData.UpdateCarnivalRedPointState = UpdateCarnivalRedPointState
CarnivalData.SendBuyCarnivalGoodsRequest = SendBuyCarnivalGoodsRequest
CarnivalData.RED_NAME = RED_NAME
CarnivalData.SendGetAwardRequest = SendGetAwardRequest
CarnivalData.GetCarnivalData = GetCarnivalData
return CarnivalData