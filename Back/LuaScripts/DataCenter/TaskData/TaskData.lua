---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ljl.
--- DateTime: 2019/2/23 15:56
---
local TaskData = BaseClass("TaskData",Singleton)
local all_daily_data =  DataUtil.GetData("daily")
local all_item_data =  DataUtil.GetData("item")
local all_achievement_data = DataUtil.GetData("achieve")
local all_hell_data = DataUtil.GetData("master_hell")
local global_data = DataUtil.GetData("global")
local major_task_data = DataUtil.GetData("major_task")
local HELL_RED_NAME = "hell_red"
local function __init(self)
    ---玩家地狱道务数据
    self.hell_task = {}

    ---每日推荐任务数据
    self.every_day_task = {}
    ---成就任务数据
    self.achievement_task = {}
    ---父节点按钮数量
    self.achievement_btn_list = {}
    ---成就积分
    self.achievement_score_all = 0
    ---当前成就积分
    self.achievement_score_now = 0
    ---可以领取的任务列表
    self.have_get_task = {}
    ---主线任务数据
    self.main_task_data = {}
    self.show_red = false
    self.forceRatingData = {}
end

---排序
---第一：是否可领取
---第二：任务id
local function sort_(a, b)
    local r
    local al = tonumber(a.status)
    local bl = tonumber(b.status)
    local aid = tonumber(a.id)
    local bid = tonumber(b.id)
    if  al == bl then
        r = aid < bid
    else
        r = al < bl
    end
    return r
end

---解析当前地狱道任务数据
local function OnParserHellTask(self,_data)
    self.hell_task = {}
    --确认玩家当前地狱道等级
    local userhell = UserData:GetInstance().hellLevel+1
    --当前突破等级的任务数据
    if all_hell_data[userhell]== nil then
        Logger.Log("当前等级的数据不存在："..userhell)
        return
    end
    local curTaskData =all_hell_data[userhell].Tasks
    if curTaskData == nil then
        Logger.Log("当前等级的数据错误")
        return
    end
    for _, v in ipairs(_data) do
        local configData = curTaskData[math.floor(v.id)]
        if configData ~= nil then
            local missionData = {}
            missionData.id = v.id
            missionData.name = configData.Name
            if table.count(configData.Param) >1 then
                missionData.des = string.format(configData.Name,configData.Param[1],configData.Param[2])
            else
                missionData.des = string.format(configData.Name,configData.Param[1])
            end
            missionData.jump=configData.Jump;
            if configData.Icon ~= nil then
                missionData.Icon = configData.Icon
                missionData.isTip = false
            else
                missionData.Icon =  all_item_data[math.floor(configData.Reward[1].Id)].Icon
                missionData.isTip = true
                missionData.Num = math.floor(configData.Reward[1].Num)
            end

            missionData.reward = {}
            for _, v1 in ipairs(configData.Reward) do
                local award = {}
                award.id = v1.Id
                award.icon = all_item_data[v1.Id].Icon
                award.num = v1.Num
                award.quality = all_item_data[v1.Id].Quality
                award.frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[v1.Id].Quality)
                table.insert(missionData.reward,award)
            end
            if configData.UserExp ~= nil then
                local expId = global_data[147].valueN
                if all_item_data[expId] ~= nil then
                    local award = {}
                    award.id = expId
                    award.icon = all_item_data[expId].Icon
                    award.num = configData.UserExp
                    award.quality = all_item_data[expId].Quality
                    award.frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[expId].Quality)
                    table.insert(missionData.reward,award)
                end
            end

            missionData.now_progress = math.floor(tonumber(v.progress))
            missionData.all_progress = configData.Param[1]
            if missionData.now_progress == missionData.all_progress and v.status == 0 then
                missionData.status = -1 --- -1可领取 0未完成 1已领取
            else
                --red_point:UpdateRedState("task_root",false)
                missionData.status = v.status
            end
            table.insert(self.hell_task,missionData)
        end
    end
    table.sort( self.hell_task,sort_)
    self:UpdateHellTaskRedPointState()
end
---更新地獄道任務
local function OnUpdateHellTask(self,_missiondata)
    for _, b in ipairs(_missiondata) do
        for _, t in ipairs(self.hell_task) do
                if t.id == b.id then
                    t.now_progress = math.floor(tonumber(b.progress))
                    if t.now_progress == t.all_progress and b.status == 0 then
                        t.status = -1
                    else
                        t.status = b.status  --- -1可领取 0未领取 1已领取
                    end
                end
        end
    end
    self:UpdateHellTaskRedPointState()
end
local function UpdateHellTaskRedPointState(self)
    local k = 0
    local finished = 0
    local showred = false
    for i, v in ipairs(self.hell_task) do
        if v.status == -1 then
            k = i
            showred = true
            break
        elseif v.status == 1 then
            finished = finished+1
        end
    end
    if finished == #self.hell_task and showred == false then
        showred = true
    end
    RedPointData:GetInstance():UpdateRedState(HELL_RED_NAME, showred)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_USERHELL_UPDATE)
end

---更新地獄道任務
local function OnHellTaskgetAward(self,_missionid)
    for _, t in ipairs(self.hell_task) do
        if t.id == _missionid then
             t.status = 1
        end
    end
    table.sort(self.hell_task,sort_)
    self:UpdateHellTaskRedPointState()
end
---请求获取日常任务
local function RequestGetAllDaily(self)
    local state,type,des= UnlockData:GetInstance():GetLockDataState(303)
    if not state then
        return
    end
    if self.have_send then
        Logger.LogError("已经请求过任务")
        return
    else
        self.have_send=true
    end
    if self.achievement_btn_list == nil or #self.achievement_btn_list == 0 then
        self:RequestGetAchievementData()
    end
    local mission_info_id = MsgIDDefine.PBMISSION_GET_ALL_DAILY_REQUEST
    NetManager:GetInstance():SendMessage(mission_info_id,nil,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBMISSION_GET_ALL_DAILY_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            self.every_day_task = {}
            self:OnSetEveryDayTask(msg_obj.Packages.mission)
            self:UpdateTaskRedPointState()
            UIManager:GetInstance():Broadcast(UIMessageNames.UI_DAILY_MISSION_REFRESH);
            Logger.Log("每日任务长度是"..#self.every_day_task)
        end
    end)
end
---请求获取成就任务
local function RequestGetAchievementData(self)
    local mission_info_id = MsgIDDefine.PBMISSION_GET_ALL_ACHIEVE_REQUEST
    NetManager:GetInstance():SendMessage(mission_info_id,nil,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBMISSION_GET_ALL_DAILY_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            self.achievement_score_all = 0
            self.achievement_score_now = 0
            self.have_get_task = {}
            self.achievement_btn_list = {}
            self:OnSetAchievementData(msg_obj.Packages.mission)
        end
    end)
end

---主线任务领奖
local function SendGetAwardRequest(self,id)
    local reward_info_id = MsgIDDefine.PBMISSION_MAJOR_REWARD_REQUEST
    local reward_info = (MsgIDMap[reward_info_id])()
    reward_info.missionId = id
    NetManager:GetInstance():SendMessage(reward_info_id,reward_info,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBMISSION_GET_MAJOR_REWARD_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            DataUtil.ParseDropItem(msg_obj.Packages.dropItem)
            if not DataUtil.CheckDropItemIsNull(msg_obj.Packages.dropItem) then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.dropItem)
            end
            self:GetMainTaskData(msg_obj.Packages.nextMission,nil)
        end
    end)
end

local function OnSetEveryDayTask(self,_data)
    for _, v in ipairs(_data) do
        if all_daily_data[math.floor(v.id)] ~= nil then
            local missionData = {}
            if all_daily_data[v.id].ModuleType ~= nil and all_daily_data[v.id].ModuleType == 9001 and Config.NATION_CLIENT_SWITCH == false then
                break
            end
            missionData.id = v.id
            missionData.name = all_daily_data[v.id].Name
            if all_daily_data[v.id].Param ~= nil then
                if table.count(all_daily_data[v.id].Param) >1 then
                    missionData.des = string.format(all_daily_data[v.id].Des,all_daily_data[v.id].Param[1],all_daily_data[v.id].Param[2])
                else
                    missionData.des = string.format(all_daily_data[v.id].Des,all_daily_data[v.id].Param[1])
                end
            end
            missionData.reward = {}
            for _, m in ipairs(all_daily_data[v.id].Reward) do
                local award = {}
                award.id = m.id
                award.icon = all_item_data[m.id].Icon
                award.num = m.val
                award.quality = all_item_data[m.id].Quality
                award.frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[m.id].Quality)
                table.insert(missionData.reward,award)
            end
            if all_daily_data[v.id].UserExp ~= nil then
                local expId = global_data[147].valueN
                if all_item_data[expId] ~= nil then
                    local award = {}
                    award.id = expId
                    award.icon = all_item_data[expId].Icon
                    award.num = all_daily_data[v.id].UserExp
                    award.quality = all_item_data[expId].Quality
                    award.frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[expId].Quality)
                    table.insert(missionData.reward,award)
                end
            end

            missionData.now_progress = math.floor(tonumber(v.progress))
            if all_daily_data[v.id].Param ~= nil then
                missionData.all_progress = all_daily_data[v.id].Param[1]
            end
            if missionData.now_progress == missionData.all_progress and v.status == 0 then
                missionData.status = -1
            else
                RedPointData:GetInstance():UpdateRedState("task_root",false)
                missionData.status = v.status  --- -1可领取 0未领取 1已领取
            end
            table.insert(self.every_day_task,missionData)
        end
    end
    table.sort( self.every_day_task,sort_)
end

local function OnSetAchievementData(self,_data)
    for _i, v in ipairs(all_achievement_data) do
        if v ~= nil then
            local data = {}
            data.nowPoint = 0
            data.littleList = {}
            if v.ModuleType ~= nil and v.ModuleType == 9001 and Config.NATION_CLIENT_SWITCH == false then
                break
            end
            for _sub, m in ipairs(v.SubTabs) do
                local littleData = {}
                littleData.name = m.Name
                littleData.taskData = {}
                if m.Achieves ~= nil then
                    for _, n in ipairs(_data) do
                        if m.Achieves[n.id] ~= nil then
                            local misData = {}
                            misData.id = n.id
                            misData.name = m.Achieves[n.id].Name
                            if table.count(m.Achieves[n.id].Param) >1 then
                                misData.des = string.format(m.Achieves[n.id].Des,m.Achieves[n.id].Param[1],m.Achieves[n.id].Param[2])
                            else
                                misData.des = string.format(m.Achieves[n.id].Des,m.Achieves[n.id].Param[1])
                            end
                            misData.reward = {}
                            for _, k in ipairs(m.Achieves[n.id].Award) do
                                local award = {}
                                award.id = k.id
                                award.icon = all_item_data[k.id].Icon
                                award.num = k.val
                                award.quality = all_item_data[k.id].Quality
                                award.type=all_item_data[k.id].ItemType
                                award.frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[k.id].Quality)
                                table.insert(misData.reward,award)
                            end
                            misData.now_progress = math.floor(tonumber(n.progress))
                            misData.all_progress = m.Achieves[n.id].Param[1]
                            misData.point_num = m.Achieves[n.id].RewardPonits
                            if misData.now_progress == misData.all_progress and n.status == 0 then
                                RedPointData:GetInstance():UpdateRedState("task_root",true)
                                misData.status = -1
                                table.insert(self.have_get_task,misData)
                            else
                                RedPointData:GetInstance():UpdateRedState("task_root",false)
                                misData.status = n.status  --- -1可领取 0未领取 1已领取
                            end
                            if misData.status == 1 then
                                data.nowPoint = data.nowPoint +  misData.point_num
                                self.achievement_score_now = self.achievement_score_now +  misData.point_num
                            end
                            table.insert(littleData.taskData,misData)
                        end
                    end
                else
                    Logger.LogError("achieve表没有 achieve id = ".._i.."  sub = ".._sub)
                end
                table.insert(data.littleList, littleData)
                table.sort(littleData.taskData,sort_)
            end
            data.name = v.Name
            data.totalPoint = v.TotalPoint
            self.achievement_score_all = self.achievement_score_all + v.TotalPoint
            table.insert(self.achievement_btn_list,data)
        end
    end
end

local function UpdateTaskRedPointState(self)
    local k = 0
    for i, v in ipairs( self.have_get_task) do
        k = i
        if v.status == -1 then
            k = 0
            self.show_red = true
            RedPointData:GetInstance():UpdateRedState("task_root",true)
            break
        end
    end
    if k ~= 0 then
        self.show_red = false
        RedPointData:GetInstance():UpdateRedState("task_root",false)
    end
    local k = 0
    for i, v in ipairs(self.every_day_task) do
        k = i
        if v.status == -1 then
            k = 0
            RedPointData:GetInstance():UpdateRedState("task_root",true)
            break
        end
    end
    if k ~= 0 then
        RedPointData:GetInstance():UpdateRedState("task_root", self.show_red)
    end
end

---获取主线任务数据
local function GetMainTaskData(self,_data,_type)
    if major_task_data == nil or _data == nil then
        return
    end
    if _type ~=nil and _type == 2 then
        _data = _data[1]
    end
    self.main_task_data = {}
    if major_task_data[_data.id] ~= nil then
        local data = {}
        data.id = _data.id
        data.info = major_task_data[_data.id].Title
        data.des = major_task_data[_data.id].Desc
        data.jump=major_task_data[_data.id].Jump
        data.now_progress = math.floor(tonumber(_data.progress))
        data.all_progress = major_task_data[_data.id].Param[1]
        if data.now_progress == data.all_progress and _data.status == 0 then
            data.status = -1
        else
            data.status = _data.status  --- -1可领取 0未领取 1已领取
        end
        data.reward = {}
        for _, k in ipairs(major_task_data[_data.id].Reward) do
            local award = {}
            award.Id = k.Id
            award.Icon = all_item_data[k.Id].Icon
            award.Num = k.Num
            award.Frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[k.Id].Quality)
            table.insert(data.reward,award)
        end
        if major_task_data[_data.id].Exp ~= nil then
            local expId = global_data[147].valueN
            if all_item_data[expId] ~= nil then
                local award = {}
                award.Id = expId
                award.Icon = all_item_data[expId].Icon
                award.Num = major_task_data[_data.id].Exp
                award.Frame = SpriteDefine:GetItemQualityFrameByType(all_item_data[expId].Quality)
                table.insert(data.reward,award)
            end
        end
        self.main_task_data = data
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_MAIN_TASK_DATA_UPDATE)
    else
        self.main_task_data = nil
    end
end

--通过比值返回一个战力描述值
local function GetPowerRatingForNum(self,_val)
    local ratingWordsData = DataUtil.GetData("force_rating_words")
    for _, v in ipairs(ratingWordsData) do
        if v.ForcePer ~= nil and _val ~= 0 then
            if _val>= v.ForcePer.min and _val <= v.ForcePer.max then
                return v.Words
            end
        else
            return nil
        end
    end
end

--获取我要变强数据
local function GetStrongData(self)
    local strongData = DataUtil.GetData("force_rating")
    local unLockData = DataUtil.GetData("unlock")
    local lv = UserData:GetInstance().pLevel
    self.forceRatingData = {}
    local data = {}

    for _, v in ipairs(strongData) do
        if v.Level ~= nil and lv ~= 0 then
            if lv>= v.Level.min and lv <= v.Level.max then
                data.lv = lv
                data.forceNum = v.Force
                data.selfNum =  CardData:GetInstance():GetCardDataForPower()
                data.info = GetPowerRatingForNum(self,data.selfNum / data.forceNum)
                data.itemList = {}
                for _, m in ipairs(v.System) do
                    local itemData = {}
                    itemData.id = m.Id
                    itemData.icon = m.Icon
                    itemData.name = m.Name
                    local num = 1
                    if unLockData[itemData.id] ~= nil then
                        if unLockData[itemData.id].Title == "寄灵人养成" then
                            num = CardData:GetInstance():GetCardLvAndStarForPower(1)
                        elseif unLockData[itemData.id].Title == "守护灵养成" then
                            num = CardData:GetInstance():GetAddCardDataForLv(2)
                        elseif unLockData[itemData.id].Title == "神器" then
                            num = ArtifactsData:GetInstance():GetArtifactAllLv()
                        elseif unLockData[itemData.id].Title == "守护灵专属武器" then
                            num = CardData:GetInstance():GetAddCardDataForWeapon(2)
                        elseif unLockData[itemData.id].Title == "装备" then

                        end
                    end
                    Logger.Log("---------------------------------------值："..num)
                    if num == 0 then
                        itemData.info = GetPowerRatingForNum(self,0)
                        itemData.val = 0
                    else
                        itemData.info = GetPowerRatingForNum(self,num/m.Force)
                        itemData.val = num/m.Force
                    end
                    itemData.jump = {}
                    itemData.jump.To = m.JumpTo
                    itemData.jump.Param = nil
                    table.insert(data.itemList,itemData)
                end
            end
        end
    end
    self.forceRatingData = data
end

TaskData.__init = __init
TaskData.RequestGetAllDaily = RequestGetAllDaily
TaskData.RequestGetAchievementData = RequestGetAchievementData
TaskData.OnSetAchievementData = OnSetAchievementData
TaskData.OnSetEveryDayTask = OnSetEveryDayTask
TaskData.sort_ = sort_
TaskData.GetStrongData = GetStrongData
TaskData.UpdateTaskRedPointState = UpdateTaskRedPointState
TaskData.OnUpdateHellTask = OnUpdateHellTask
TaskData.OnParserHellTask = OnParserHellTask
TaskData.OnHellTaskgetAward = OnHellTaskgetAward
TaskData.UpdateHellTaskRedPointState = UpdateHellTaskRedPointState
TaskData.GetMainTaskData = GetMainTaskData
TaskData.HELL_RED_NAME = HELL_RED_NAME
TaskData.SendGetAwardRequest = SendGetAwardRequest
return TaskData