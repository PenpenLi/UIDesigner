---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Zhangshoufeng.
--- DateTime: 19/2/22 18:42
---
---story_table keys
---[Id] //uid in table
---[Type] //story type,max 0xFFF
---[Index] //index in a specific type , max 0xFFFF
---[Next] //next story index, normally next = index + 1
---[Path] //prefab path, the name of a story prefab without extension and flooder path
---[Pos]{} //story root pos
---[Rotate] {} //story root rotate
---[Keyword] //story need scene name
---[LevelId] //story need id
---
local StoryData = BaseClass("StoryData", Singleton)
local function __init(self)
    self.allStoryInfo = nil
end

local function __GetAllInfo(self)
    if self.allStoryInfo == nil then
        self.allStoryInfo = DataUtil.GetData("plot")
    end
    return self.allStoryInfo;
end

local function GetInfoByIndex(self, type, dataIndex)
    local retInfo = nil
    if type >= 0 and dataIndex >= 0 then
        local allStoryInfo = __GetAllInfo(self)
        if allStoryInfo ~= nil then

            if dataIndex == 0 then
                local min = nil
                for i, info_token in pairs(allStoryInfo) do
                    if info_token.Type == type then
                        if min == nil then
                            min = info_token
                        else
                            if min.Index > info_token.Index then
                                min = info_token
                            end
                        end

                    end
                end
                retInfo = min
            else
                for i, info_token in pairs(allStoryInfo) do
                    if info_token.Type == type and info_token.Index == dataIndex then
                        retInfo = info_token
                        break
                    end
                end
            end
        end
    end
    return retInfo
end

local function GetInfoByLevelId(self, type, levelId)
    local retInfo = nil
    if type >= 0 and levelId >= 0 then
        local allStoryInfo = __GetAllInfo(self)

        if allStoryInfo ~= nil then
            for i, info_token in pairs(allStoryInfo) do
                if info_token.Type == type and info_token.LevelId == levelId then
                    retInfo = info_token
                    break
                end
            end
        end
    end
    return retInfo
end

local function GetInfosByLevelId(self, type, levelId)
    local retInfos = {}
    if type >= 0 and levelId >= 0 then
        local allStoryInfo = __GetAllInfo(self)
        if allStoryInfo ~= nil then
            for i, info_token in pairs(allStoryInfo) do
                if info_token.Type == type and info_token.LevelId == levelId then
                    table.insert(retInfos, info_token)
                end
            end
        end
    end
    return retInfos
end

-------------------------------addByWbb-----------------------------
local function GetInfoById(self, Id)
    local retInfo=nil
    local allStoryInfo = __GetAllInfo(self)
    if allStoryInfo ~= nil then
        retInfo = allStoryInfo[Id]
    end
    return retInfo
end
-------------------------------addByWbb-----------------------------
local function OnStoryStart(self, info)
    if info ~= nil then
        local next = info.Next
        if next == nil or next <= info.Index then
            next = info.Index + 1
        end

        local msgId = MsgIDDefine.PBUSER_STORY_SAVE_REQUEST
        local msgObj = MsgIDMap[msgId]()
        msgObj.type = info.Type
        msgObj.storyId = next
        Logger.Log("Data Upload:" .. info.Type .. "|||" .. next)
        NetManager:GetInstance():SendMessage(msgId, msgObj)
    end
end

local function CoRequireStoryInfo(self, type)
    local waitFin = false
    local responeData = nil
    local msgId = MsgIDDefine.PBUSER_STORY_TAKE_REQUEST
    local msgObj = MsgIDMap[msgId]()
    msgObj.type = type
    NetManager:GetInstance():SendMessage(msgId, msgObj, function(res_obj)
        if res_obj ~= nil then
            Logger.Log("Data Require:" .. res_obj.Packages.type .. "|||" .. res_obj.Packages.storyId)
            responeData = {
                type = res_obj.Packages.type,
                index = res_obj.Packages.storyId
            }
            waitFin = true
        end
    end
    )
    coroutine.waituntil(function()
        return waitFin
    end)
    return coroutine.yieldbreak(responeData)
end

local function RequireStoryInfoCallback(self, type, callback)
    coroutine.start(function()
        local resData = CoRequireStoryInfo(self, type)
        if callback ~= nil then
            callback(resData)
        end
    end
    )
end

local function Clear(self)
    self.CurStoryInfo = nil
    self.LastStoryInfo = nil
end

StoryData.__init = __init
StoryData.CoRequireStoryInfo = CoRequireStoryInfo
StoryData.RequireStoryInfoCallback = RequireStoryInfoCallback
StoryData.OnStoryStart = OnStoryStart
StoryData.GetInfoByIndex = GetInfoByIndex
StoryData.GetInfoByLevelId = GetInfoByLevelId
StoryData.GetInfosByLevelId = GetInfosByLevelId
StoryData.Clear = Clear
StoryData.GetInfoById = GetInfoById
return StoryData