---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/2/25 17:19
---

local ChatData = BaseClass("ChatData", Singleton)
--local temp_data = {"洪荒寒来暑往","洪荒寒来暑往洪荒寒来暑往洪荒寒来暑往洪荒寒来暑往洪荒","洪荒寒来暑往洪荒寒来暑往洪荒寒来暑往洪荒寒来暑往洪荒11111111111111111111111111112wwwwor"}
local master_hell_data = DataUtil.GetData("master_hell")

local EnumChannelType = {
    World = 0, --世界消息
    System = 1, --系统消息
    Team = 2, --队伍消息
    Nation = 3, --国战消息
    Alliance = 4, --联盟消息
    SameCity = 5, --同城消息
}

local function __init(self)
    self.world_list = {}

    --上次读取标识第一次不传， int类型
    self.chat_flag = { false, false }
    self.chat_request_state = 0
    self.system_list = {}
    self.nation_list = {}
    self.alliance_list = {}
end

local function GetChatInfo(self)
    if self.chat_request_state ~= 0 then
        return
    end
    local msdId = MsgIDDefine.PBUSER_GET_CHAT_INFO_REQUEST
    local msdObj = MsgIDMap[msdId]()

    --type  0:世界消息，1:系统消息，2:队伍消息 3：国战频道 4：联盟频道
    for i = 1, 5 do
        --系统消息不请求了
        if i ~= 2 then
            local temp_chat = msdObj.chatInfoRequest:add()
            temp_chat.type = i - 1
            if self.chat_flag[i] then
                temp_chat.flag = self.chat_flag[i]
            end
            if i - 1 == 4 and NationUnionData:GetInstance():GetPlayerNationUnionData() ~= 0 then
                temp_chat.recverId = NationUnionData:GetInstance():GetPlayerNationUnionData()
                --elseif i - 1 == 2 and TeamID ~= 0 then
                --    temp_chat.recverId = TeamID
            end
        end
    end

    self.chat_request_state = 1

    --[[
        发送相关协议
        msg_id 消息号
        msg_obj 消息对象
        callbackFunc 回调函数
        params 增加自定义参数
        show_mask 是否有蒙版 true 有
        resendMode 重发模式 假如没有发送成功是否需要重发 重发三次后如果还没收到则断开连接
    ]]
    NetManager:GetInstance():SendMessage(msdId, msdObj, function(msg_obj)
        self.chat_request_state = 0
        if msg_obj.OpCode ~= 0 then
            -- opcode-1代表连接超时 1表示服务器返回错误
            Logger.Log(" msg_obj.OpCode ~= 0 PBUSER_GET_CHAT_INFO_REQUEST~ 20010" .. msg_obj.OpCode)
            --            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end
        local allChatInfo = msg_obj.Packages.chatInfoResponse
        if allChatInfo ~= nil and not allChatInfo._is_null then
            local userId = ClientData:GetInstance():GetServerUserId()
            local num = 0
            for i, v in ipairs(allChatInfo) do
                self.chat_flag[v.type + 1] = v.flag

                if v.type == EnumChannelType.World then
                    local world_inset_pos = #self.world_list + 1
                    if v.chatInfo ~= nil then
                        for m, n in ipairs(v.chatInfo) do
                            local temp = {}
                            temp.is_mine = userId == n.uid
                            temp.name = n.name
                            temp.frame = n.framd
                            temp.head = n.head
                            temp.content = n.content
                            temp.id = n.uid
                            temp.lv = math.modf(n.level)
                            temp.hellInfo = master_hell_data[n.hellLevel]

                            table.insert(self.world_list, world_inset_pos, temp)
                            num = num + 1
                        end
                    end
                elseif v.type == EnumChannelType.System then
                    --暂时不走这里
                elseif v.type == EnumChannelType.Team then

                elseif v.type == EnumChannelType.Nation then
                    local nation_inset_pos = #self.nation_list + 1
                    if v.chatInfo ~= nil then
                        for _, n in ipairs(v.chatInfo) do
                            local temp = {}
                            temp.is_mine = userId == n.uid
                            temp.name = n.name
                            temp.content = n.content
                            temp.id = n.uid
                            temp.lv = math.modf(n.level)
                            temp.head = n.head
                            temp.hellInfo = master_hell_data[n.hellLevel]

                            table.insert(self.nation_list, nation_inset_pos, temp)
                            num = num + 1
                        end
                    end
                elseif v.type == EnumChannelType.Alliance then
                    local alliance_inset_pos = #self.alliance_list + 1
                    if v.chatInfo ~= nil then
                        for _, n in ipairs(v.chatInfo) do
                            local temp = {}
                            temp.is_mine = userId == n.uid
                            temp.name = n.name
                            temp.content = n.content
                            temp.id = n.uid
                            temp.lv = math.modf(n.level)
                            temp.head = n.head
                            temp.hellInfo = master_hell_data[n.hellLevel]

                            table.insert(self.alliance_list, alliance_inset_pos, temp)
                            num = num + 1
                        end
                    end
                end
            end
            if num > 0 then
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CHAT_UPDATE, 1)
            end
        end

    end, nil, false, false)
end

local function FindPlayerInfo(self, id)
    for i, v in ipairs(self.world_list) do
        if v.id == id then
            return v
        end
    end
    return nil
end

local function AddNewChat(self, str, type)
    local receiverID = 0
    local msdId = MsgIDDefine.PBUSER_CHAT_TO_SERVER_REQUEST
    local msdObj = MsgIDMap[msdId]()
    msdObj.type = type
    msdObj.content = str
    if type == EnumChannelType.Alliance then
        receiverID = UserData:GetInstance().nationUnionId
    end
    msdObj.recverId = receiverID
    NetManager:GetInstance():SendMessage(msdId, msdObj, function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("OnRecvPveStart出错了~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end
        GetChatInfo(self)
    end)
end

local function SysChatIndication(self, data)
    if data ~= nil and not data._is_null then
        table.insert(self.system_list, { type = data.type, content = data.content, chapterId = data.chapterId, roomId = data.roomId, password = data.password })
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_CHAT_UPDATE, 2)
    end
end
--开始请求聊天信息
local function BeginRequestChatInfo(self)
    if self.timer ~= nil then
        self.timer:Stop()
    end
    GetChatInfo(self)
    self.timer = TimerManager:GetInstance():GetTimer(2, GetChatInfo, self)
    self.timer:Start()
end

local function EndRequsetChatInfo(self)
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

local function __delete(self)
    self.world_list = nil

    --上次读取标识第一次不传， int类型
    self.chat_flag = nil
    self.chat_request_state = 0
    self.system_list = nil
    self.nation_list = nil
    self.alliance_list = nil
end

ChatData.SysChatIndication = SysChatIndication
ChatData.FindPlayerInfo = FindPlayerInfo
ChatData.BeginRequestChatInfo = BeginRequestChatInfo
ChatData.EndRequsetChatInfo = EndRequsetChatInfo
ChatData.__delete = __delete
ChatData.__init = __init
ChatData.AddNewChat = AddNewChat
return ChatData