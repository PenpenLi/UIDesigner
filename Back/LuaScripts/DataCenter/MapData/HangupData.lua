---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/1/24 14:11
---
local HangupItem = {
    state = 0,--0-无,1-开启 ，2-巡逻，3-领奖
    id = 0,
    name = "",
    open_level = false,
    drop_show = false,
    drop_show_random = false,
    drop_show_up = false,
    chapter_id = 0,
    limit_power = 0,
    up_power = 0,
    remain_time = 0,
    begin_time = 0,
    totle_time = 0,
    team = {}
}
local HangupData = BaseClass("HangupData", Singleton)
local Hangup = DataClass("HangupItem", HangupItem)
local function __init(self)
    -- 所有服务器列表
    self.all_level = {}
    self.select_cards = {}
end

local function CheckOpen(data)
    if data.state == 0 and  MapData:GetInstance():CheckPassLevel(data.open_level) then
        data.state = 1
    end

end

local function InitLevelData(ori,des,id)
    ori.id = id
    ori.name = des.Name
    ori.open_level = des.NeedPlotLevel
    ori.drop_show = des.DropShow
    ori.drop_show_random = des.DropRandomShow
    ori.drop_show_up = des.DropUpShow
    ori.chapter_id = des.ChaId
    ori.limit_power = des.LimitPower
    ori.up_power = des.PowerUp
end
local function RefreshTeamNum(self)
    self.cur_team_num = 0
    for i, v in pairs(self.all_level) do
        if v.state > 1 then
            self.cur_team_num = self.cur_team_num +1
        end
    end
end

local function ClearLevelTeam(self,id)
    local cur_level = self.all_level[id]
    if cur_level ~= nil and #cur_level.team>0 then
        for i, v in ipairs(cur_level.team) do
            self.select_cards[v] = false
        end
        cur_level.team = {}
        cur_level.state = 1
        RefreshTeamNum(self)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_TEAM_CHANGE)
    end
end

local function ClearAllTeam(self)
    for i, v in pairs(self.all_level) do
        if v ~= nil and #v.team>0 then
            for i, v in ipairs(v.team) do
                self.select_cards[v] = false
            end
            v.team = {}
            v.state = 1
        end
    end
    RefreshTeamNum(self)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_TEAM_CHANGE)
end

local function UpdateHangUpData(self,data)
    local cur_level = self.all_level[data.levelId]
    if cur_level ~= nil then
        cur_level.begin_time = data.startTime
        cur_level.totle_time = data.time * 60
        local num = (TimeSyncManager:GetInstance():GetSimulationJavaMS() - data.startTime)/1000
        if num >=  cur_level.totle_time then
            cur_level.state = 3
        else
            cur_level.state = 2
        end
        if #cur_level.team==0  then
            for i, v in ipairs(data.teamIds) do
                table.insert(cur_level.team,v)
                self.select_cards[v] = true
            end
        end
    end
end

local function RefreshHangupData(self,data)
    UpdateHangUpData(self,data)
    RefreshTeamNum(self)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_TEAM_CHANGE)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_HANG_UP_REFRESH)
end
--检测是否可以挂机
local function CheckCanHangup(self)
    local is_open = MapData:GetInstance():CheckPassLevel(self.first_level_con)
    if not is_open then
        local chapter =self.first_level_con- math.floor(self.first_level_con/1000)*1000
        UISpecial:GetInstance():UITipText( string.format(DataUtil.GetClientText(100029),math.floor(chapter/100),chapter%100))
        return false
    else
        return true
    end

end

local function ParseServerData(self,data)
    local hang_up_data = DataUtil.GetData("hang_up_level")
    if data ~= nil and not data._is_null then
        for i, v in ipairs(data) do
            if hang_up_data[v.levelId] ~= nil then
                local new_level = Hangup.New()
                new_level.state = 2
                InitLevelData(new_level,hang_up_data[v.levelId],v.levelId)
                self.all_level[new_level.id] = new_level
                UpdateHangUpData(self,v)
            end
        end
    end
    local all_level_id = {}
    for i, v in pairs(hang_up_data) do
        if self.all_level[i] == nil then
            local new_level = Hangup.New()
            InitLevelData(new_level,v,i)
            self.all_level[new_level.id] = new_level
            CheckOpen(new_level)
        end
        table.insert(all_level_id,i)
    end
    if #all_level_id>0 then
        table.sort(all_level_id)
        self.first_level_con = hang_up_data[all_level_id[1]].NeedPlotLevel
    end
    RefreshTeamNum(self)
end

local function QuickOnHook(levelId)
    local msdId = MsgIDDefine.PBCHAPTER_USE_ONHOOK_ITEM_REQUEST
    local msdObj = MsgIDMap[msdId]()
    msdObj.levelId = levelId
    NetManager:GetInstance():SendMessage(msdId,msdObj,function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("OnRecvPveStart出错了~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end
        DataUtil.ParseDropItem(msg_obj.Packages.reward)
        if not DataUtil.CheckDropItemIsNull(msg_obj.Packages.reward) then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.reward)
        end
        --
        BackpackData:GetInstance():UpdateItemData(1604001,-1)
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100030))
        --SdkManager:GetInstance().DataReport:PurchaseTrace({[1]="派遣次数",[2]=1,[3]=0});
    end)
end
HangupData.CheckCanHangup = CheckCanHangup
HangupData.QuickOnHook = QuickOnHook
HangupData.ClearAllTeam = ClearAllTeam
HangupData.CheckOpen = CheckOpen
HangupData.ClearLevelTeam = ClearLevelTeam
HangupData.ParseServerData = ParseServerData
HangupData.RefreshHangupData = RefreshHangupData
HangupData.__init = __init
return HangupData