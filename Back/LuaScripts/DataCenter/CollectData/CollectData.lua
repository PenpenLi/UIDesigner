---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/2/20 16:19
---

local CollectData = BaseClass("CollectData", Singleton)
local function __init(self)
    self.all_info = {}
    self.data_state = 0  -- 0-为请求 1-请求中  2-请求结束
end
--请求收集信息
local function RequestCollectData(self)
    if self.data_state ~= 0 then
        return
    end
    local msdId = MsgIDDefine.PBTEAM_COLLECT_INFO_REQUEST
    self.data_state = 1
    NetManager:GetInstance():SendMessage(msdId,nil,function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("OnRecvPveStart出错了~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            self.data_state = 0
            return
        end
        self.data_state = 2
        self.all_info = {}
        if msg_obj.Packages.info and not msg_obj.Packages.info._is_null then
            for i, v in ipairs(msg_obj.Packages.info) do
                if self.all_info[v.groupId] == nil then
                    self.all_info[v.groupId] = {isReward = false,mission = {}}
                end
                self.all_info[v.groupId].isReward = v.isReward
                if v.missionId and not v.missionId._is_null then
                    for m, n in ipairs(v.missionId) do
                        self.all_info[v.groupId].mission[n] = true
                    end
                end
            end
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_COLLECT_INFO_END)
    end)
end
--激活请求
local function CollectActive(self,groupId,mission,cost)
    local msdId = MsgIDDefine.PBTEAM_COLLECT_MISSION_ACTIVATE_REQUEST
    local msdObj = MsgIDMap[msdId]()
    msdObj.groupId = groupId
    msdObj.missionId = mission
    NetManager:GetInstance():SendMessage(msdId,msdObj,function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("OnRecvPveStart出错了~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end
        if self.all_info[groupId] == nil then
            self.all_info[groupId] = {isReward = false,mission = {}}
        end
        self.all_info[groupId].mission[mission] = true
        for i, v in ipairs(cost) do
            BackpackData:GetInstance():UpdateItemData(v.Id,-v.Val)
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_COLLECT_INFO_END)
    end)
end

--领取奖励
local function CollectReward(self,groupId)
    local msdId = MsgIDDefine.PBTEAM_COLLECT_GROUP_ACTIVATE_REQUEST
    local msdObj = MsgIDMap[msdId]()
    msdObj.groupId = groupId
    NetManager:GetInstance():SendMessage(msdId,msdObj,function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("OnRecvPveStart出错了~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end
        if self.all_info[groupId] == nil then
            self.all_info[groupId] = {isReward = false,mission = {}}
        end
        self.all_info[groupId].isReward = true
        DataUtil.ParseDropItem(msg_obj.Packages.dropItem)
        if not DataUtil.CheckDropItemIsNull(msg_obj.Packages.dropItem) then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.dropItem)
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_COLLECT_INFO_END)
    end)
end


--溶解请求
local function DissolveItem(self,all_item)
    local msdId = MsgIDDefine.PBTEAM_COLLECT_ITEM_DESCOMPOSE_REQUEST
    local msdObj = MsgIDMap[msdId]()
    for i, v in ipairs(all_item) do
        msdObj.itemId:append(v.item.id)
    end
    NetManager:GetInstance():SendMessage(msdId,msdObj,function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("OnRecvPveStart出错了~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        end
        for i, v in ipairs(all_item) do
            BackpackData:GetInstance():UpdateItemData(v.item.id,-v.item.haveNum)
        end
        DataUtil.ParseDropItem(msg_obj.Packages.dropItem)
        if not DataUtil.CheckDropItemIsNull(msg_obj.Packages.dropItem) then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommGetRewards, msg_obj.Packages.dropItem)
        end
    end)
end


local function GetCollectInfo(self,group,mission)
    if self.data_state == 0 then
        RequestCollectData(self)
    end
    if not self.all_info[group] or not self.all_info[group].mission[mission] then
        return nil
    end
    return self.all_info[group].mission[mission]
end

local function GetCollectReward(self,group)
    if self.data_state == 0 then
        RequestCollectData(self)
    end
    if not self.all_info[group]then
        return nil
    end
    return self.all_info[group].isReward
end

CollectData.__init = __init
CollectData.DissolveItem = DissolveItem
CollectData.CollectReward = CollectReward
CollectData.CollectActive = CollectActive
CollectData.GetCollectInfo = GetCollectInfo
CollectData.GetCollectReward = GetCollectReward
return CollectData