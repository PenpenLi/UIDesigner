---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ljl.
--- DateTime: 2018/12/4 14:59
---
local MailSingleData={
   --邮件id
    id = 0,
    --单封邮件名字
    titleName = "",
    --发送者名字
    sendName = "",
    --发送时间
    sendTime = 1,
    --邮件的状态1：未读 2：已读
    mailState = 1,
    --邮件内容
    mailContent ="",
    --邮件类型  1:系统邮件 2: 战报邮件
    mailType = 1,
    --附件状态   1无附件 2未领取 3已领取
    mailDrawst = 1,
    --邮件物品列表
    itemStr = "",
    awardlist={ id=1,num=1,itemquality="",itemtype=""}
}

local MailData=BaseClass("MailData",Singleton)
local MailSingle = DataClass("MailSingle",MailSingleData)
local MailSingleAward= require "DataCenter/ShowItemData/ShowItemData"
local allCardData
local allItemData

local function __init(self)
    --所有的邮件数据
    self.mails={}
    --是否显示红点
    self.isShowRedPoint=false
    self.isShowRedPointState = false
    self.isRequest = false
    allCardData = DataUtil.GetData("card")
    allItemData = DataUtil.GetData("item")
end

--拆分字符
local function Split(self,szFullString, szSeparator)
    local nFindStartIndex = 1
    local nSplitIndex = 1
    local nSplitArray = {}
    while true do
        local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
        if not nFindLastIndex then
            nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
            break
        end
        nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
        nFindStartIndex = nFindLastIndex + string.len(szSeparator)
        nSplitIndex = nSplitIndex + 1
    end
    return nSplitArray
end
--设置邮件奖励信息
local function ParseAwardInfo(self,awardmail)
    local awardstr={}
    local mailStr=self:Split(awardmail,"|")
    if mailStr==nil then
        return
    end
    for i = 1, #mailStr do
       local mailreward=self:Split(mailStr[i],"#")
        if mailreward==nil then
            return
        end
        local mailsingleitem=MailSingleAward.New()
        mailsingleitem.id = tonumber(mailreward[1])
        local itemData = allItemData[tonumber(mailsingleitem.id)]
        if itemData ~=nil then
            mailsingleitem.name = itemData.Name
            mailsingleitem.quality = itemData.Quality
            mailsingleitem.type = 1
            mailsingleitem.icon = itemData.Icon
            mailsingleitem.num = tonumber(mailreward[2])
            mailsingleitem.state = 1
            table.insert(awardstr,mailsingleitem)
        end
    end
    return awardstr
end

--保存邮件数据
local function ParseMailListFromServer(self,mails)
    self.mails = {}
    if mails==nil then
        Logger.LogError("邮件数据为空")
        return
    end
    for _, v in ipairs(mails.mails) do
        local mailItem=MailSingle.New()
        mailItem.id=v.mailId
        mailItem.sendName = v.sendName
        mailItem.sendTime = v.sendTime
        mailItem.mailState = v.state
        mailItem.titleName = v.title
        mailItem.mailContent = v.content
        mailItem.itemStr = v.rewards
        mailItem.mailDrawst = v.drawSt
        mailItem.mailType = v.mailType

        if  mailItem.mailDrawst ~= 1  then
            mailItem.awardlist={}
            local strlist= self:ParseAwardInfo(mailItem.itemStr)
            mailItem.awardlist=strlist
            --Logger.Log("我maildata邮件的东西 ~~ ； ".. table.dump( mailItem.awardlist,nil,5))
        else
            mailItem.awardlist={}
        end
        table.insert(self.mails,mailItem)
    end
    table.sort(self.mails,function (a,b) return a.sendTime > b.sendTime end)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMail)
    if self.isRequest then
        self.isRequest = false
    end

end

--获取所有邮件数据
local function GetAllMailsData(self)
    return self.mails
end

local function GetMailIsRequest(self)
    return self.isRequest
end

--获取邮件红点状态
local function GetMailRedState(self)
    return self.isShowRedPoint
end
--设置邮件为已读状态
local function SetMailReadState(self,mail_id)
    if self.mails~=nil then
        for _, v in ipairs(self.mails) do
            if v.id==mail_id then
                v.mailState=2
            end
        end
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_SINGLE_MAIL_READ_STATE)
end
--设置邮件领取
local function SetMailGetState(self,mail_id)
    if self.mails~=nil then
        for _, v in ipairs(self.mails) do
            if v.id==mail_id then
                v.mailDrawst=3
            end
        end
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_SINGLE_MAIL_READ_STATE)
end

--设置邮件一键领取状态
local function SetGetAllMailData(self,all_mail_ids)
    if self.mails~=nil and  all_mail_ids.mailIds~=nil then
        for i, v in ipairs(self.mails) do
            if  v.mailDrawst==2 then
                v.mailDrawst=3
            end
        end
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.On_SINGLE_MAIL_DELEGATE_STATE)
end
--设置邮件的单封删除
local function SetSingleMailDelegate(self,mail_id)
    if self.mails~=nil then
        for i= #self.mails,1,-1 do
            if self.mails[i].id==mail_id then
                table.remove(self.mails, i)
            end
        end
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.On_SINGLE_MAIL_DELEGATE_STATE)
end
--设置邮件红点状态（限于可主动请求的）
local function SetMailRedPointState(self,redstate)
    self.isShowRedPoint=redstate
end

--邮件红点
local function SetMailRedPointShow(self,redstate)
    self.isShowRedPointState=redstate
end

--登录是否需要请求邮件
local function SetMailIsGetAll(self,isRequest)
    self.isRequest = isRequest
end

--设置邮件数据为一键删除状态
local function SetDelegateAllMailData(self,all_mail_ids)

    if self.mails~=nil and all_mail_ids ~=nil then
        local index = 1
        while index <= #self.mails do
            local found = false
            for _, v in ipairs(all_mail_ids) do
                if v ==  self.mails[index].id then
                    table.remove(self.mails, index)
                    found = true
                    break
                end
            end
            if found then

            else
                index = index + 1
            end
        end

        --for i= #all_mail_ids.mailIds,1,-1 do
        --    if self.mails[i].id==all_mail_ids.mailIds[i] then
        --        table.remove(self.mails, i)
        --    end
        --end
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.On_SINGLE_MAIL_DELEGATE_STATE)
end

--[[发送邮件状态
local function SendMailRedPointRequest(self)
    local mail_redpoint_id=MsgIDDefine.PBUSER_LOGIN_SYNC_MAIL_REQUEST
    --local mail_redpoint=MsgIDMap[mail_redpoint_id]()
    NetManager:GetInstance():SendMessage(mail_redpoint_id,nil)
    Logger.Log("请求获取登陆邮件红点状态")
    NetManager:GetInstance():AddListener(MsgIDDefine.PBUSER_LOGIN_SYNC_MAIL_RESPONSE,self.ReceiveMailRedPointResponse,self)
end
--接受邮件状态
local function ReceiveMailRedPointResponse(self,msg_obj)
    NetManager:GetInstance():RemoveListener(MsgIDDefine.PBUSER_LOGIN_SYNC_MAIL_RESPONSE,self.ReceiveMailRedPointResponse)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("出错了的消息号：~".."PBUSER_LOGIN_SYNC_MAIL_RESPONSE")
        return
    end
    if msg_obj.Packages.red ==2 then
        self.isShowRedPoint=true
    else
        self.isShowRedPoint=false
    end
end--]]
--增量获取玩家邮件
local function SendGetAddMailRequest(self)
    local mail_new_id=MsgIDDefine.PBUSER_GET_ADD_MAIL_REQUEST
    --local mail_new=(MsgIDMap[mail_new_id])()
    NetManager:GetInstance():SendMessage(mail_new_id, nil, Bind(self,self.ReceiveGetAddMailResponse))
end
--接受增量获取玩家邮件
local function ReceiveGetAddMailResponse(self,msg_obj)
    if msg_obj.OpCode ~= 0 then
        Logger.Log("出错了~")
        return
    else
        self.isShowRedPoint=false
       -- Logger.Log("===邮件数据已获得======"..table.dump(msg_obj,nil,10))
        if msg_obj.Packages.mails~=nil and #msg_obj.Packages.mails>0 then
            self:ParseMailListFromServer(msg_obj.Packages)
        end
    end
end
local function Sort(self)
    table.sort(self.mails,function (a,b)
        if a.mailDrawst==2 and b.mailDrawst==2 then
            return a.sendTime>b.sendTime
        else
            if a.mailDrawst ==2 or b.mailDrawst==2 then
                return a.mailDrawst==2
            else
                if a.mailDrawst==1 and b.mailDrawst==1 then
                    if a.mailState==1 and b.mailState==1 then
                        return a.sendTime>b.sendTime
                    else
                        if a.mailState ==1 or b.mailState==1 then
                            return a.mailState==1
                        else
                            return a.sendTime>b.sendTime
                        end
                    end
                else
                    if a.mailDrawst ==1 or b.mailDrawst==1 then
                        return a.mailDrawst==1
                    else
                        return a.sendTime>b.sendTime
                    end
                end
            end
        end
    end)
end

MailData.SetMailRedPointShow = SetMailRedPointShow
MailData.GetAllMailsData = GetAllMailsData
MailData.GetMailRedState=GetMailRedState
MailData.SetGetAllMailData=SetGetAllMailData
MailData.SetSingleMailDelegate=SetSingleMailDelegate
MailData.SetDelegateAllMailData = SetDelegateAllMailData
MailData.SetMailRedPointState = SetMailRedPointState
MailData.ParseAwardInfo=ParseAwardInfo
MailData.Split=Split
MailData.GetMailIsRequest = GetMailIsRequest
MailData.SetMailIsGetAll = SetMailIsGetAll
MailData.ParseMailListFromServer = ParseMailListFromServer
MailData.SetMailReadState=SetMailReadState
MailData.SetMailGetState=SetMailGetState
MailData.SendGetAddMailRequest=SendGetAddMailRequest
MailData.ReceiveGetAddMailResponse=ReceiveGetAddMailResponse
MailData.__init=__init
MailData.Sort = Sort
return MailData