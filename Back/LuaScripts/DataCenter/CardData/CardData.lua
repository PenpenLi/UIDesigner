---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zjy.
--- DateTime: 2018/11/6 10:02
---
local CardData = BaseClass("CardData", Singleton)
local propertyList = DataUtil.GetData("property")
local allCardData = DataUtil.GetData("card")
local allRelationData = DataUtil.GetData("card_relation")
local StaticSkillData= DataUtil.GetData("skill_exchange")
local static_skill_break=DataUtil.GetData("skill_break")
local static_skill_break_debris = DataUtil.GetData("skill_break_debris")
local all_hell_name_data =  DataUtil.GetData("hell_name")
local StaticGlobalData = DataUtil.GetData("global")
local StaticEquip=DataUtil.GetData("eqp")
local StaticEquipSuit=DataUtil.GetData("eqp_suit")
local xiLianList = DataUtil.GetData("xilian")
local nationalGlobal = DataUtil.GetData("national_global")
local CardItemData = {
    --暂定
    --TODO 不知道啥用的東東  回頭 改下
    --状态 0-未获得，1-已获得
    state = 0,
    critRateJ = 0,
    --原有属性
    --卡牌id
    id = 0,
    --卡牌名称
    name = "",
    --卡牌绰号
    nickName = "",
    --卡牌定位
    tag = {},
    --卡牌类型  1-寄灵人，2-守护灵
    type = 0,
    --卡牌评级 1-N 2-R 3-SR 4-SSR
    quality = 0,-----------------------------------
    --水晶颜色 1-红，2-黄，3-蓝
    crystalType = 0,
    --性别  0-gay,1-男，2-女
    sex = 0,
    --守护灵类型  1-神武灵，2-魔武灵，3-仙武灵，4-兽武灵，5-人武灵
    subType = 0,
    --守护灵武器id
    weaponId = 0,
    --防御基值
    r = 0,
    --召唤消耗
    callCost = 0,
    --转换CD
    callCd = 0,
    --自身技能
    selfSkills = {},
    --技能卡槽数量
    skillBlankAmount = 0,
    --入场技能
    EnterSkill = 0,
    --重复获得
    rpCvt = {},
    --合成碎片id
    debrisId = 0,
    --合成需要的碎片数量
    composeNum = 0,
    --卡牌icon
    icon = "",
    --中头像
    headIconMid = "",
    --大头像
    headIconBig = "",
    --卡牌立绘
    painting = "",
    --卡牌纹理
    kpkm="",
    --卡牌立绘位置
    paintingPos = { x = 0, y = 0 },
    --卡牌icon
    cardFace = "",
    --描述
    describe = "",
    --关联人
    relation = "",
    --属性筛选掩码
    mask = 0,
    --成长属性
    --装备的技能
    wearSkills = {},
    --默认技能
    initskill=0,
    --卡牌等级
    level = 0,
    --卡牌星星
    starlv = 1,
    --卡牌最大星星
    maxstarlv = 5,
    --卡牌最大等级  暂时先不赋值  如果没有  删除
    maxLevel = 0,
    --地狱道等级
    hellLevel = 0,
    --火的iD
    ghost_id=0,
    --火的下表
    ghost=0,
    --最大火
    maxghost=0,
    --火ID
    --下次火信息（限制等级--）
    ghost_info={},
    --该地狱道火的id 缘分激活信息
    ghost_data={},
    --守护灵
    guard = 0,
    -- 全部属性  攻击力 防御 血量  暴击 暴击伤害 效果命中 效果抵抗   攻击/防御/生命 百分百加成    格挡，穿透 武器攻击力 武器防御   武器血量
    property={},
    initproperty = {},
    --升星 升级属性 目前  只有 攻防血
    lvandstarproperty={},
    artifactsproperty={},
    finalProperty={},
    --Card改变前的属性
    beforeproperty={},
    --取整 成长的属性
    upproperty={},
    --共享屬性 寄灵人专有
    shareproperty={},
    --缘分属性
    relationproperty={},
    --魂火属性
    ghostproperty={},
    --消耗一个碎片获得的技能经验数量
    --装备系统
    equip={},
    equipproperty={},
    pieceSkillExp = 0,
    --专属武器
    personalWeapon = {},
    --可解锁专属武器 等级
    unlockPersonalWeapon = 0,
    --宝珠系统（暂时没有，待定）
    pearl = {},
    --洗练属性
    forgeproperty={atk=0,def=0,hp=0},
    forgeGroup=1,
    forgeloc=1,
    --洗练临时属性
    tempforgepproperty={atk=0,def=0,hp=0},
    tempforgeGroup=1,
    tempforgeloc=1,
    --洗练技能
    forgeSkill={},
    --洗练技能临时
    tempforgepSkill={},
    --个人战斗力
    power = 0,
    --当前地狱道名称
    nowHellName = "",
    --下级地狱道名称
    nextHellName = "",
    --进阶地狱道消耗道具组
    hellUpCostGroup = {},
    --受地狱道影响的最大等级
    maxLevelByHell = 0,
    --进阶地狱道影响的最大等级
    maxLevelByNextHell = 0,
    --地狱道小等级在名字后显示
    hellSmallLevel = 0,
    --根据地狱道等级设置名字颜色
    hellNameColor = "FFFFFF",
    hellNameBg="ui_dtex_Quality_106",

    InitProper_All=function(self,_proper)

        for i, v in pairs(propertyList) do
            _proper[i]=0
        end
    end,
    InitProper_Three=function(self,_proper)
        _proper[101]=0
        _proper[102]=0
        _proper[103]=0
    end,
    InitProper=function(self)
        self:InitProper_All(self.initproperty)
        self:InitProper_All(self.property)
        self:InitProper_All(self.artifactsproperty)
        self:InitProper_All(self.finalProperty)
        self:InitProper_All(self.relationproperty)
        self:InitProper_All(self.ghostproperty)
        self:InitProper_All(self.equipproperty)
        --self:InitProper_All(self.forgeproperty)
       -- self:InitProper_All(self.tempforgepproperty)
        self:InitProper_All(self.lvandstarproperty)

        self:InitProper_Three(self.beforeproperty)
        self:InitProper_Three(self.upproperty)
        self:InitProper_Three(self.shareproperty)
    end,
    AddProperty = function(self, _property, _type, _num, add)
        if type(_type) == "number" and type(_num) == "number" then
            if _property[_type]~=nil then
                if add then
                    _property[_type] = _property[_type] + _num
                else
                    _property[_type] = _num
                end
            end
        end
    end,
    UpdateFinalProperty = function(self)
        for i, v in pairs(propertyList) do
            self.property[i]=self.initproperty[i]+self.lvandstarproperty[i]+self.artifactsproperty[i]+self.equipproperty[i]+self.relationproperty[i]
            if self.personalWeapon and self.personalWeapon.status == 1 then
                self.property[i]=self.property[i]+self.personalWeapon. all_property[i]
            end
            if self.type~=1 then
                self.property[i]=self.property[i]+self.ghostproperty[i]
            end
        end
        local star_basepropall=allCardData[self.id].stars[self.starlv].BasePropAll+1
        self.finalProperty[101] = self.property[101]*(1+self.property[108])*star_basepropall+self.property[111]
        self.finalProperty[102] = self.property[102]*(1+self.property[109])*star_basepropall+self.property[112]
        self.finalProperty[103] = self.property[103]*(1+self.property[110])*star_basepropall+self.property[113]
        --[[
            if 1102026==self.id and i==111 then
                Logger.Log("基础"..self.initproperty[i])
                Logger.Log("等级升星地狱道"..self.lvandstarproperty[i])
                Logger.Log("神器"..self.artifactsproperty[i])
                Logger.Log("缘分"..self.relationproperty[i])
                Logger.Log("装备"..self.equipproperty[i])
                if self.personalWeapon and self.personalWeapon.status == 1 then
                    Logger.Log("武器"..self.personalWeapon.property[i])
                end
            end
--]]
       --[[
        if 1102026==self.id  then
            for i = 101, 120 do
                if self.finalProperty[i]>0 then
                   print(i.."ID--".. self.finalProperty[i].."总")
                end
            end
        end
        if 1102026==self.id  then
            for i = 101, 120 do
                if self.lvandstarproperty[i] >0 then
                    print(i.."ID--"..self.lvandstarproperty[i].."等级升星地狱道")
                end
                if self.initproperty[i]>0 then
                    print(i.."ID--"..self.initproperty[i].."卡牌基础")
                end
                if self.artifactsproperty[i]>0 then
                    print(i.."ID--"..self.artifactsproperty[i].."神器")
                end
                if self.relationproperty[i]>0 then
                    print(i.."ID--"..self.relationproperty[i].."缘分")
                end
                if self.equipproperty[i]>0 then
                    print(i.."ID--"..self.equipproperty[i].."装备")
                end
                if self.type~=1 then
                    if self.ghostproperty[i]>0 then
                        print(i.."ID--"..self.ghostproperty[i].."火")
                    end
                end
                if self.personalWeapon and self.personalWeapon.status == 1 then
                    if self.personalWeapon.all_property[i]>0 then
                        print(i.."ID--"..self.personalWeapon.all_property[i].."专属武器")
                    end
                end
            end
        end
--]]

        for i, v in pairs(propertyList) do
            if i>=101  and  i<=103 then
                self.finalProperty[i] = math.floor(self.finalProperty[i])
                self.upproperty[i] = math.floor(self.finalProperty[i] - self.beforeproperty[i])
            else
                self.finalProperty[i]=self.property[i]
            end
        end

        local all_power=0
        for i, v in pairs(propertyList) do
            if i==105 then
                all_power=all_power+(self.finalProperty[i]-self.critRateJ)*propertyList[i].BsFactor
            else
                all_power=all_power+self.finalProperty[i]*propertyList[i].BsFactor
            end
        end
        self.power=all_power
        --[[
        if 1102011==self.id then
            print("星星系数"..star_basepropall)
            print("攻击"..self.finalProperty[101].."基础="..self.property[101].."系数"..self.property[108].."额外"..self.property[111])
            print("防御"..self.finalProperty[102].."基础="..self.property[102].."系数"..self.property[109].."额外"..self.property[112])
            print("血量"..self.finalProperty[103].."基础="..self.property[103].."系数"..self.property[110].."额外"..self.property[113])
            print(self.name.."战斗力： 基础*提升*星星+额外="..self.power)
        end
        --]]
    end,

    UpdateLevelLimit = function(self, hellData,ghostData)
        local hell_name = DataUtil.GetData("hell_name")
        if hellData[self.hellLevel] ~= nil and hell_name[self.type][self.hellLevel] ~= nil then
            if self.type~=1 then
                self.maxLevelByHell = hell_name[self.type][self.hellLevel].LevelLimit
                self.ghost_data=hellData[self.hellLevel].GhostFires
                self.maxghost=#self.ghost_data
                if self.ghost< self.maxghost then
                    self.ghost_info=ghostData[self.ghost_data[self.ghost+1]]
                else
                    self.ghost_info=nil
                end

            end
            self.nowHellName = hell_name[self.type][self.hellLevel].Name
            self.hellSmallLevel = hell_name[self.type][self.hellLevel].QuaSmLv
            self.hellNameColor = StaticGlobalData[163].valueSA[hell_name[self.type][self.hellLevel].QuaColorIdx]
            self.hellNameBg=StaticGlobalData[176].valueSA[hell_name[self.type][self.hellLevel].QuaColorIdx]
        end
        --ghost=0 默认 --  还需要一个和限制等级
        if self.type~=1 then
            if self.ghost<self.maxghost then
                self.maxLevelByNextHell = hell_name[self.type][self.hellLevel].LevelLimit
                self.nextHellName = hell_name[self.type][self.hellLevel].Name
                self.hellUpCostGroup =self.ghost_info.Cost
                if self.ghost> 0then
                    self.ghost_id=self.ghost_data[self.ghost]
                    for i = 1, #ghostData[self.ghost_id].Prop do
                        self:AddProperty(self.ghostproperty,ghostData[self.ghost_id].Prop[i].Id,ghostData[self.ghost_id].Prop[i].Sum)
                    end
                else
                    if self.hellLevel>1 then
                        self.ghost_id= hellData[self.hellLevel-1].GhostFires[#hellData[self.hellLevel-1].GhostFires]
                        for i = 1, #ghostData[self.ghost_id].Prop do
                            self:AddProperty(self.ghostproperty,ghostData[self.ghost_id].Prop[i].Id,ghostData[self.ghost_id].Prop[i].Sum)
                        end
                    end
                end
            else
                if hellData[self.hellLevel + 1] ~= nil and hell_name[self.type][self.hellLevel + 1] ~= nil then
                    self.maxLevelByNextHell = hell_name[self.type][self.hellLevel + 1].LevelLimit
                    self.nextHellName = hell_name[self.type][self.hellLevel + 1].Name
                    self.hellUpCostGroup = hellData[self.hellLevel + 1].CostItem
                    self.ghost_id=hellData[self.hellLevel].GhostFires[self.maxghost]
                    for i = 1, #ghostData[self.ghost_id].Prop do
                        self:AddProperty(self.ghostproperty,ghostData[self.ghost_id].Prop[i].Id,ghostData[self.ghost_id].Prop[i].Sum)
                    end
                else
                    self.hellUpCostGroup={}
                end
            end
        end
    end,
}

local CardItem = DataClass("CardItem", CardItemData)
--local unlockData = DataUtil.GetData("level_unlock")
local lvcard = DataUtil.GetData("hell_name")
local function GetBestPower(self)
    local all_power=0
    table.sort(self.JLRData,function (a,b)
        return self.cards[a].power > self.cards[b].power
    end)
    table.sort(self.SHLData,function (a,b)
        return self.cards[a].power > self.cards[b].power
    end)
    for i, v in ipairs(self.JLRData) do
        if i <= 3 then
            all_power=all_power+self.cards[v].power
        else
            break
        end
    end
    for i, v in ipairs(self.SHLData) do
        if i <= 3 then
            all_power=all_power+self.cards[v].power
        else
            break
        end
    end
    return all_power
end
local function GetBasePower(self, cards, helllv, lv, starlv)
    local basepower = {}
    --根据地狱道等级获得 基础等级
    local baselv = lvcard[cards.Type][helllv].BegLevel
    basepower[101] = cards.Atk + cards.hells[helllv].BaseAtk[starlv]+ (lv - baselv)*cards.hells[helllv].UpAtk[starlv]
    basepower[102] = cards.Def + cards.hells[helllv].BaseDef[starlv]+ (lv - baselv)*cards.hells[helllv].UpDef[starlv]
    basepower[103] = cards.HP + cards.hells[helllv].BaseHP[starlv]+ (lv - baselv)*cards.hells[helllv].UpHP[starlv]
    return basepower
end

-- 解析卡牌数据
local function ParseCardListFromServer(self, cards)
    assert(allCardData)
    for _, v in ipairs(cards) do
        local item = CardItem.New()
        item:InitProper()
        item.id = Mathf.Floor(v.id)                                                                  ---id
        item.level = v.level ---leve
        item.hellLevel = v.hellLevel ---hell_level
        item.weaponId = v.weapon
        item.ghost=v.ghost
        --item.ghost=0
        item.guard = v.guard                                                            ---guard
        item.skillBlankAmount = v.skillBlankAmount                                      ---skillBlankAmount
        if v.star then
            item.starlv = math.floor(v.star)                                                     ---星星
        end
        if v.equipIds then
            for i, v in ipairs(v.equipIds) do
                table.insert(item.equip,v.id)
            end
        end
        if v.xilian~=nil then
            if v.xilian.attr~=nil then
                item.forgeproperty={atk=0,def = 0, hp = 0}
                for i, c in ipairs(v.xilian.attr) do
                    if c.type==108 then
                        item.forgeproperty.atk=c.value
                    elseif c.type==109 then
                        item.forgeproperty.def=c.value
                    elseif c.type==110 then
                        item.forgeproperty.hp=c.value
                    end
                end
            else
                item.forgeproperty=nil
                item.forgeGroup=nil
                item.forgeloc=nil
            end
            if v.xilian.skill~=nil then
                item.forgeSkill={}
                local haveSkill = false
                for i, c in ipairs(v.xilian.skill) do
                    haveSkill = true
                    table.insert(item.forgeSkill,{isExc=c.isExclusive,skillID=c.skillId})
                end
                if haveSkill == false then
                    item.forgeSkill=nil
                end
            else
                item.forgeSkill=nil
            end
            item.forgeGroup=v.xilian.group
            item.forgeloc=v.xilian.loc
        else
            item.forgeproperty=nil
            item.forgeGroup=nil
            item.forgeloc=nil
            item.forgeSkill=nil
        end
        if v.xilianTemp~=nil then
            if v.xilianTemp.attr~=nil then
                item.tempforgepproperty={atk=0,def = 0, hp = 0}
                local isHaveData = false
                for i, c in ipairs(v.xilianTemp.attr) do
                    isHaveData = true
                    if c.type==108 then
                        item.tempforgepproperty.atk=c.value
                    elseif c.type==109 then
                        item.tempforgepproperty.def=c.value
                    elseif c.type==110 then
                        item.tempforgepproperty.hp=c.value
                    end
                end
                if isHaveData == false then
                    item.tempforgepproperty = nil
                end
            else
                item.tempforgepproperty = nil
            end
            if v.xilianTemp.skill~=nil then
                item.tempforgepSkill={}
                local haveSkill = false
                for i, c in ipairs(v.xilianTemp.skill) do
                    table.insert(item.tempforgepSkill,{isExc=c.isExclusive,skillID=c.skillId})
                    haveSkill = true
                end
                if haveSkill == false then
                    item.tempforgepSkill=nil
                end
            else
                item.tempforgepSkill=nil
            end
            item.tempforgeGroup=v.xilianTemp.group
            item.tempforgeloc=v.xilianTemp.loc
        else
            item.tempforgepproperty=nil
            item.tempforgepSkill=nil
            item.tempforgeGroup=nil
            item.tempforgeloc=nil
        end
        SkillData:GetInstance():ParseSkillListFromServer(v.selfSkills)
        for __, c in ipairs(v.wearSkill) do
            --卡槽位置对应上位置
            if SkillData:GetInstance().skills[c.wearSkillId]==nil then
                SkillData:GetInstance():ParseSkill(c.wearSkillId, StaticSkillData[c.wearSkillId].SkillId,1,item.id , 1)
            end
            SkillData:GetInstance():UpdateWearSkill(c.wearSkillId, item.id, c.position)
            item.wearSkills[c.position] = c.wearSkillId
            --print("c.position"..c.position.."---"..c.wearSkillId)
        end
        local cardData = allCardData[item.id]
        if cardData ~= nil then
            item.name = cardData.Name
            item.nickName = cardData.NickName
            item.tag = cardData.Tag
            item.type = cardData.Type
            item.quality = cardData.Quality
            item.crystalType = cardData.CrystalType
            item.sex = cardData.Sex
            item.initskill = cardData.InitSkill
            item.kpkm=cardData.KPKM
            item.subType = cardData.SubType
            item.r = cardData.R
            item.callCost = cardData.CallCost
            item.callCd = cardData.CallCd
            item.icon = cardData.Icon
            item.painting = cardData.Painting
            item.cardFace = cardData.CardFace
            item.headIconMid = cardData.Head2
            item.headIconBig = cardData.HeadBig
            item.mask = cardData.mask
            item.maxLevel = lvcard[cardData.Type][#lvcard[cardData.Type]].LevelLimit
            item.debrisId = cardData.DebrisId
            item.composeNum = cardData.ComposeNum
            item.critRateJ = self.defaultCritDmg
            item.paintingPos.x = cardData.PaintingPos.x
            item.paintingPos.y = cardData.PaintingPos.y
            local BasePrope = GetBasePower(self, cardData, v.hellLevel, v.level, v.star)
            for i = 101, 103 do
                item.lvandstarproperty[i] = BasePrope[i]
            end
            --item.initproperty[101]=cardData.Atk
            --item.initproperty[102]=cardData.Def
            --item.initproperty[103]=cardData.HP
            item.initproperty[104]=cardData.Crit
            item.initproperty[105]=cardData.CritRate
            item.initproperty[106]=cardData.EffectHit
            item.initproperty[107]=cardData.EffectResist
            item.initproperty[114]=cardData.Block
            item.initproperty[115]=cardData.DefIgnor

            if item.type == 1 then
                local countent = cardData.stars[v.star].AttrTrans
                if countent then
                    for i = 1, #countent do
                        item:AddProperty(item.shareproperty, countent[i].Id, countent[i].Val)
                    end
                end
            end
            --得到材料
            item:UpdateLevelLimit(cardData.hells,cardData.ghost)
        end

        --判断武器   目前寄灵人没有武器
        self.cards[item.id] = item
        item.personalWeapon = WeaponData:GetInstance():ParseWeaponFromServer(v.personalWeapon, v.id, item.quality, item.type)

        self:CheckUnlock(item.id, item.level)
        self:UpdataCardDataByArtifactsData(true,item.id)
    end
    --更新缘分
    --self:UpDateRelation()

    self:GetHeroTypeData()
    self:GetBestPower()
    self:CheckALLRedByCard()
    --DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_DATA_LIST_CHANGE)
end
local function UpdateAllEquip(self)
    for i, v in pairs(self.cards) do
        if self.cards[i] ~= nil  and #self.cards[i].equip>0 then
            self.cards[i]:InitProper_All(self.cards[i].equipproperty)
            local update_equit_num=#self.cards[i].equip
            local suit_list={}
            for n = 1, update_equit_num do
                if EquipData:GetInstance().equipList[self.cards[i].equip[n]]==nil then
                    Logger.LogError("没有此唯一ID"..self.cards[i].equip[n])
                end
                local eqp_id=EquipData:GetInstance().equipList[self.cards[i].equip[n]].equipTid
                if StaticEquip[eqp_id]==nil then
                    Logger.LogError("装备IDis niu"..eqp_id)
                end
                local suit=StaticEquip[eqp_id].Suit
                if suit>0 then
                    if suit_list[suit]==nil then
                        suit_list[suit]=1
                    else
                        suit_list[suit]=suit_list[suit]+1
                    end
                end
                local eup_data=EquipData:GetInstance():GetEquipPropDataById(self.cards[i].equip[n])
                for prop_id, prop_data in pairs(eup_data) do
                    self.cards[i].equipproperty[prop_id]=self.cards[i].equipproperty[prop_id]+prop_data
                end
            end
            for k, num in pairs(suit_list) do
                local suit_data=StaticEquipSuit[k].Props
                for m, dd in pairs(suit_data) do
                    if dd.Num<=num then
                        for _, data in pairs(dd.Prop) do
                            self.cards[i].equipproperty[data.Id]=self.cards[i].equipproperty[data.Id]+data.Val
                        end
                    end
                end
            end
            self.cards[i]:UpdateFinalProperty()
        end
    end
end
--更新卡牌缘分战斗力
local function UpDateRelation(self)
    for i, v in pairs(self.cards) do
        if self.cards[i] ~= nil  then
            local card_relation_data = allRelationData[self.cards[i].id]
            if card_relation_data then
                local relation_num=#card_relation_data
                local can_update_power=false
                self.cards[i]:InitProper_All(self.cards[i].relationproperty)
                for m = 1,relation_num do
                    local hero_num=#card_relation_data[m].RelationIds
                    local can_update_prop=true
                    for n = 1, hero_num do
                        if self.cards[card_relation_data[m].RelationIds[n]]==nil then
                            can_update_prop=false
                            break
                        end
                    end
                    if can_update_prop then
                        can_update_power=true
                        --更新这张卡的属性  或者加上
                        for t = 1, #card_relation_data[m].Prop do
                            self.cards[i]:AddProperty(self.cards[i].relationproperty,card_relation_data[m].Prop[t].Id,card_relation_data[m].Prop[t].Val,true)
                        end
                    end
                end
                if can_update_power then
                    --更新战斗力
                    self.cards[i]:UpdateFinalProperty()
                end
            else
                Logger.Log("该英雄没有缘分  cardid = "..self.cards[i].id)
            end

        end
    end
end
---通过卡牌id获取卡牌缘分数据
local function GetRelationDataForCardId(self,_id)
    self.cardActiveInfo = "" --缘分激活信息
    self.relationData = {}
    local cardRelationData = allRelationData[_id]
    if cardRelationData == nil then
        return nil
    end
    self.relationData = cardRelationData
    return cardRelationData
end

local function GetHeroTypeData(self)
    self.JLRData={}
    self.SHLData={}
    for i, v in pairs(self.cards) do
        if self.cards[i] ~= nil then
            if self.cards[i].type == 1  then
                table.insert(self.JLRData,self.cards[i].id)
            else
                table.insert(self.SHLData,self.cards[i].id)
            end
        end
    end
end
--存洗练技能属性
--更新洗练Temp
local function UpDateXILianTemp(self,_id,_data)
    if self.cards[_id] ~= nil then
        local cardDataInfo=self.cards[_id]
        cardDataInfo.tempforgepproperty={atk=0,def = 0, hp = 0}
        for i, c in ipairs(_data.attr) do
            if c.type==108 then
                cardDataInfo.tempforgepproperty.atk=c.value
            elseif c.type==109 then
                cardDataInfo.tempforgepproperty.def=c.value
            elseif c.type==110 then
                cardDataInfo.tempforgepproperty.hp=c.value
            end
        end
        cardDataInfo.tempforgepSkill={}
        for i, v in ipairs(_data.skill) do
            table.insert(cardDataInfo.tempforgepSkill,{isExc=v.isExclusive,skillID=v.skillId})
        end
        cardDataInfo.tempforgeGroup = _data.group
        cardDataInfo.tempforgeloc = _data.loc
    end
end
--更新洗练真实
local function UpDateXILian(self,_id,_type)
    if self.cards[_id] ~= nil then
        local cardDataInfo=self.cards[_id]
        if _type == 1 then
            cardDataInfo.forgeproperty={atk=0,def = 0, hp = 0}
            cardDataInfo.forgeproperty.atk=cardDataInfo.tempforgepproperty.atk
            cardDataInfo.forgeproperty.def=cardDataInfo.tempforgepproperty.def
            cardDataInfo.forgeproperty.hp=cardDataInfo.tempforgepproperty.hp
            cardDataInfo.forgeSkill={}
            for i, v in ipairs(cardDataInfo.tempforgepSkill) do
                local isexc=v.isExc
                local skillid=v.skillID
                table.insert(cardDataInfo.forgeSkill,{isExc=isexc,skillID=skillid})
            end
        end
        cardDataInfo.tempforgepproperty = nil
        cardDataInfo.tempforgepSkill = nil
    end
end
--检测技能、技能槽、专属武器的解锁
local function CheckUnlock(self, _cardId, _level)
    local cardData = allCardData[_cardId]
    if cardData then
        for i = 1, #cardData.Skill do
            --寄灵人
            if cardData.Type == 1 then
                if i == 1 then
                    if _level >= self.jlr_1locklv then
                        local newSkillId = cardData.Skill[i]
                        local newSkill
                        if SkillData:GetInstance().skills[newSkillId] then
                            newSkill = SkillData:GetInstance().skills[newSkillId]
                        else
                            newSkill = SkillData:GetInstance():ParseSkill(newSkillId, newSkillId, 1, _cardId, 1)
                        end
                        self.cards[_cardId].selfSkills[newSkillId] = newSkill
                    end
                else
                    if _level >= self.jlr_2locklv then
                        local newSkillId = cardData.Skill[i]
                        local newSkill
                        if SkillData:GetInstance().skills[newSkillId] then
                            newSkill = SkillData:GetInstance().skills[newSkillId]
                        else
                            newSkill = SkillData:GetInstance():ParseSkill(newSkillId, newSkillId, 1, _cardId, 1)
                        end
                        self.cards[_cardId].selfSkills[newSkillId] = newSkill
                    end
                end
            else
                --守护灵
                if _level >= self.shl_1locklv then
                    local newSkillId = cardData.Skill[i]
                    local newSkill
                    if SkillData:GetInstance().skills[newSkillId] then
                        newSkill = SkillData:GetInstance().skills[newSkillId]
                    else
                        newSkill = SkillData:GetInstance():ParseSkill(newSkillId, newSkillId, 1, _cardId, 1)
                    end
                    self.cards[_cardId].selfSkills[newSkillId] = newSkill
                end
            end
        end
        --检查卡槽
        if _level >= self.shl_2slotlv then
            self.cards[_cardId].skillBlankAmount = 2
        elseif _level >= self.shl_1slotlv then
            self.cards[_cardId].skillBlankAmount = 1
        end
        --检查专属武器
        self.cards[_cardId].unlockPersonalWeapon = self.weaponUnlockLv
    end
end
local function UpdateCardDataByWeapon(self, _cardId)
    if self.cards[_cardId] ~= nil then
        self.cards[_cardId]:UpdateFinalProperty()
    end
end
local function UpdateCardDataByStar(self, _cardId, _Starlevel)
    if self.cards[_cardId] ~= nil then
        assert(allCardData)
        local cardData = allCardData[_cardId]
        if cardData ~= nil then
            self.cards[_cardId].starlv = math.floor(_Starlevel)
            local BasePrope = GetBasePower(self, cardData, self.cards[_cardId].hellLevel, self.cards[_cardId].level, self.cards[_cardId].starlv)
            for i = 101, 103 do
                self.cards[_cardId].lvandstarproperty[i] = BasePrope[i]
                self.cards[_cardId].beforeproperty[i]=self.cards[_cardId].finalProperty[i]
            end
            if self.cards[_cardId].type == 1 then
                local countent = cardData.stars[self.cards[_cardId].starlv].AttrTrans
                if countent then
                    for i = 1, #countent do
                        self.cards[_cardId]:AddProperty(self.cards[_cardId].shareproperty, countent[i].Id, countent[i].Val)
                    end
                end
            end
            --最后战斗力大改
            self.cards[_cardId]:UpdateFinalProperty()
            --提升星星  更新通灵红点
            TongLingData:GetInstance():CheckTongLingRed()
        end
    end
end

--根据神器更新所有卡牌数据
local function UpdataCardDataByArtifactsData(self,update_single,card_id)
    --神器数量
    local Artufacts_data = ArtifactsData:GetInstance().artifactList
    local ArtufactsNum = #Artufacts_data
    local bodyNum = 0
    --卡牌数量
    if update_single then
        self.cards[card_id]:InitProper_All(self.cards[card_id].artifactsproperty)
    else
        for _id, _v in pairs(self.cards) do
            self.cards[_id]:InitProper_All(self.cards[_id].artifactsproperty)
        end
    end

    for i = 1, ArtufactsNum do
        bodyNum = #Artufacts_data[i].art_fact_bodyList
        if Artufacts_data[i].art_now_level>0 then
            for _id, _v in pairs(self.cards) do
                --主对卡牌影响   主部件就一个 直接赋值
                --local t1, t2 = math.modf(self.cards[_id].mask / Artufacts_data[i].art_mast)
                if (update_single and card_id == _id) or not update_single then
                    local t2 = 0
                    if Artufacts_data[i].art_mast ~= nil then
                        for _m,_n in pairs(Artufacts_data[i].art_mast) do
                            t2 =DataUtil.And(self.cards[_id].mask,_n)
                            if t2 <= 0 then
                                break
                            end
                        end
                    else
                        Logger.LogError("Artufacts_data 神器条件为空  ")
                    end
                    if t2 > 0 then
                        --可以加
                        for p, _ in pairs(propertyList) do
                            self.cards[_id].artifactsproperty[p]=self.cards[_id].artifactsproperty[p]+Artufacts_data[i].property[p]
                        end
                    end
                end
            end
        end
        for m = 1, bodyNum do
            if Artufacts_data[i].art_fact_bodyList[m].artifact_level_now >0 then
                for _id, v in pairs(self.cards) do
                    if (update_single and card_id == _id) or not update_single then
                        local t2 = 0
                        if Artufacts_data[i].art_fact_bodyList[m].artifact_mast ~= nil then
                            for _m,_n in pairs(Artufacts_data[i].art_fact_bodyList[m].artifact_mast) do
                                t2 =DataUtil.And(self.cards[_id].mask,_n)
                                if t2 <= 0 then
                                    break
                                end
                            end
                        else
                            Logger.LogError("art_fact_bodyList 神器条件为空  ")
                        end
                        if t2 > 0 then
                            local body_data_por = Artufacts_data[i].art_fact_bodyList[m]
                            --可以加
                            for p, _ in pairs(propertyList) do
                                self.cards[_id].artifactsproperty[p]=self.cards[_id].artifactsproperty[p]+body_data_por.property[p]
                            end
                        end
                    end
                end
            end
        end
    end
    if update_single then
        self.cards[card_id]:UpdateFinalProperty()
    else
        for _id, _v in pairs(self.cards) do
            self.cards[_id]:UpdateFinalProperty()
        end
    end
end
--获取属性变更后的属性  吧 等级  星星  地狱道  武器 神奇 等等  改变后的属性
local function GetNextBreakGFX(self,_id)
    if self.cards[_id]~=nil then
        local data=self.cards[_id]
        local basepower = {}
        local cards = allCardData[_id]
        if data.ghost<data.maxghost then
            --点火
            if data.ghost_info then
                basepower[101]=data.ghost_info.Prop[1].Val
                basepower[102]=data.ghost_info.Prop[2].Val
                basepower[103]=data.ghost_info.Prop[3].Val
            else
                Logger.LogError("没有获得信息")
            end
        else
            --突破
            if data.maxLevelByHell ~= data.maxLevel  then
                basepower[101]=cards.hells[data.hellLevel].BreakAtk[data.starlv]
                basepower[102]=cards.hells[data.hellLevel].BreakDef[data.starlv]
                basepower[103]=cards.hells[data.hellLevel].BreakHP[data.starlv]
            else
                basepower[101]="已满"
                basepower[102]="已满"
                basepower[103]="已满"
            end
        end
        return basepower
    end
end

--根据等级更新卡牌数据
local function UpdateCardDataByLevel(self, _cardId,_level)
    if self.cards[_cardId] ~= nil then
        assert(allCardData)
        local cardData = allCardData[_cardId]
        if cardData ~= nil then
            --更新技能、技能插槽
            self.cards[_cardId].level = _level
            self:CheckUnlock(_cardId, _level)
            local BasePrope = GetBasePower(self, cardData, self.cards[_cardId].hellLevel, self.cards[_cardId].level, self.cards[_cardId].starlv)
            for i = 101, 103 do
                self.cards[_cardId].lvandstarproperty[i] = BasePrope[i]
                self.cards[_cardId].beforeproperty[i]=self.cards[_cardId].finalProperty[i]
            end
            self.cards[_cardId]:UpdateFinalProperty()
        end
    end
end
--更新卡牌地狱道等级 18.12.5老乔暂定地狱道等级只影响卡牌等级限制
local function UpdateCardDataByHellLevel(self, _cardId, _hellLevel)
    local cardData=self.cards[_cardId]
    if cardData ~= nil and cardData.type~=1 then
        local cardinfo = allCardData[_cardId]
        if cardData.ghost<cardData.maxghost then
            cardData.ghost=cardData.ghost+1
            cardData.ghost_id=cardinfo.hells[cardData.hellLevel].GhostFires[cardData.ghost]
        else
            self.cards[_cardId].hellLevel=self.cards[_cardId].hellLevel+1
            cardData.ghost=0
        end

        self.cards[_cardId]:UpdateLevelLimit(cardinfo.hells,cardinfo.ghost)
        UpdateCardDataByLevel(self, _cardId, self.cards[_cardId].level)

        --卡牌红点更新
       self:CheckALLRedByCard()
        --提升等级  更新通灵红点
        TongLingData:GetInstance():CheckTongLingRed()
    end
end


--版本要求寄灵人地狱道更等级走
local function UpDateJLRHell(self,helllv)
    for i, v in pairs(self.cards) do
        if self.cards[i] ~= nil and self.cards[i].type == 1 then
            --寄灵人更新地狱道
            self.cards[i].hellLevel =helllv
            UpdateCardDataByLevel(self, i,self.cards[i].level)
        end
    end
end
--版本要求寄灵人跟等级走   等级发生变化  寄灵人等级发生变化
local function UpDataCardDataByHeroLvChangeCardLv(self, Level)
    for i, v in pairs(self.cards) do
        if self.cards[i] ~= nil and self.cards[i].type == 1 then
            --寄灵人更新等级
            self.cards[i].level = Level
            UpdateCardDataByLevel(self, i,Level)
        end
    end
end

local function __init(self)
    -- 所有卡牌列表
    self.cards = {}
    local GlobalData = DataUtil.GetData("global")
    self.skillData= DataUtil.GetData("skill")
    self.skillDesData= DataUtil.GetData("skill_description")
    for i, v in pairs(GlobalData) do
        if v.Key == "JLRSkill1UlockLv" then
            self.jlr_1locklv = v.valueN
        elseif v.Key == "JLRSkill2UlockLv" then
            self.jlr_2locklv = v.valueN
        elseif v.Key == "SHLSkillUnlockLv" then
            self.shl_1locklv = v.valueN
        elseif v.Key == "SHLSkillSlot1UnlockLv" then
            self.shl_1slotlv = v.valueN
        elseif v.Key == "SHLSkillSlot2UnlockLv" then
            self.shl_2slotlv = v.valueN
        elseif v.Key == "ExWeaponUnlockLv" then
            self.weaponUnlockLv = v.valueN
        elseif v.Key == "DefaultCritDmg" then
            self.defaultCritDmg = v.valueN
        end
    end
end

-- 根据id获取卡牌数据
local function GetCardDataById(self, id)
    --Logger.Log("id : " .. id)
    if self.cards[id] == nil then
        return nil
    end
    return self.cards[id]
end
-- 获取所有卡牌数据
local function GetAllData(self)
    return self.cards
end

local function DisarmSkill(self, _cardId, _blankIndex)
    local cardData = self.cards[_cardId]
    if cardData ~= nil and cardData.wearSkills ~= nil then
        cardData.wearSkills[_blankIndex] = _blankIndex==1 and cardData.initskill or nil
    end
end

local function WearSkill(self, _cardId, _blankIndex, _skillId)
    local cardData = self.cards[_cardId]
    if cardData ~= nil and cardData.wearSkills ~= nil then
        cardData.wearSkills[_blankIndex] = _skillId
    end
end
--获得单项属性值
local function GetCardSingleProperty(self,_id,_type)
    local cardData = self.cards[_id]
    return cardData.finalProperty[_type]
end
--获得武器属性值
local function GetCardSingleWeaponmProperty(self,_id,_type)
    local cardData = self.cards[_id]
    return cardData.personalWeapon.all_property[_type]
end

local function EquipAKeyFun(self,card_id,isdress,_equipIds)
    if isdress then
        --穿戴
        self.cards[card_id].equip={}
        for i, v in ipairs(_equipIds) do
            table.insert(self.cards[card_id].equip,v);
        end
    else
        --卸下
        self.cards[card_id].equip={}
    end
    --反向触发 检测  打开熔炼
    UnlockData:GetInstance():CheckNewOpenFunList();
    self:UpdateEquipProp(card_id)
end
--检查 卡牌是否穿戴装备
local function CheckCardDressEquip(self)
    local dress_num=0
    for i, v in pairs(self.cards) do
        if self.cards[i].equip~= nil then
            dress_num=dress_num+#self.cards[i].equip
        end
    end
    return dress_num
end
local function UpdateEquip(self,cardid,isdress,equip_id,xx_equip_id)
    local card_data=self.cards[cardid]
    if card_data then
        local equit_num=#self.cards[cardid].equip
        local can_insert=true
        if isdress then
            --穿戴
            for i = 1, equit_num do
                if self.cards[cardid].equip[i]==equip_id then
                    can_insert=false
                    Logger.LogError("装备已穿戴"..equip_id)
                    break
                end
            end
            if can_insert then
                table.insert(self.cards[cardid].equip,equip_id)
            end
            if xx_equip_id  and xx_equip_id >0then
                    local xx_card_num=#self.cards[cardid].equip
                    local have_this=true
                    for n = 1, xx_card_num do
                        if self.cards[cardid].equip[n]==xx_equip_id then
                            table.remove(self.cards[cardid].equip,n)
                            have_this=false
                            break
                        end
                    end
                    if  have_this then
                        Logger.LogError("卡牌无此装备"..xx_equip_id)
                    end
            end
        else
            --卸下
            for i = 1, equit_num do
                if self.cards[cardid].equip[i]==equip_id then
                    can_insert=false
                    table.remove(self.cards[cardid].equip,i)
                    break
                end
            end
            if can_insert then
                Logger.LogError("没有该装备"..equip_id)
            end
        end
        self:UpdateEquipProp(cardid)
--[[        local num=#self.cards[cardid].equip
        for n = 1, num do
           Logger.Log("身上装备数量"..n.."装备ID"..self.cards[cardid].equip[n])
        end]]

    end
end
local function UpdateEquipProp(self,cardid)
    local card_data=self.cards[cardid]
    if card_data then
        --更新战斗力
        self.cards[cardid]:InitProper_All(self.cards[cardid].equipproperty)
        local update_equit_num=#self.cards[cardid].equip
        local suit_list={}
        for i = 1, update_equit_num do
            if EquipData:GetInstance().equipList[self.cards[cardid].equip[i]]==nil then
                Logger.LogError("没有此唯一ID"..self.cards[cardid].equip[i])
            end

            local eqp_id=EquipData:GetInstance().equipList[self.cards[cardid].equip[i]].equipTid
            if StaticEquip[eqp_id]==nil then
                Logger.LogError("装备IDis niu"..eqp_id)
            end
            local suit=StaticEquip[eqp_id].Suit
            if suit>0 then
                if suit_list[suit]==nil then
                    suit_list[suit]=1
                else
                    suit_list[suit]=suit_list[suit]+1
                end
            end
            local eup_data=EquipData:GetInstance():GetEquipPropDataById(self.cards[cardid].equip[i])
            for prop_id, prop_data in pairs(eup_data) do
                self.cards[cardid].equipproperty[prop_id]=self.cards[cardid].equipproperty[prop_id]+prop_data
            end
        end
        for i, v in pairs(suit_list) do
            local suit_data=StaticEquipSuit[i].Props
            for m, n in pairs(suit_data) do
                if n.Num<=v then
                    for _, data in pairs(n.Prop) do
                        self.cards[cardid].equipproperty[data.Id]=self.cards[cardid].equipproperty[data.Id]+data.Val
                    end
                end
            end
        end
        --[[
        for i, v in pairs( self.cards[cardid].equipproperty) do
            Logger.Log("增加属性"..i.."Value"..self.cards[cardid].equipproperty[i])
        end
        --]]
        local before_power=self.cards[cardid].power
        self.cards[cardid]:UpdateFinalProperty()
        local now_power=self.cards[cardid].power
        local sun_power=Mathf.Floor(now_power-before_power)

        if sun_power>0 then
            UISpecial:GetInstance():UITipText( "<color=#3F793F>".."战斗力  +"..sun_power.."</color>")
        elseif sun_power<0  then
            UISpecial:GetInstance():UITipText( "<color=#DF4C4C>".."战斗力   "..sun_power.."</color>")
        end
        --卡牌红点更新
        self:CheckALLRedByCard()
        UIManager:GetInstance():Broadcast(UIMessageNames.UI_CARD_UPDATE_POWER_BY_EQUIP,true)
    end
end

local function GetBattleHero(self)
    self.have_card={}
    local battle_data=UserData:GetInstance().battle_info_list
    for _, v in pairs( battle_data) do
        for _, va in ipairs(v) do
            local host_have=false
            local guard_have=false
            local host_cardid=va.host.cardId
            local guard_cardid=va.guardian.cardId
            host_have=host_cardid<=0
            guard_have=guard_cardid<=0
            for _, data in pairs(self.have_card) do
                if  data==host_cardid then
                    host_have=true
                end
                if  data==guard_cardid then
                    guard_have=true
                end
            end
            if not host_have then
                table.insert(self.have_card,host_cardid)
            end
            if not guard_have then
                table.insert(self.have_card,guard_cardid)
            end
        end
    end
end
local function CheckIsInBattle (self,card_id)
    for i, v in ipairs(self.have_card) do
        if v==card_id then
            return true
        end
    end
    --没有在阵上 全部设置成false
    local key=tostring(card_id)
    RedPointData:GetInstance():ResetRedPoint(key)
    return false
end
--检查Card是否可升级  乱七八糟的
local function CheckALLRedByCard(self,check_type)
    self:GetBattleHero()
    for i, v in pairs(self.cards) do
        local can_check=self:CheckIsInBattle(v.id)
        if can_check then
            if check_type then

            else
                if v.type==1 then
                    self:CheckRedByTalent(v)
                elseif v.type == 2 then
                    self:CheckRedByLv(v)
                    self:CheckRedByWeapon(v)
                end
                self:CheckRedByStar(v)
                self:CheckRedBySkill(v)
                --self:CheckRedByEquip(v)
            end

        end
    end
    for i, v in pairs(allCardData) do
        if self.cards[i] == nil then
            --检查是否碎片足够
            local have_num = BackpackData:GetInstance().items[allCardData[i].DebrisID]
            local need_num=  allCardData[i].ComposeNum
            if have_num  ~= nil then
                if have_num .haveNum >= need_num then
                    local card_id=tostring(i)
                    RedPointData:GetInstance():UpdateCardRedState(card_id,true)
                end
            end
        end
    end
    --UIManager:GetInstance():Broadcast(UIMessageNames.UI_CARD_RED)
end
--检查装备红点
local function CheckRedByEquip(self,data)
    local state= EquipData:GetInstance():GetCardEquipRedState(data.id)
    RedPointData:GetInstance():UpdateCardRedState(tostring(data.id).."_5",state)
end
--检查Card是技能  乱七八糟的
local function CheckSkillRedByCard(self)
    Logger.Log("检查卡牌技能红点")
    for i, v in pairs(self.cards) do
        self:CheckRedBySkill(v)
    end
end
local function CheckRedBySkill(self,data)
    local state
    if data.type==1 then
        state=UnlockData:GetInstance():GetLockDataState(20102)
    elseif data.type==2 then
        state=UnlockData:GetInstance():GetLockDataState(20202)
    end
    if not state then
        return
    end
    local card_id=tostring(data.id)
    local skill_list= allCardData[data.id].Skill
    local skill_num=#skill_list

    for i = 1, skill_num do
       local skill_data=SkillData:GetInstance():GetSkillItemByCardIDAndSkillID(data.id,skill_list[i])
        if skill_data.level >= skill_data.breakLevel and skill_data.level < skill_data.maxLevel then
            --突破
            local break_lv=skill_data.breakTimes + 1
            local break_data=static_skill_break[skill_data.templateId]
            local can_cost=true
            local can_exp=true
            if break_data then
                if break_data[break_lv].Cost ~= nil then
                    local cost_data=break_data[break_lv].Cost
                    local cost_num=#cost_data
                    for m = 1, cost_num do
                        if BackpackData:GetInstance():GetItemNumById(cost_data[m].Id) < cost_data[m].Val then
                            can_cost=false
                            break
                        end
                    end
                end
                if break_data[break_lv].Exp ~= nil and break_data[break_lv].Exp>0 then
                    local card_group=static_skill_break_debris[break_data[break_lv].ExpItemGroup].Debris
                    local card_group_num=#card_group
                    local need_exp=break_data[break_lv].Exp
                    local exp=0
                    for m = 1, card_group_num do
                        exp=exp+BackpackData:GetInstance():GetItemNumById(card_group[m].DebrisId)*card_group[m].Exp
                        if exp>=need_exp then
                            break
                        end
                    end
                    if exp>=need_exp then
                        can_exp=true
                    else
                        can_exp=false
                    end
                end
                if can_cost and can_exp then
                    RedPointData:GetInstance():UpdateCardRedState(card_id.."_2",true)
                    break
                else
                    RedPointData:GetInstance():UpdateCardRedState(card_id.."_2",false)
                end
            else
                LogError.LogError("没有检测到这个技能ID"..skill_data.templateId)
                RedPointData:GetInstance():UpdateCardRedState(card_id.."_2",false)
                break
            end
        elseif skill_data.level < skill_data.breakLevel then
            --升级
            local cost_data=skill_data.costItem
            local cost_num=#cost_data
            local can_btn=true
            for i = 1, cost_num do
                if BackpackData:GetInstance():GetItemNumById(cost_data[i].Id) < cost_data[i].Val then
                    can_btn=false
                    break
                end
            end
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_2",can_btn)
            if can_btn then
                break
            end
        else
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_2",false)
        end
    end

    if data.type == 2 then
        --守护灵还得判断主界面那俩就能  只判断是否穿戴  1阴2阳
        local skill_num=data.skillBlankAmount
        for i = 1, skill_num do
            local can_red=false
            if data.wearSkills[i]==nil or data.wearSkills[i]<=0 then
                -- 检查有没有这个类型的~  并且没人穿戴
                for _, v in pairs(SkillData:GetInstance().skills) do
                    if v.skillType == 2 and v.cardId==0 and v.skillEffectType==i then--插槽技能
                        for n = 1, #v.wearRange do
                            if v.wearRange[n] == data.crystalType then
                             --可以激活了
                                can_red=true
                                break
                            end
                        end
                        if can_red then
                            break
                        end
                    end
                end
            end
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_2_"..i,can_red)
        end
    end
end
local function CheckRedByTalent(self,data)
    if data.type == 1 then
        local state= UnlockData:GetInstance():GetLockDataState(20104)
        if state then
            local card_id=tostring(data.id)
            local cost_data=xiLianList[allCardData[data.id].XLGroup].Cost
            local cost_num=#cost_data
            local can_up=true
            for i = 1, cost_num do
                if BackpackData:GetInstance():GetItemNumById(cost_data[i].Id) < cost_data[i].Num then
                    can_up=false
                    break
                end
            end
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_4",can_up)
        end

    end
end
local function CheckRedByWeapon(self,data)
    if data.type == 2 then
        local state= UnlockData:GetInstance():GetLockDataState(20204)
        if state then
            local card_id=tostring(data.id)
            local weapon_data=WeaponData:GetInstance().weapons[data.id]
            if weapon_data  and weapon_data.status == 1 then
                if weapon_data.unsealTimes<weapon_data.maxUnsealTimes then
                    local cost_data=weapon_data.costUnseal
                    local cost_num=#cost_data
                    local can_up=true
                    for i = 1, cost_num do
                        if BackpackData:GetInstance():GetItemNumById(cost_data[i].Id) < cost_data[i].Val then
                            can_up=false
                            break
                        end
                    end
                    RedPointData:GetInstance():UpdateCardRedState(card_id.."_4_1",can_up)
                else
                    RedPointData:GetInstance():UpdateCardRedState(card_id.."_4_1",false)
                end
                local strengh_num=#weapon_data.strengh
                for i = 1,strengh_num do
                    if weapon_data.strengh[i].status and weapon_data.strengh[i].level< weapon_data.strengh[i].maxLevel then
                        local cost_data=weapon_data.strengh[i].costStrength
                        local cost_num=#cost_data
                        local can_up=true
                        for i = 1, cost_num do
                            if BackpackData:GetInstance():GetItemNumById(cost_data[i].Id) < cost_data[i].Val then
                                can_up=false
                                break
                            end
                        end
                        RedPointData:GetInstance():UpdateCardRedState(card_id.."_4_2_"..i,can_up)
                    else
                        RedPointData:GetInstance():UpdateCardRedState(card_id.."_4_2_"..i,false)
                    end
                end
            end
        end

    end
end
local function CheckRedByStar(self,data)
    local state
    if data.type==1 then
        state= UnlockData:GetInstance():GetLockDataState(20103)
    elseif data.type==2 then
        state= UnlockData:GetInstance():GetLockDataState(20203)
    end
    if state then
        local card_id=tostring(data.id)
        if data.starlv<data.maxstarlv then
            local cost_data=allCardData[data.id].stars[data.starlv+1].Cost
            local cost_num=#cost_data
            local can_up=true
            for i = 1, cost_num do
                if BackpackData:GetInstance():GetItemNumById(cost_data[i].Id) < cost_data[i].Val then
                    can_up=false
                    break
                end
            end
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_3",can_up)
        else
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_3",false)
        end
    end
end
local function CheckRedByLv(self,data)
    local  state= UnlockData:GetInstance():GetLockDataState(20201)
    if not state then
        return
    end
     if data.type == 2 then
        local card_id=tostring(data.id)
        if data.maxLevelByHell == data.level then
            --地狱道等于等级
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_1_1",false)
            if data.level==data.maxLevel then
                --已经是最大等级
                RedPointData:GetInstance():UpdateCardRedState(card_id.."_1_2",false)
            else
                --查看地狱道等级限制
                if all_hell_name_data[data.type][data.hellLevel + 1].HellLevel <= UserData:GetInstance().hellLevel then
                    local cost_num=#data.hellUpCostGroup
                    local can_up=true
                    for i = 1, cost_num do
                        if BackpackData:GetInstance():GetItemNumById(data.hellUpCostGroup[i].Id) < data.hellUpCostGroup[i].Val then
                            can_up=false
                            break
                        end
                    end
                    RedPointData:GetInstance():UpdateCardRedState(card_id.."_1_2",can_up)
                else
                    RedPointData:GetInstance():UpdateCardRedState(card_id.."_1_2",false)
                end

            end
        else
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_1_2",false)
            local shl_num= BackpackData:GetInstance():GetItemNumById(CoinDefine.GuardExp)
            local need_exp=DataUtil.GetCardLevelUpNeedExp(data.level, data.level + 1, data.quality)
            RedPointData:GetInstance():UpdateCardRedState(card_id.."_1_1",shl_num>=need_exp)
        end
    end
end

---战斗力排序
local function sort_(a,b)
    local r
    local a1 = tonumber(a.power)
    local b1 = tonumber(b.power)
    r = a1 > b1
    return r
end

---获取最强6人战力
local function GetCardDataForPower(self)
    local all_power=0
    table.sort(self.JLRData,function (a,b)
        return self.cards[a].power > self.cards[b].power
    end)
    table.sort(self.SHLData,function (a,b)
        return self.cards[a].power > self.cards[b].power
    end)
    for i, v in ipairs(self.JLRData) do
        if i <= 3 then
            all_power=all_power+self.cards[v].power
        else
            break
        end
    end
    for i, v in ipairs(self.SHLData) do
        if i <= 3 then
            all_power=all_power+self.cards[v].power
        else
            break
        end
    end
    return all_power
end

--获取最强6人战力的等级和
local function GetAddCardDataForLv(self,_type)
    local tab = {}
    local lvAdd = 0
    local cards = self:GetAllData()
    if cards == nil then
        return
    end
    for _, v in pairs(cards) do
        if v.type==_type then
            table.insert(tab,v)
        end
    end
    table.sort(tab,sort_)
    for i, v in ipairs(tab) do
        if i <= 3 then
            lvAdd = lvAdd + v.level
        end
    end
    return lvAdd
end
--获得装备等级
local  function GetEquipDataLv(self,_type)
    local tab = {}
    local eqp_info = 0
    local cards = self:GetAllData()
    if cards == nil then
        return
    end
    for _, v in pairs(cards) do
        if v.type==_type then
            table.insert(tab,v)
        end
    end
    table.sort(tab,sort_)
    for i, v in ipairs(tab) do
        if i <= 3 then
            local update_equit_num=#v.equip
            for n = 1, update_equit_num do
                if EquipData:GetInstance().equipList[v.equip[n]]==nil then
                    Logger.LogError("没有此唯一ID"..v.equip[n])
                end
                eqp_info=eqp_info+EquipData:GetInstance().equipList[v.equip[n]].equipStrengthLv
            end
        end
    end
    return eqp_info
end
--获取最强6人武器的等级和 slect ==false 强化   slect ==true   解封
local function GetAddCardDataForWeapon(self,_type,slect)
    local tab = {}
    local weapon_info = 0
    local cards = self:GetAllData()
    if cards == nil then
        return
    end
    for _, v in pairs(cards) do
        if v.type==_type then
            table.insert(tab,v)
        end
    end
    table.sort(tab,sort_)
    for i, v in ipairs(tab) do
        if i <= 3 and v.personalWeapon and v.personalWeapon.status == 1 then
            if slect then
                weapon_info = weapon_info +  v.unsealTimes
            else
                for _, _data in ipairs(v.personalWeapon.strengh) do
                    if _data.status then
                        weapon_info = weapon_info +  _data.level
                    end
                end
            end
        end
    end
    return weapon_info
end



---战斗力排序
local function sort_lv(a,b)
    local r
    local power_a=0
    local power_b=0
    for i, v in pairs(propertyList) do
        if i~=105 then
            power_a= power_a+a.lvandstarproperty[i]*propertyList[i].BsFactor
        end
    end
    for i, v in pairs(propertyList) do
        if i~=105 then
            power_b= power_b+b.lvandstarproperty[i]*propertyList[i].BsFactor
        end
    end
    r = power_a > power_b
    return r
end
---获取最强升级--星级战斗力
local function GetCardLvAndStarForPower(self,type)
    local tab = {}
    local mast_power = 0
    local cards = self:GetAllData()
    if cards == nil then
        return
    end
    for _, v in pairs(cards) do
        if v.type==type then
            table.insert(tab,v)
        end
    end
    table.sort(tab,sort_lv)
    for i, v in pairs(propertyList) do
        if i~=105 then
            mast_power= mast_power+tab[1].lvandstarproperty[i]*propertyList[i].BsFactor
        end
    end
    return mast_power
end
---战斗力排序
local function sort_SQ(a,b)
    local r
    local power_a=0
    local power_b=0
    for i, v in pairs(propertyList) do
        if i~=105 then
            power_a= power_a+a.artifactsproperty[i]*propertyList[i].BsFactor
        end
    end
    for i, v in pairs(propertyList) do
        if i~=105 then
            power_b= power_b+b.artifactsproperty[i]*propertyList[i].BsFactor
        end
    end
    r = power_a > power_b
    return r
end
--获取 神器 最大属性
local function GetCardSQForPower(self)
    local tab = {}
    local mast_power = 0
    local cards = self:GetAllData()
    if cards == nil then
        return
    end
    for _, v in pairs(cards) do
            table.insert(tab,v)
    end
    table.sort(tab,sort_SQ)
    for i, v in pairs(propertyList) do
        if i~=105 then
            mast_power=mast_power+tab[1].artifactsproperty[i]*propertyList[i].BsFactor
        end
    end
    return mast_power
end

---战斗力排序
local function sort_Weapon(a,b)
    local r
    local power_a=0
    local power_b=0
    if a.personalWeapon and a.personalWeapon.status == 1 then
        for i, v in pairs(propertyList) do
            if i~=105 then
                power_a= power_a+a.personalWeapon.all_property[i]*propertyList[i].BsFactor
            end
        end
    end
    if b.personalWeapon and b.personalWeapon.status == 1 then
        for i, v in pairs(propertyList) do
            if i~=105 then
                power_a= power_a+b.personalWeapon.all_property[i]*propertyList[i].BsFactor
            end
        end
    end
    r = power_a > power_b
    return r
end
--获取 武器最大属性
local function GetCardWeaponForPower(self,type)
    if type == 1 then
        Logger.LogError("寄灵人没有武器")
        return
    end
    local tab = {}
    local mast_power = 0
    local cards = self:GetAllData()
    if cards == nil then
        return
    end
    for _, v in pairs(cards) do
        if v.type==type then
            table.insert(tab,v)
        end
    end
    table.sort(tab,sort_Weapon)
    if tab[1].personalWeapon and tab[1].personalWeapon.status == 1 then
        for i, v in pairs(propertyList) do
            if i~=105 then
                mast_power= mast_power+tab[1].personalWeapon.all_property[i]*propertyList[i].BsFactor
            end
        end
    end
    return mast_power
end

--获得卡牌的国战攻击属性值
local function GetCardNationAttackPropertyByCardIDAndArmyValue(self, cardID, army)
    local CardData = self.cards[cardID]
    local nation_power = 0
    local testpro = {}
    local fin_testpro = {}
    if CardData then
        for i, v in pairs(propertyList) do
            testpro[i] = CardData.lvandstarproperty[i] + CardData.ghostproperty[i]
            fin_testpro[i] = testpro[i]
        end
        local star_basepropall = allCardData[cardID].stars[CardData.starlv].BasePropAll + 1
        fin_testpro[101] = testpro[101] * (1 + testpro[108]) * star_basepropall + testpro[111]
        fin_testpro[102] = testpro[102] * (1 + testpro[109]) * star_basepropall + testpro[112]
        fin_testpro[103] = testpro[103] * (1 + testpro[110]) * star_basepropall + testpro[113]
        for i, v in pairs(propertyList) do
            nation_power = nation_power + fin_testpro[i] * propertyList[i].BsFactor
        end
    end

    local attack = (1 + nationalGlobal.AtkRatioa * Mathf.Pow((nation_power / nationalGlobal.ForceRatioc), nationalGlobal.AtkRatiob)) * army
    return attack
end

CardData.ParseCardListFromServer = ParseCardListFromServer
CardData.GetCardDataById = GetCardDataById
CardData.GetAllData = GetAllData
CardData.CheckUnlock = CheckUnlock
CardData.UpdateCardDataByLevel = UpdateCardDataByLevel
CardData.UpdateCardDataByHellLevel = UpdateCardDataByHellLevel
CardData.DisarmSkill = DisarmSkill
CardData.WearSkill = WearSkill
CardData.__init = __init
CardData.GetCardDataForPower = GetCardDataForPower
CardData.UpdateCardDataByStar = UpdateCardDataByStar
CardData.UpdateCardDataByWeapon = UpdateCardDataByWeapon
CardData.GetNextBreakGFX= GetNextBreakGFX
CardData.UpDataCardDataByHeroLvChangeCardLv = UpDataCardDataByHeroLvChangeCardLv
CardData.UpdataCardDataByArtifactsData = UpdataCardDataByArtifactsData
CardData.UpDateXILian = UpDateXILian
CardData.UpDateXILianTemp = UpDateXILianTemp
CardData.GetCardSingleProperty = GetCardSingleProperty
CardData.UpDateJLRHell = UpDateJLRHell
CardData.GetHeroTypeData=GetHeroTypeData
CardData.GetRelationDataForCardId = GetRelationDataForCardId
CardData.UpDateRelation = UpDateRelation
CardData.UpdateEquip = UpdateEquip
CardData.EquipAKeyFun=EquipAKeyFun
CardData.UpdateEquipProp = UpdateEquipProp
CardData.UpdateAllEquip = UpdateAllEquip
CardData.GetCardSingleWeaponmProperty = GetCardSingleWeaponmProperty
CardData.CheckRedByLv = CheckRedByLv
CardData.CheckRedByStar = CheckRedByStar
CardData.CheckRedByTalent  =CheckRedByTalent
CardData.CheckRedByWeapon = CheckRedByWeapon
CardData.CheckALLRedByCard = CheckALLRedByCard
CardData.CheckRedBySkill = CheckRedBySkill
CardData.CheckSkillRedByCard = CheckSkillRedByCard
CardData.CheckRedByEquip = CheckRedByEquip
CardData.GetBattleHero = GetBattleHero
CardData.CheckIsInBattle = CheckIsInBattle
CardData.GetAddCardDataForLv = GetAddCardDataForLv
CardData.GetBasePower = GetBasePower
CardData.GetBestPower=GetBestPower
CardData.GetCardLvAndStarForPower = GetCardLvAndStarForPower
CardData.GetCardWeaponForPower = GetCardWeaponForPower
CardData.GetCardSQForPower = GetCardSQForPower
CardData.GetAddCardDataForWeapon = GetAddCardDataForWeapon
CardData.GetEquipDataLv=GetEquipDataLv
CardData.GetCardNationAttackPropertyByCardIDAndArmyValue = GetCardNationAttackPropertyByCardIDAndArmyValue
CardData.CheckCardDressEquip = CheckCardDressEquip
return CardData
