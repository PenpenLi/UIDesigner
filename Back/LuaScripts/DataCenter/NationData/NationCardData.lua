---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dyg.
--- DateTime: 2018/11/6 10:02
---
local NationCardData = BaseClass("NationCardData", Singleton)

local CARD_AP_TIMER_PREFIX_NAME = "CARD_AP_TIMER_PREFIX_NAME"-- 行动力计时器
local CARD_ARMY_TIMER_PREFIX_NAME = "CARD_ARMY_TIMER_PREFIX_NAME" -- 征兵计时器
local CARD_INJURY_TIMER_PREFIX_NAME = "CARD_INJURY_TIMER_PREFIX_NAME" -- 受伤计时器
local NationCardItemData = {
    --卡牌id
    id = 0,
    --统御经验值
    dominanceExp = 0,
    --当前统御等级对应的最大经验
    dominanceMaxExp = 0,
    -- 统御等级
    dominanceLevel = 0,
    --军力值
    army = 0,
    calcArmy = 0, --用于计算回复的军力值
    --行动力
    ap = 0,
    calcAP = 0, --用于计算回复的行动力
    --上一次行动力回复时间
    startArmyTime = 0,
    --征兵截至时间
    endArmyTime = 0,
    --负伤截止时间戳
    lastApTime = 0,
    --征兵开始时间戳
    lastEndInJuryTime = 0,
    siegeValue = 0, --攻城值
    cardCost = 0, --cost值
    ---------------------自己的数据-----------------------
    --talentLevels = {}, -- 三个天赋等级 为 0 代表未解锁
    --talentUnlockLevels = {}, -- 三个天赋的解锁等级
    --talentOpenLevels = {}, -- 每个天赋升级等级组
    --talentEffectValues = {}, -- 每个天赋效果组
    --talentIds = {}, -- 三个天赋id
    selfTalents = {}, -- 三个自己的天赋 根据等级来的  如果未解锁 将是一级数据
    --inJuryTimer = false,--受伤计时器
    --cardArmyTimer = false, --军力值计时器
    --cardApTimer = false, --行动力计时器
    ---------------------------------------------
}

local NationCardItem = DataClass("NationCardItem", NationCardItemData)
--local NationCardItem = BaseClass("NationCardItem", NationCardItemData)

local function __init(self)
    self.nationWarCardData = DataUtil.GetData("national_card")
    self.nationalTanlentData = DataUtil.GetData("national_tanlent")
    local GlobalData = DataUtil.GetData("global")
    self.skillData = DataUtil.GetData("skill")
    self.skillDesData = DataUtil.GetData("skill_description")
    self.nationFameExpData = DataUtil.GetData("national_player")
    self.nationDominanceExpData = DataUtil.GetData("national_player").DominanceLv
    self.nationDominanceMaxLevel = self.nationDominanceExpData[#self.nationDominanceExpData].Id
    self.staticCardDatas = DataUtil.GetData("card")
    for i, v in pairs(GlobalData) do
        if v.Key == "MobilitySpdSec" then
            self.MobilitySpdSec = v.valueN
        elseif v.Key == "MobilityNum" then
            self.MobilityNum = v.valueN
        elseif v.Key == "ForceConstant" then
            self.ForceConstant = v.valueN
        elseif v.Key == "RecruitReturn" then
            self.RecruitReturn = v.valueN
        end
    end
end


--[[
    根据统御等级获取是否达到最大等级和最大经验
]]
local function GetDominanceLevelMaxExp(self, level)
    local levelData = self.nationDominanceExpData[level + 1]
    local level = 0
    if levelData == nil then
        levelData = self.nationDominanceExpData[level]
        return levelData.Exp, true
    else
        return levelData.Exp, false
    end

end


--[[
    根据经验值获取统御等级和对象
]]
local function GetDominanceLevelAndLevelDataByExp(self, dominanceExp)
    local levelData = nil
    local level = 0
    --local curLvMaxEx=0
    for i, v in ipairs(self.nationDominanceExpData) do
        if i == 1 then
            levelData = v
            level = i
        end
        if (dominanceExp >= v.Exp) then
            levelData = v
            level = i
        else
            return level, levelData
            --else
            --    curLvMaxEx=v.Exp;
            --    break;
        end
    end
    return level, levelData
    --return level,levelData,curLvMaxEx
end

--[[
    根据统御等级和技能解锁数组获取技能等级 为0 则未解锁
]]
local function __GetTalentLevelByDominanceLevelAndTalentUnlockLevel(self, dominanceLevel, arrTalentUnLock)
    local skill1Level = 0
    local unlockLevel = arrTalentUnLock[1]
    for i, v in ipairs(arrTalentUnLock) do
        if (dominanceLevel >= v) then
            skill1Level = i
        else
            break
        end
    end
    return skill1Level, unlockLevel
end

local function ParseNationCardApWithPush(self, data)
    if data == nil or data._is_null then
        return
    end
    local cardIds = nil
    for j, b in ipairs(data) do
        local nation_card = self:GetNationCardDataById(b.cardId)
        if nation_card ~= nil then
            nation_card.ap = b.ap
            nation_card.calcAP = b.ap
            nation_card.lastApTime = math.modf(b.lastTime)
            self:__RunCardApTimerLogic(nation_card)
        end
        if cardIds == nil then
            cardIds = {}
        end
        table.insert(cardIds, nation_card.id)
        --DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_ONE_CARD_UPDATE, nation_card.id)
    end
    if cardIds ~= nil then
        if table.length(cardIds) > 0 then
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_MULTI_FLUSH, cardIds)
        end
    end
end

--获取卡牌国战攻击力
local function GetCardNationAtk(self, cardId)
    local staticNationCard = self.nationWarCardData[cardId]
    if staticNationCard == nil then
        return 0
    end
    local nationCardData = self.nationCards[cardId]
    if nationCardData == nil then
        return 0
    end

    local currentLevelAtt = staticNationCard.DominanceLv[nationCardData.dominanceLevel]
    local OneMilitaryValueAddAtk = currentLevelAtt.Force_Atk
    local calcArmy = nationCardData.calcArmy
    --local calcArmy =  NationCardData:GetInstance():GetNationCardArmyByTime(cardId,TimeSyncManager:GetInstance():GetSimulationJavaMS())
    local finalVal = math.modf(OneMilitaryValueAddAtk * calcArmy)
    return finalVal
end

-- 根据id获取卡牌数据
local function GetNationCardDataById(self, cardId)
    if self.nationCards[cardId] == nil then
        return nil
    end
    return self.nationCards[cardId]
end

-- 根据id获取卡牌数据(策划表数据)
local function GetStaticNationCardDataById(self, cardId)
    local staticNationCard = self.nationWarCardData[cardId]
    if staticNationCard == nil then
        return nil
    end
    return staticNationCard
end

-- 获取所有卡牌数据
local function GetAllNationCardData(self)
    return self.nationCards
end

--获取卡牌国战总攻击力
local function GetCardNationFinalAtk(self, cardId)
    local card = CardData:GetInstance():GetCardDataById(cardId)
    if card == nil then
        return 0
    end
    return card.finalProperty.atk + self:GetCardNationAtk(cardId)
end

--获取卡牌国战总Hp
local function GetCardNationFinalHp(self, cardId)
    local card = CardData:GetInstance():GetCardDataById(cardId)
    if card == nil then
        return 0
    end
    return card.finalProperty.hp + self:GetCardNationHp(cardId)
end

--判断卡牌是否在征兵状态
local function CheckCardConscriptionInTime(self, cardId, curServerTime)
    local nationCardData = self.nationCards[cardId]
    if nationCardData == nil then
        return nil
    end
    if curServerTime >= nationCardData.endArmyTime then
        return false
    end
    return true
end

--获取卡牌国战HP
local function GetCardNationHp(self, cardId)
    local staticNationCard = self.nationWarCardData[cardId]
    if staticNationCard == nil then
        return 0
    end
    local nationCardData = self.nationCards[cardId]
    if nationCardData == nil then
        return 0
    end
    local currentLevelAtt = staticNationCard.DominanceLv[nationCardData.dominanceLevel]
    local OneMilitaryValueAddHp = currentLevelAtt.Force_Hp
    local calcArmy = nationCardData.calcArmy
    --local calcArmy = NationCardData:GetInstance():GetNationCardArmyByTime(cardId,TimeSyncManager:GetInstance():GetSimulationJavaMS())
    local finalVal = math.modf(OneMilitaryValueAddHp * calcArmy)
    return finalVal
end

local function ParseOneNationCardData(self, data, hasEvent)

    if data == nil then
        return
    end
    local isCreate = false -- 是否创建
    local id = math.floor(data.id)
    local item = self.nationCards[id]
    if item == nil then
        isCreate = true
        item = {}
        --item = NationCardItem.New()
    end
    item.id = id

    local staticNationCard = self.nationWarCardData[item.id]
    if staticNationCard == nil then
        local tipStr = "某国战卡牌数据不存在 id 为" .. item.id
        Logger.LogError(tipStr)
        UISpecial:GetInstance():UITipText(tipStr)
        return
    end
    item.siegeValue = staticNationCard.Siege;
    item.cardCost = staticNationCard.Card_Cost;

    item.dominanceExp = data.dominanceExp
    item.dominanceLevel = self:GetDominanceLevelAndLevelDataByExp(item.dominanceExp)
    item.dominanceMaxExp = self:GetDominanceLevelMaxExp(item.dominanceLevel)
    item.army = math.modf(data.army)
    item.calcArmy = item.army
    item.ap = data.ap
    item.calcAP = item.ap

    item.startArmyTime = math.modf(data.startArmyTime)-- 征兵开始时间戳

    --Logger.Log("item.startArmyTime:"..item.startArmyTime)
    item.endArmyTime = math.modf(data.endArmyTime) -- 征兵截至时间戳
    --Logger.Log("item.endArmyTime:"..item.endArmyTime)
    item.lastApTime = math.modf(data.lastApTime) -- 上一次行动力回复时间
    --Logger.Log("item.lastApTime:"..item.lastApTime)
    item.lastEndInJuryTime = math.modf(data.lastEndInJuryTime) -- 负伤截止时间戳
    --Logger.Log("item.lastEndInJuryTime:"..item.lastEndInJuryTime)

    -- 技能相关信息
    item.selfTalents = {}
    for i, v in ipairs(staticNationCard.Tanlent_Ids) do
        local talentItem = self:ParseOneNationTalent(item.id,v, item.dominanceLevel,i)
        item.selfTalents[talentItem.talentId] = talentItem
    end

    if isCreate then
        self.nationCards[item.id] = item
    end

    self:__RunCardInJuryTimerLogic(item)
    self:__RunCardArmyTimerLogic(item)
    self:__RunCardApTimerLogic(item)

    if hasEvent then
        --DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_ONE_CARD_UPDATE, item.id)
    end
end


--复制一个队伍信息
local function CopyOneNationCardData(data)
    if data == nil then
        return nil
    end

    local item = {}
    item.id = data.id
    local staticNationCard = NationCardData:GetInstance().nationWarCardData[item.id]
    local staticCard = NationCardData:GetInstance().staticCardDatas[item.id]
    item.staticNationCard = staticNationCard
    item.staticCard = staticCard
    item.siegeValue = data.siegeValue
    item.cardCost = data.cardCost
    item.dominanceExp = data.dominanceExp
    item.dominanceLevel = data.dominanceLevel
    item.dominanceMaxExp = data.dominanceMaxExp
    item.army = math.modf(data.army)
    item.calcArmy = data.calcArmy
    item.ap = data.ap
    item.calcAP = data.calcAP

    item.startArmyTime = data.startArmyTime
    item.endArmyTime = data.endArmyTime
    item.lastApTime = data.lastApTime
    item.lastEndInJuryTime = data.lastEndInJuryTime

    item.selfTalents = {}
    for i, v in ipairs(data.selfTalents) do
        local talentItem = NationCardData:GetInstance().CopyOneNationTalent(v)
        item.selfTalents[talentItem.talentId] = talentItem
    end
    return item
end

local function CopyOneNationTalent(data)
    if data == nil then
        return nil
    end
    local item = {}
    item.cardId = data.cardId
    item.talentId = data.talentId
    item.talentLevel = data.talentLevel
    item.staticTalentData = data.staticTalentData
    item.index = data.index
    return item
end

--解析国战技能数据
local function ParseOneNationTalent(self, _cardId, talentId, dominanceLevel,index)
    local item = {}
    item.cardId = _cardId
    item.talentId = talentId
    item.index = index
    local staticTalentData = self.nationalTanlentData[talentId]
    item.staticTalentData = staticTalentData
    if staticTalentData == nil then
        Logger.LogErrorVars("卡牌id为",_cardId,"的天赋id : "," 不存在!请检查national_tanlent表")
        item.talentLevel = 0
    else
        local talentLevel = self:__GetTalentLevelByDominanceLevelAndTalentUnlockLevel(dominanceLevel, staticTalentData.Tanlent_Unlock)
        item.talentLevel = talentLevel
    end
    return item
end


--解析国战技能数据
--local function ParseNationSkill(self, _cardId, talentId, talentType, talentUnlockLevel, talentMaxLevel, talentLevel, talentEffectVal, talentCropId)
--    local item = {}
--
--    item.cardId = _cardId
--    item.talentId = talentId
--    item.talentEffectRange = talentType
--    item.talentUnlockLevel = talentUnlockLevel
--    item.talentMaxLevel = talentMaxLevel
--    item.talentLevel = talentLevel
--    item.talentEffectVal = talentEffectVal
--    item.talentCropId = talentCropId
--
--    if item.talentEffectRange == NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH then
--        -- 全局的
--
--    else
--        -- GO_BATTLE = 2,--战斗生效
--
--    end
--
--    -- TODO 国战天赋技能数据修改调整
--    --local skillData = allSkillData[item.id]
--    --local NationWarCardData=DataUtil.GetData("national_card")
--    --item.maxLevel=#(NationWarCardData[_cardId].Tanlent1_Unlock)
--    --item.icon=skillData.Icon
--    --item.name = skillData.Name
--    --
--    --local skillData = allSkillData[item.id]
--    --if skillData.ShowFireType == 1 then
--    --    item.showFireTypeStr = "<color=#72D54FFF>【主动技能】</color>"
--    --elseif skillData.ShowFireType == 2 then
--    --    item.showFireTypeStr = "<color=#81ADE8FF>【被动技能】</color>"
--    --elseif skillData.ShowFireType == 3 then
--    --    item.showFireTypeStr = "<color=#EC6B60FF>【连击技能】</color>"
--    --end
--    --item.showFireType = skillData.ShowFireType
--    --
--    --for i = 1, item.maxLevel do
--    --    item.description[i] =DataUtil.GetSkillDesByIdAndLevel(item.id,i)
--    --end
--    --self.nationSkills[item.id] = item
--    return item
--end


local function GetCardListTalentEffectAddByType(self, cardIdList, talentType, talentId, armyGroupId)
    if cardIdList == nil then
        return 0
    end

    local nationCards = nil
    for i, v in ipairs(cardIdList) do
        local oneNationCard = self:GetNationCardDataById(v)
        if oneNationCard ~= nil then
            if nationCards == nil then
                nationCards = {}
            end
            nationCards[oneNationCard.id] = oneNationCard
        end
    end
    if nationCards == nil then
        return 0
    end
    return self.__GetNationCardsTalentEffect(nationCards, talentType, talentId, armyGroupId)
end

local function GetAllNationCardTalentEffectAddByType(self, talentType, talentId, armyGroupId)
    local nationCards = self:GetAllNationCardData()
    if nationCards == nil then
        return 0
    end
    return self.__GetNationCardsTalentEffect(nationCards, talentType, talentId, armyGroupId)
end

-- 获取某类型国战天赋
local function __GetNationCardsTalentEffect(nationCards, talentType, talentId, armyGroupId)
    local val = 0

    if nationCards == nil then
        return val
    end
    for k, nationCard in pairs(nationCards) do
        if nationCard.selfTalents ~= nil then
            for i, v in pairs(nationCard.selfTalents) do
                local staticTalentData = v.staticTalentData
                if staticTalentData~= nil then
                    if talentType == NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH then --科技id
                        if staticTalentData.Tanlent_Type == talentType then
                            if staticTalentData.TanlentId == talentId then
                                if staticTalentData.Tanlent1_CorpsId ~= nil then
                                    if armyGroupId == staticTalentData.Tanlent1_CorpsId then
                                        local effectVal = staticTalentData.Tanlent_Value[v.talentLevel]
                                        if effectVal ~= nil then
                                            if effectVal ~= 0 then
                                                val = val + effectVal
                                            end
                                        end
                                    end
                                else
                                    local effectVal = staticTalentData.Tanlent_Value[v.talentLevel]
                                    if effectVal ~= nil then
                                        if effectVal ~= 0 then
                                            val = val + effectVal
                                        end
                                    end
                                end
                            end
                        end
                    else -- 战斗属性 暂时没有处理

                    end
                else
                    Logger.LogErrorVars(" staticTalentData not exist ! with id : ",v)
                end
            end
        else
            --Logger.LogErrorVars(" nationCard.selfTalents == nil with id : ",nationCard.id)
        end
    end
    return val
end

--[[
    获取卡牌军力值
]]
local function GetCardNationArmyValue(self, cardId)
    local nationCardData = self.nationCards[cardId]
    if nationCardData == nil then
        return 0
    end
    local armyVal = nationCardData.calcArmy
    return armyVal
end

--[[
    获取卡牌攻城值
]]
local function GetCardNationSiegeValue(self, cardId)
    local staticNationCard = self.nationWarCardData[cardId]
    if staticNationCard == nil then
        return 0
    end
    return staticNationCard.Siege
end

--[[
    获取征1兵消耗资源 （资源id,数量）
]]
local function GetCardNationArmyCropsConsumeResource(self, cardId, cropId, currentMapId)
    local cropsData = NationMapInfoData:GetInstance():GetNationalCropsById(cropId)
    if cropsData == nil then
        Logger.LogErrorVars("GetCardNationArmyCropsConsumeMS cropId :", cropId)
        return nil
    end
    local add = 0
    --科技加成
    add = add + NationScienceData:GetInstance():GetScienceEffectAddByType(NationDefine.NATION_TECH_TYPE.CONSUMPTION_BY)
    --军团加成
    add = add + NationTeamData:GetInstance().GetMyNationTeamEffectAddByArmyGroupIdMapIdAndType(
            cropId, currentMapId, NationDefine.NATION_TECH_TYPE.CONSUMPTION_BY)
    -- 对自身天赋加成
    local cardIdList = { cardId }
    add = add + NationCardData:GetInstance():GetCardListTalentEffectAddByType(
            cardIdList, NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.CONSUMPTION_BY)
    local rate = math.max(0, (1 - add))
    local res = {}
    for i, v in ipairs(cropsData.Consume) do
        res[v.Id] = math.modf(v.val * rate)
    end
    return res
end
--[[
    获取征兵速度
]]
local function GetCardNationArmyCropsConsumeMS(self, cardId, cropId, currentMapId)

    local cropsData = NationMapInfoData:GetInstance():GetNationalCropsById(cropId)
    if cropsData == nil then
        Logger.LogErrorVars("GetCardNationArmyCropsConsumeMS cropId :", cropId)
        return 0
    end
    local add = 0
    --科技加成
    add = add + NationScienceData:GetInstance():GetScienceEffectAddByType(NationDefine.NATION_TECH_TYPE.SPEED_ARMY)
    --军团加成
    add = add + NationTeamData:GetInstance().GetMyNationTeamEffectAddByArmyGroupIdMapIdAndType(
            cropId, currentMapId, NationDefine.NATION_TECH_TYPE.SPEED_ARMY)
    -- 天赋加成
    add = add + NationCardData:GetInstance():GetAllNationCardTalentEffectAddByType(
            NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.SPEED_ARMY)
    -- 对自身天赋加成
    local cardIdList = { cardId }
    add = add + NationCardData:GetInstance():GetCardListTalentEffectAddByType(
            cardIdList, NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.SPEED_ARMY_SELF)

    add = add + NationCardData:GetInstance():GetCardListTalentEffectAddByType(
            cardIdList, NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.HBWQ_SPEED_ARMY, cropId)

    local val = cropsData.ConsumeSec
    val = val / (1 + add) * 1000
    val = math.modf(val)
    return val
end

--[[
    获取某卡牌行动力上限
]]
local function GetNationCardApMax(self, cardId)
    local staticNationCard = self.nationWarCardData[cardId]
    if staticNationCard == nil then
        return 0
    end
    local defaultApMax = self:GetDefaultApMax()

    local add = 0
    ----科技加成
    add = add + NationScienceData:GetInstance():GetScienceEffectAddByType(NationDefine.NATION_TECH_TYPE.CARD_AP)
    ----军团加成
    local teamId, teamData = NationTeamData:GetInstance():GetTeamIdAndTeamDataByCardId(cardId)
    if teamData ~= nil then
        --Logger.LogErrorVars("GetNationCardApMax teamData.currentBehavior ",teamData)
        add = add + NationTeamData:GetInstance().GetMyNationTeamEffectAddByArmyGroupIdMapIdAndType(
                teamData.armyGroupId, teamData.currentBehavior.startMapID, NationDefine.NATION_TECH_TYPE.CARD_AP)
    end

    ---- 天赋加成
    local cardIdList = { cardId }
    add = add + NationCardData:GetInstance():GetCardListTalentEffectAddByType(
            cardIdList, NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.CARD_AP)
    local val = math.modf(defaultApMax + add)

    if armyGroupId then

    end
    return val
end

--[[获取默认行动力上限]]
local function GetDefaultApMax(self)
    local defineAP_MAX = NationMapInfoData:GetInstance():GetNationalGlobal().AP_MAX

    return defineAP_MAX
end

--[[
    获取军力值上限
]]
local function GetCardNationArmyMax(self, cardId)
    local nationCardData = self.nationCards[cardId]
    if nationCardData == nil then
        return 0
    end
    local add = 0
    add = add + NationScienceData:GetInstance():GetScienceEffectAddByType(NationDefine.NATION_TECH_TYPE.MAX_ARMY)
    -- 卡牌自身天赋加成
    local cardIdList = { cardId }
    add = add + NationCardData:GetInstance():GetCardListTalentEffectAddByType(
            cardIdList, NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.MAX_ARMY)
    local armyMax = math.modf( NationMapInfoData:GetInstance():GetNationalGlobal().InitalArmyLimit + nationCardData.dominanceLevel * self.ForceConstant + add)
    return armyMax
end



--[[
    消耗卡牌行动力
]]
local function CostNationCardAp(self, item)

end


--某卡牌是否在征兵中
local function IsNationCardInArmyTime(self, cardId, currentTime)
    local data = self:GetNationCardDataById(cardId)
    if data == nil then
        return false
    end
    return currentTime <= data.endArmyTime
end

--[[
     根据时间获取卡牌兵力
]]
local function GetNationCardArmyByTime(self, cardId, currentTime)
    local data = self:GetNationCardDataById(cardId)
    if data == nil then
        return 0
    end
    local teamId, team = NationTeamData:GetInstance():GetTeamIdAndTeamDataByCardId(data.id) --获取队伍
    if teamId == nil then
        return 0
    end

    if currentTime == nil then
        currentTime = TimeSyncManager:GetInstance():GetSimulationJavaMS()
    end
    local maxVal = self:GetCardNationArmyMax(data.id)
    local remindTime = currentTime - data.startArmyTime --经过时间
    if remindTime < 0 then
        remindTime = 0
    end
    local addRate = nil -- 增长频度
    local incRate = nil -- 增长量
    local nowVal = nil -- 当前值
    local finalVal = nil -- 最终值
    local sourceVal = data.army -- 原始值
    --Logger.LogVars("GetNationCardArmyByTime 检测记录")
    if self:IsNationCardInArmyTime(cardId, currentTime) then
        -- 在征兵中
        --Logger.LogVars("GetNationCardArmyByTime 在征兵中")
        local spdMS = self:GetCardNationArmyCropsConsumeMS(cardId, team.armyGroupId, team.currentBehavior.startMapID) -- 整一个兵耗时
        incRate = 1
        addRate = math.modf(remindTime / spdMS)
        nowVal = addRate * incRate + sourceVal
        --Logger.LogVars("GetNationCardArmyByTime addRate",addRate," nowVal ",nowVal," sourceVal : ",sourceVal)
        if nowVal > maxVal then
            finalVal = maxVal
        else
            finalVal = nowVal
        end
    else
        -- 不是征兵中
        finalVal = sourceVal
    end
    return finalVal, maxVal
end

--获取卡牌行动力速率(秒)
local function GetNationCardMobilitySpdMS(self, cardId)
    local val = self.MobilitySpdSec
    -- 科技加成
    local add = 0
    add = add + NationScienceData:GetInstance():GetScienceEffectAddByType(NationDefine.NATION_TECH_TYPE.AP_RECOVER)
    if cardId == nil then
        return add
    end

    -- 卡牌自身天赋加成
    local cardIdList = { cardId }
    add = add + NationCardData:GetInstance():GetCardListTalentEffectAddByType(
            cardIdList, NationDefine.NATION_CARD_TALENT_TYPE.IN_TECH, NationDefine.NATION_TECH_TYPE.AP_RECOVER)

    val = (val / (1 + add)) * 1000
    val = math.modf(val)
    return val
end

--[[
     根据时间获取卡牌行动力
]]
local function GetNationCardApByTime(self, cardId, currentTime)
    local data = self:GetNationCardDataById(cardId)
    if data == nil then
        return 0
    end
    if currentTime == nil then
        currentTime = TimeSyncManager:GetInstance():GetSimulationJavaMS()
    end
    local maxVal = self:GetNationCardApMax(data.id)
    local remindTime = currentTime - data.lastApTime --经过时间
    local addRate = nil -- 增长频度
    local incRate = nil -- 增长量
    local nowVal = nil -- 当前值
    local finalVal = nil -- 最终值
    local sourceVal = data.ap -- 原始值
    if sourceVal < maxVal then
        -- 行动力正在回复
        local spdMS = self:GetNationCardMobilitySpdMS(cardId) -- 耗时 --行动力恢复速率(秒)
        incRate = self.MobilityNum --行动力恢复数量(量)
        addRate = math.modf(remindTime / spdMS)
        nowVal = addRate * incRate + sourceVal
        if nowVal > maxVal then
            finalVal = maxVal
        else
            finalVal = nowVal
        end
    else
        finalVal = sourceVal
    end
    return finalVal, maxVal
end

--某卡牌是否在负伤中
local function IsNationCardInJuryTime(self, cardId, currentTime)
    local data = self:GetNationCardDataById(cardId)
    if data == nil then
        return false
    end
    return currentTime <= data.lastEndInJuryTime
end
--通过默认值创建一堆国战卡牌
local function CreateDefaultNationCardByCardIdList(self, cardIdList)
    if cardIdList == nil then
        return
    end

    for i, v in ipairs(cardIdList) do
        self:CreateDefaultNationCardByCardId(v)
    end
end

--通过默认值创建国战卡牌
local function CreateDefaultNationCardByCardId(self, cardId)
    local nationStatus = NationCtrlManager:GetInstance():GetLoginNationStatus()
    if nationStatus ~= NationDefine.LOGIN_NATION_ST.DATA_OK then
        return
    end
    local nationCardData = {
        id = cardId,
        dominanceExp = 0,
        army = 0,
        ap = self:GetDefaultApMax(),
        startArmyTime = 0,
        endArmyTime = 0,
        lastApTime = 0,
        lastEndInJuryTime = 0,
    }

    self:ParseOneNationCardData(nationCardData, false)
    local nationCard = self:GetNationCardDataById(cardId)
    if nationCard == nil then
        return
    end
    nationCard.ap = self:GetNationCardApMax(cardId)
end

local function __RunCardApTimerLogic(self, item)
    local apMax = self:GetNationCardApMax(item.id)
    if item.calcAP < apMax then
        LogicTimerManager:GetInstance():AddServerTimer(NationCardData.CARD_AP_TIMER_PREFIX_NAME .. item.id,
                LogicTimerManager.LOGIC_TYPE.NONE_CLEAR, SyncTimer.MODE_STEP, item.lastApTime,
                self:GetNationCardMobilitySpdMS(item.id), false, self.__UpdateCardApLogicTimer, { item = item, superSelf = self })
        LogicTimerManager:GetInstance():StartTimer(NationCardData.CARD_AP_TIMER_PREFIX_NAME .. item.id)
    else
        LogicTimerManager:GetInstance():RemoveTimer(NationCardData.CARD_AP_TIMER_PREFIX_NAME .. item.id)
    end
end

--
--
--[[
  更新国战卡牌行动力恢复计时器
]]
local function __UpdateCardApLogicTimer(selfTimer, obj)
    local item = obj.item
    local superSelf = obj.superSelf
    local nextAp, maxVal = superSelf:GetNationCardApByTime(item.id)
    item.calcAP = nextAp
    if item.calcAP >= maxVal then
        item.calcAP = maxVal
        selfTimer:Stop()
    end
end

--
local function __RunCardArmyTimerLogic(self, item)

    local simulationJavaMS = TimeSyncManager:GetInstance():GetSimulationJavaMS()
    local armyMax = self:GetCardNationArmyMax(item.id)
    if item.calcArmy < armyMax then
        -- 兵力最大上线
        if simulationJavaMS < item.endArmyTime then
            -- 在征兵状态
            local teamId, team = NationTeamData:GetInstance():GetTeamIdAndTeamDataByCardId(item.id)
            if team == nil then
                return
            end
            LogicTimerManager:GetInstance():AddServerTimer(NationCardData.CARD_ARMY_TIMER_PREFIX_NAME .. item.id,
                    LogicTimerManager.LOGIC_TYPE.NONE_CLEAR, SyncTimer.MODE_STEP, item.startArmyTime,
                    NationCardData:GetInstance():GetCardNationArmyCropsConsumeMS(item.id, team.armyGroupId, team.currentBehavior.startMapID), false, self.__UpdateCardArmyLogicTimer, { item = item, superSelf = self })
            LogicTimerManager:GetInstance():StartTimer(NationCardData.CARD_ARMY_TIMER_PREFIX_NAME .. item.id)

        else
            -- 未在征兵状态
            LogicTimerManager:GetInstance():RemoveTimer(NationCardData.CARD_ARMY_TIMER_PREFIX_NAME .. item.id)
        end
    else
        LogicTimerManager:GetInstance():RemoveTimer(NationCardData.CARD_ARMY_TIMER_PREFIX_NAME .. item.id)
    end
end

--[[
  更新国战卡牌征兵计时器
]]
local function __UpdateCardArmyLogicTimer(selfTimer, obj)
    local item = obj.item
    local superSelf = obj.superSelf
    local currentTime = TimeSyncManager:GetInstance():GetSimulationJavaMS()
    local nextArmy, maxVal = superSelf:GetNationCardArmyByTime(item.id, currentTime)
    item.calcArmy = nextArmy
    local isEnd = false
    if item.calcArmy >= maxVal then
        -- maxArmy
        item.calcArmy = maxVal
        isEnd = true
        selfTimer:Stop()
    else
        if currentTime >= item.endArmyTime then
            -- 到时间了
            selfTimer:Stop()
            isEnd = true
        end
    end

    if isEnd then
        NationNetManager:GetInstance():SendSyncNationOneCardRequest(item.id, Bind(superSelf, superSelf.__OneRecruitArmyEndSyncNationOneCard)) -- 刷新自己的卡牌
    end

end

--征募结束刷新
local function __OneRecruitArmyEndSyncNationOneCard(self, opCode, cardId, oneCardData)
    if opCode ~= 0 then
        return
    end
    NationCardData:GetInstance():ParseOneNationCardData(oneCardData, false)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_RECRUIT_ARMY_END, cardId)
end

local function __RunCardInJuryTimerLogic(self, item)
    local simulationJavaMS = TimeSyncManager:GetInstance():GetSimulationJavaMS()
    if simulationJavaMS < item.lastEndInJuryTime then
        -- 在受伤状态
        LogicTimerManager:GetInstance():AddServerTimer(NationCardData.CARD_INJURY_TIMER_PREFIX_NAME .. item.id,
                LogicTimerManager.LOGIC_TYPE.NONE_CLEAR, SyncTimer.MODE_END_TIME, item.lastEndInJuryTime,
                0, true, self.__UpdateCardInJuryLogicTimer, { item = item, superSelf = self })
        LogicTimerManager:GetInstance():StartTimer(NationCardData.CARD_INJURY_TIMER_PREFIX_NAME .. item.id)
    else
        -- 未在征兵状态
        LogicTimerManager:GetInstance():RemoveTimer(NationCardData.CARD_INJURY_TIMER_PREFIX_NAME .. item.id)
    end
end
--


--[[
  更新国战卡牌受伤计时器
]]
local function __UpdateCardInJuryLogicTimer(selfTimer, obj)
    local item = obj.item
    local superSelf = obj.superSelf
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_INJURY_END, item.id)
end


--获得国战卡牌数据
local function ParseAllNationCardData(self, data)
    --所有国战卡牌
    if self.nationCards == nil then
        self.nationCards = {}
    end
    if data == nil or data._is_null then
        return
    end

    if data.nation_card == nil or data.nation_card._is_null then
        return
    end

    for _, v in ipairs(data.nation_card) do
        self:ParseOneNationCardData(v, false)
    end

    --Logger.LogErrorVars("ParseAllNationCardData self.nationCards ",self.nationCards)
end


-- 国战卡牌停止征兵刷新资源
local function UpdateCardArmyByNetData(self, data, hasEvent)
    if data == nil then
        return
    end
    local cardIds = nil
    for i = 1, #data do
        local nation_card = self:GetNationCardDataById(data[i].cardId)
        if nation_card ~= nil then
            if cardIds == nil then
                cardIds = {}
            end

            table.insert(cardIds, nation_card.id)
            nation_card.startArmyTime = 0
            nation_card.endArmyTime = 0
            nation_card.army = math.modf(data[i].count)
            nation_card.calcArmy = nation_card.army
            self:__RunCardArmyTimerLogic(nation_card)
        end
        --传递  刷新界面
    end

    if hasEvent then
        if cardIds ~= nil then
            if table.length(cardIds) > 0 then
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_MULTI_FLUSH, cardIds)
            end
        end
    end
end


--刷新国战卡牌最新数据 征兵被动推送等
local function UpdateNationCardsByNetData(self, data)

    if data == nil or data._is_null then
        return
    end

    local cardIds = nil
    for _, v in ipairs(data) do
        self:ParseOneNationCardData(v, false)
        if cardIds == nil then
            cardIds = {}
        end
        table.insert(cardIds, math.floor(v.id))
    end

    if cardIds ~= nil then
        if table.length(cardIds) > 0 then
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_NATION_CARD_MULTI_FLUSH, cardIds)
        end
    end
end

--获取征兵返还系数
local function GetRecruitReturnRate(self)
    return self.RecruitReturn
end


NationCardData.ParseAllNationCardData = ParseAllNationCardData
NationCardData.ParseOneNationCardData = ParseOneNationCardData
NationCardData.GetDominanceLevelAndLevelDataByExp = GetDominanceLevelAndLevelDataByExp
NationCardData.GetDominanceLevelMaxExp = GetDominanceLevelMaxExp

NationCardData.__GetTalentLevelByDominanceLevelAndTalentUnlockLevel = __GetTalentLevelByDominanceLevelAndTalentUnlockLevel
NationCardData.__RunCardApTimerLogic = __RunCardApTimerLogic
NationCardData.__RunCardArmyTimerLogic = __RunCardArmyTimerLogic
NationCardData.__RunCardInJuryTimerLogic = __RunCardInJuryTimerLogic
NationCardData.__UpdateCardApLogicTimer = __UpdateCardApLogicTimer
NationCardData.__UpdateCardInJuryLogicTimer = __UpdateCardInJuryLogicTimer
NationCardData.__UpdateCardArmyLogicTimer = __UpdateCardArmyLogicTimer

NationCardData.GetCardNationAtk = GetCardNationAtk
NationCardData.GetCardNationFinalAtk = GetCardNationFinalAtk
NationCardData.GetCardNationHp = GetCardNationHp
NationCardData.GetCardNationFinalHp = GetCardNationFinalHp
NationCardData.GetNationCardApMax = GetNationCardApMax
NationCardData.GetDefaultApMax = GetDefaultApMax

NationCardData.GetCardNationArmyMax = GetCardNationArmyMax
NationCardData.GetNationCardMobilitySpdMS = GetNationCardMobilitySpdMS
NationCardData.GetCardNationArmyCropsConsumeMS = GetCardNationArmyCropsConsumeMS
NationCardData.GetCardNationArmyCropsConsumeResource = GetCardNationArmyCropsConsumeResource

NationCardData.GetNationCardDataById = GetNationCardDataById
NationCardData.GetStaticNationCardDataById = GetStaticNationCardDataById
NationCardData.CheckCardConscriptionInTime = CheckCardConscriptionInTime

NationCardData.GetAllNationCardData = GetAllNationCardData
NationCardData.GetCardNationArmyValue = GetCardNationArmyValue
NationCardData.GetCardNationSiegeValue = GetCardNationSiegeValue

NationCardData.ParseNationCardApWithPush = ParseNationCardApWithPush
NationCardData.__init = __init

NationCardData.IsNationCardInArmyTime = IsNationCardInArmyTime
NationCardData.GetNationCardArmyByTime = GetNationCardArmyByTime
NationCardData.GetNationCardApByTime = GetNationCardApByTime
NationCardData.IsNationCardInJuryTime = IsNationCardInJuryTime

NationCardData.UpdateNationCardsByNetData = UpdateNationCardsByNetData
NationCardData.UpdateCardArmyByNetData = UpdateCardArmyByNetData
--NationCardData.UpdateCardTime = UpdateCardTime
--NationCardData.UpdateCardArmy = UpdateCardArmy

NationCardData.CreateDefaultNationCardByCardId = CreateDefaultNationCardByCardId
NationCardData.CreateDefaultNationCardByCardIdList = CreateDefaultNationCardByCardIdList
NationCardData.ParseOneNationTalent = ParseOneNationTalent

NationCardData.GetCardListTalentEffectAddByType = GetCardListTalentEffectAddByType
NationCardData.GetAllNationCardTalentEffectAddByType = GetAllNationCardTalentEffectAddByType
NationCardData.__GetNationCardsTalentEffect = __GetNationCardsTalentEffect
NationCardData.CopyOneNationTalent = CopyOneNationTalent
NationCardData.CopyOneNationCardData = CopyOneNationCardData
NationCardData.GetRecruitReturnRate = GetRecruitReturnRate

NationCardData.__OneRecruitArmyEndSyncNationOneCard = __OneRecruitArmyEndSyncNationOneCard

NationCardData.CARD_AP_TIMER_PREFIX_NAME = CARD_AP_TIMER_PREFIX_NAME
NationCardData.CARD_ARMY_TIMER_PREFIX_NAME = CARD_ARMY_TIMER_PREFIX_NAME
NationCardData.CARD_INJURY_TIMER_PREFIX_NAME = CARD_INJURY_TIMER_PREFIX_NAME

return NationCardData
