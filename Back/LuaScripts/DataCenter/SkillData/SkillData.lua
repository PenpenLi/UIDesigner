---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zjy.
--- DateTime: 2018/12/10
---

local SkillItemData = {
    --暂定
    --唯一id
    id = 0,
    --技能id
    templateId = 0,
    --所属卡牌id
    cardId = 0,
    --技能名称
    name = "",
    --技能等级
    level = 0,
    --备注
    remarks = "",
    fireType=0,
    --施法类型显示
    showFireTypeStr = "",
    --施法类型 1-主动技能，2-被动技能，3-连击技能
    showFireType = 0,
    --技能类型 1-天赋技能，2-插槽技能
    skillType = 0,
    --效果类型 1-攻击，2-防守，3-资源，4-增幅（只有插槽技能使用本字段）
    skillEffectType = 0,
    --装备位置  -1 -未装备，0-第一个插槽，1-第二个插槽，以此类推
    position = -1,
    --冷却时间
    CD = 0,
    --备用参数
    param = "",
    --技能最大等级
    maxLevel = 0,
    --当前突破等级
    breakLevel = 0,
    --突破次数
    breakTimes = 0,
    --装配类型 1-红，2-黄，3-蓝
    wearRange = {},
    --技能消耗
    crystalCost = 0,
    --技能icon
    icon = "",
    --专属武器技能ID
    exclusiveWeaponEffecte=0,
    --评级
    quality = 0,
    --
    doubleHit=0,
    --更改  丢弃
    --[[
    --升级消耗经验静态数据
    CostExp = {},
    --升级消耗物品静态数据
    CostItem = {},
    --升级消耗经验
    expCost = 0,
    --升级消耗物品
    itemCost = 0,
    --]]
    -- 升级消耗静态表
    --cost ={},
    --当前等级消耗
    costItem ={},
    --技能描述详情
    description = {},
}


local NationSkillItemData=
{
    --暂定
    --技能id
    id = 0,
    --数据id
    templateId = 0,
    --卡牌id
    cardId=0,
    --技能名称
    name = "",
    --技能最大等级
    maxLevel = 0,
    --技能icon
    icon = "",
    --技能描述详情
    description = {},
    --技能等级
    level=0,
    --施法类型显示
    showFireTypeStr = "",
    --施法类型 1-主动技能，2-被动技能，3-连击技能
    showFireType = 0,
    --技能类型 1-天赋技能，2-插槽技能
    skillType = 0,

}
local SkillData = BaseClass("SkillData", Singleton)
local SkillItem = DataClass("SkillItem", SkillItemData)
local allSkillData = DataUtil.GetData("skill")
local allSkillExchangeData = DataUtil.GetData("skill_exchange")
local allItemData = DataUtil.GetData("item")
local NationSkillItem=DataClass("NationSkillItem",NationSkillItemData)

local allSkillBreakData = DataUtil.GetData("skill_break")

-- 解析技能数据\
local function InitSkillDesGetBreak(skill_id,lv)
    for i, v in ipairs(allSkillBreakData[skill_id]) do
        if  lv== v.LvUpLimit then
            if i< #allSkillBreakData[skill_id]then
                return i,i+1
            else
                return i,i
            end

        else
            if lv<v.LvUpLimit then
                return i,i
            end
        end
    end
end

--获得当前等级的突破
local function GetSkillBreak(skill_id,lv)
    for i, v in ipairs(allSkillBreakData[skill_id]) do
        if lv<=v.LvUpLimit then
            return i;
        end
    end
end
local function UpdateSkillDataByLevel (self,_id)
    local skillData = allSkillData[self.skills[_id].templateId]
    local lv=self.skills[_id].level
    --下一次消耗
    if lv+1>self.skills[_id].maxLevel then
        self.skills[_id].costItem=nil
    else
        if skillData.lvs[lv+1]~=nil then
            self.skills[_id].costItem=skillData.lvs[lv+1][GetSkillBreak(self.skills[_id].templateId,lv+1)].Cost
        else
            UISpecial:GetInstance():UITipText("技能表不全  等技能表数据")
        end
    end
    --卡牌红点更新
    CardData:GetInstance():CheckALLRedByCard()
end
local function ParseSkill(self, _id, _templateId, _level, _cardId, _breakTimes)
    assert(allSkillData)
    local item = SkillItem.New()
    item.id = _id
    item.templateId = _templateId
    if item.templateId == 0 then
        item.templateId = item.id
    end
    item.level = math.floor(_level)
    item.cardId = _cardId
    item.breakTimes = _breakTimes
    self.skills[item.id] = item
    local skillData = allSkillData[item.templateId]
    if skillData ~= nil then
        item.name = skillData.Name
        item.fireType=skillData.FireType
        --item.remarks = skillData.Remarks
        if skillData.ShowFireType == 1 then
            --item.showFireTypeStr = "<color=#72D54FFF>【主动技能】</color>"
            item.showFireTypeStr="【主动技能】"
        elseif skillData.ShowFireType == 2 then
            --item.showFireTypeStr = "<color=#81ADE8FF>【被动技能】</color>"
            item.showFireTypeStr="【被动技能】"
        elseif skillData.ShowFireType == 3 then
            --item.showFireTypeStr = "<color=#EC6B60FF>【连击技能】</color>"
            item.showFireTypeStr="【连击技能】"
        end
        item.showFireType = skillData.ShowFireType
        item.skillType = skillData.SkillType
        item.skillEffectType = skillData.SkillEffectType
        item.CD = skillData.CD
        item.crystalCost=skillData.CrystalCount
        --item.param = skillData.Param
        item.maxLevel = skillData.MaxLevel
        item.wearRange = skillData.WearRange
        item.icon = skillData.Icon
        item.exclusiveWeaponEffecte = skillData.ExclusiveWeaponEffect
        item.quality = skillData.Quality
        item.doubleHit=skillData.DoubleHit
        if allSkillBreakData[item.templateId] ~= nil then
            local num = #allSkillBreakData[item.templateId]
            item.maxLevel = allSkillBreakData[item.templateId][num].LvUpLimit
            item.breakLevel = allSkillBreakData[item.templateId][_breakTimes].LvUpLimit
            if item.breakLevel > 1  then
                item.crystalCost = allSkillBreakData[item.templateId][_breakTimes].CostAdd~=nil and  skillData.CrystalCount + allSkillBreakData[item.templateId][_breakTimes].CostAdd or skillData.CrystalCount
            end
            for i = 1, item.maxLevel do
                local min, max=  InitSkillDesGetBreak(_templateId,i)
                item.description[i]={}
                for j = min, max do
                    item.description[i][j] =DataUtil.GetSkillDesByIdAndLevel(_templateId,i,j)
                end
            end
            self:UpdateSkillDataByLevel(_id)
        else
            Logger.LogError("当前技能："..item.templateId.."skill_break表里没有")
        end
    end
    return item
end



-- 解析服务器传的技能数据
local function ParseSkillListFromServer(self, skills)

   --Logger.Log("技能数据".. table.dump(skills,nil,10))
    for _, v in ipairs(skills) do
        self:ParseSkill(v.id, v.templateId, v.level, v.cardId, v.breakTimes)
    end
end

--解析服务器传的单个技能数据
local function ParseSkillListFromServerAlone(self, skills)
    if skills.breakTimes == nil or skills.breakTimes ==0 then
        skills.breakTimes = 1
    end
    self:ParseSkill(skills.id, skills.templateId, skills.level, skills.cardId,skills.breakTimes)
    self:UpdateSkillRed()
end

local function GetAllSkillsData(self)
    return self.skills
end




local function GetSkillItemByCardIDAndSkillID(self,cardID,skillID)

    for _, v in pairs(self.skills) do
        if v.templateId == skillID and v.cardId==cardID then

            return  v
        end
    end
    return nil
end
--通过技能静态id获取技能数量
local function GetSkillCountById(self,skill_id)
    local haveCount =0
    if  self.skills ==nil then
        return
    end
    for _, v in pairs(self.skills) do
        if v.templateId == skill_id then
            haveCount=haveCount+1
        end
    end
    return haveCount
end

--通过技能静态id获取技能数据
local function GetSkillDataById(self,skill_id)
    if  self.skills ==nil then
        return nil
    end
    for _, v in pairs(self.skills) do
        if v.templateId == skill_id then
            return v
        end
    end
end

local function __init(self)
    -- 所有技能列表

    self.skills = {}
    self.nationSkills={};
    self.select_skills = 0
   self.allSkillDescription = DataUtil.GetData("skill_effect")

    --[[
    self.skillDes = {}

    for i, des in pairs(allSkillDescription) do
        if not self.skillDes[des.SkillID] then
            self.skillDes[des.SkillID] = {}
        end
        if self.skillDes[des.SkillID][des.Level] then
            Logger.Log("id："..des.SkillID.."  level:"..des.Level.."  already exist!!")
        else
            self.skillDes[des.SkillID][des.Level]=des.Description
        end
    end
--]]
end
--更新技能可激活
local function UpdateSkillRed(self)
    RedPointData:GetInstance():UpdateRedState(RedPointData:GetInstance().RedName.Skill_Data, false)
    for i, v in pairs(allSkillExchangeData) do
        if self.skills[i] ==nil and v.IfShow==1 then
            --未拥有  如果有碎片满足 跳出
            for _, c in ipairs(v.Cost) do
                local cardData=allItemData[c.Id]
                if cardData ==nil then
                    Logger.LogError("该技能的花费Item表没有")
                    return
                end
                local goods = BackpackData:GetInstance():GetItemDataById(c.Id)
                if goods ~=nil then
                     local num= math.floor(goods.haveNum)
                    if num >=c.Val then
                        RedPointData:GetInstance():UpdateRedState(RedPointData:GetInstance().RedName.Skill_Data, true)
                        break
                    end
                end
            end
        end
    end
    --通知主界面
    --UIManager:GetInstance():Broadcast(UIMessageNames.ON_RED_POINT_CHANGE)
end
-- 更新穿戴信息
local function UpdateWearSkill(self, _skillId, _cardId, _position)
    local skillData = self.skills[_skillId]
    if skillData ~= nil and skillData.skillType == 2 then
        skillData.cardId = _cardId
        skillData.position = _position
    end
end
--检查兑换过几次技能
local function CheckDHSkillNum(self)
    local count=0
    for _, v in pairs(self.skills) do
        if allSkillExchangeData[v.id]~=nil then
            count=count+1
        end
    end
    return count
end

--检测技能是否显示
local function CheckSkillIsShow(self,_skillId)
    if allSkillExchangeData[_skillId] ~= nil then
        if allSkillExchangeData[_skillId].IfShow == 1 then
            return true
        else
            return false
        end
    else
        return false
    end
end

SkillData.CheckSkillIsShow = CheckSkillIsShow
SkillData.GetSkillDataById = GetSkillDataById
SkillData.ParseSkill = ParseSkill
SkillData.GetSkillCountById = GetSkillCountById
SkillData.ParseSkillListFromServer = ParseSkillListFromServer
SkillData.ParseSkillListFromServerAlone = ParseSkillListFromServerAlone
SkillData.GetAllSkillsData = GetAllSkillsData
SkillData.UpdateWearSkill = UpdateWearSkill
SkillData.__init = __init
SkillData.GetSkillItemByCardIDAndSkillID = GetSkillItemByCardIDAndSkillID
SkillData.UpdateSkillDataByLevel = UpdateSkillDataByLevel
SkillData.CheckDHSkillNum = CheckDHSkillNum
SkillData.UpdateSkillRed=UpdateSkillRed
return SkillData
