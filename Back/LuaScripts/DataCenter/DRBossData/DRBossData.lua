---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/2/25 17:19
---
local BattleFieldManager=require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
local BattleAssistFunction = require "GameLogic.BattleNew.BattleAssistFunction"
local DRBossData = BaseClass("DRBossData", Singleton)

local const_param = DataUtil.GetData("mu_p_boss_constant")
local boss_data = DataUtil.GetData("mu_p_boss_duplicate")
local level_data = DataUtil.GetData("mu_p_boss_level")
local element_event_info = DataUtil.GetData("mu_p_boss_element")

local BossType = {
    World = 0, --世界
    Team = 2, --队伍
    Nation = 3, --国战
    SameCity = 5, --同城
}
--房间信息
local RoomInfo = {
    roomId = 0,
    leaderId = 0,
    leaderLevel = 0,
    leaderName = "",
    leaderPower = 0,
    level_id = 0,
    quality = 0,
    quality_cost = 0,
    players = 0,
    --状态 0-空闲，1-探索
    state = 0,
    flushNum = 0,
    isPassword = false,
}
--玩家信息
local PlayerInfoRoom = {
    position = 0,
    roleId = 0,
    roleLevel = 0,
    roleName = "",
    teamPower = {},
    isLeader = false,
    isReady = false,
}
--邀请信息
local InviteInfo = {
    name = "",
    type = 0,
    chapterId = 0,
    roomId = 0,
    power = 0,
    password = "",
}

local TeamInfo = DataClass("TeamInfo", PlayerInfoRoom)
local RoomInfo = DataClass("RoomInfo", RoomInfo)
local InviteInfo = DataClass("InviteInfo", InviteInfo)
local function __init(self)
    --静态数据
    self.element_event_info = element_event_info

    --固定参数
    --固定恢复时间   小时恢复
    self.regain_time = const_param[1].BonusCD
    --固定开启关闭时间
    self.noon_time = const_param[1].OpenTime[1]
    self.afternoon_time = const_param[1].OpenTime[2]
    --持续时间 小时
    self.continue_time = const_param[1].OpeningDuration
    --可以获得奖励最大次数
    self.attack_time_max = const_param[1].MaxBonusTimes
    --首领刷新次数价格
    self.leader_id = const_param[1].RefreshBossCostType
    self.leader_cost = const_param[1].RefreshBossCost
    --踢队长时间
    self.t_team_captain_time = const_param[1].CaptainStartTime
    --初始行动力
    self.init_team_act_value = const_param[1].TeamInitialSpirit
    --移动一个消耗多少行动里
    self.move_cost_act = const_param[1].SpiritCostPerGrid
    --购买100行动力价格
    self.buy_act_id = const_param[1].BuySpiritCostType
    self.buy_act_cost = const_param[1].BuySpiritCost
    --可视范围
    self.can_view_radius = const_param[1].TeamVisualRadius
    --清迷雾半径
    self.can_fog_radius = const_param[1].TeamDarkRadius
    --移动速度
    self.speed = const_param[1].TeamMoveSpeed

    ---变化参数

    --现在副本的状态
    self.game_status = false
    --是否请求过多人Boss数据
    self.is_request = false
    --关闭副本倒计时
    self.close_time = 0
    --可以攻打关卡
    self.can_attack_customs = 0
    --可以获得奖励次数
    self.attack_time = 3
    --次数恢复时间
    self.recovery_attack_time = 0

    --房间参数
    --首领品质已经最高
    self.no_refresh = false
    --选择的关卡ID
    self.slect_customs = 0
    --房间最大时间 秒
    self.limited_time = 0
    --副本用的场景
    self.duplicate_scene = ""
    --自己的阵容
    self.battle_team = nil
    --房间队伍信息信息
    self.room_team_info = {}
    --房间状态信息
    self.room_info = {}
    --邀请信息列表
    self.inviteMsg_list = {}

    --进入游戏Data
    self.entergame_data = {}
end

local function GetEliteMonsterHeadByQua(self, areaID)
    local levelID = self.room_info.level_id
    if level_data[levelID] then
        if areaID == 1 then
            return level_data[levelID].AEliteHead
        elseif areaID == 2 then
            return level_data[levelID].BEliteHead
        elseif areaID == 3 then
            return level_data[levelID].CEliteHead
        end
    else
        Logger.LogError("-----没有这个关卡" .. levelID)
    end
end
local function GetRoomLevelIdByQua(level_id)
    if level_data[level_id] then
        return level_data[level_id].LevelQuality
    else
        Logger.LogError("-----没有这个关卡" .. level_id)
    end
end
local function CheckCanAttackCustoms(passChapter)
    if passChapter == 0 then
        return 101
    else
        if boss_data[passChapter + 1] then
            if UserData:GetInstance().pLevel >= boss_data[passChapter + 1].OpenLevel then
                return passChapter + 1
            end
        else
            return passChapter
        end
    end
end
--解析 获得的数据 存储  （只请求一次）  并且 开始自己增加次数 ~~~  调皮
local function ParseDRBossParam(self, Msg)
    self.is_request = true
    self.can_attack_customs = CheckCanAttackCustoms(Msg.Packages.passChapter)
    self.attack_time = Msg.Packages.rewardTimes
    self.recovery_attack_time = Msg.Packages.recoveryRewardTime
end
--检查Game开关
local function CheckGameStatus(self)
    self.timer = TimerManager:GetInstance():GetTimer(1, self.UpDateSecond, self)
    self.timer:Start()
end
local function UpDateSecond(self)
    --判断 是否增长次数
    if self.is_request and self.attack_time < self.attack_time_max then
        self.recovery_attack_time = self.recovery_attack_time - 1
        if self.recovery_attack_time <= 0 then
            --增加次数
            self.attack_time = self.attack_time + 1 > self.attack_time_max and self.attack_time_max or self.attack_time + 1
            self.recovery_attack_time = self.regain_time * 60 * 60
        end
    end
    --判断 多人Boss是否开启
    local curTime = Mathf.Floor(TimeSyncManager:GetInstance():GetSimulationJavaMS() / 1000)
    local formatTime = tonumber(os.date("%H", curTime))
    if (formatTime >= self.noon_time and formatTime <= self.noon_time + self.continue_time) or
            (formatTime >= self.afternoon_time and formatTime <= self.afternoon_time + self.continue_time) then
        --可以打开
        local lockdata, type, des = UnlockData:GetInstance():GetLockDataState(108)
        if lockdata then
            if not self.game_status then
                self.game_status = true
                --发送开
                UIManager:GetInstance():Broadcast(UIMessageNames.UI_MUL_PEOPLE_BOSS_STATUS, true)
            end
        end
        local min_time = tonumber(os.date("%M", curTime))
        local sec_time = tonumber(os.date("%S", curTime))
        local all_second = (formatTime >= self.noon_time and formatTime <= self.noon_time + self.continue_time) and
                (formatTime - self.noon_time) * 3600 + min_time * 60 + sec_time or (formatTime - self.afternoon_time) * 3600 + min_time * 60 + sec_time
        all_second = all_second > self.continue_time * 3600 and self.continue_time * 3600 or all_second
        local remain_time = self.continue_time * 3600 - all_second
        self.close_time = string.format("%.2d:%.2d:%.2d", Mathf.Floor(remain_time / (60 * 60)), Mathf.Floor(remain_time / 60 % 60), Mathf.Floor(remain_time % 60))
    else
        --关闭
        if self.game_status then
            self.game_status = false
            --发送关闭
            UIManager:GetInstance():Broadcast(UIMessageNames.UI_MUL_PEOPLE_BOSS_STATUS)
        end
    end
end
--设置选择的房间
local function SetSelectCustoms(self, id)
    self.slect_customs = id
    self.limited_time = boss_data[id].LimitedTime * 60
    self.duplicate_scene = boss_data[id].DuplicateScene
end

--自己刷新Boss 返回关卡 掉一次   别人刷新 会直接 返回SimpleRoom 不用管
local function RefreshBossQuaData(self, level_id)
    self.room_info.level_id = level_id
    self.room_info.flushNum = self.room_info.flushNum + 1
    self.room_info.quality = GetRoomLevelIdByQua(level_id)
    self.room_info.quality_cost = self:RefreshBossQua()
end

--更新刷Boss次数 和对应的花费
local function RefreshBossQua(self)
    self.no_refresh = self.room_info.flushNum >= #self.leader_cost
    if not self.no_refresh then
        return self.leader_cost[self.room_info.flushNum + 1]
    end
    return self.leader_cost[#self.leader_cost]
end

--自己的阵容
local function ParseBattleTeam(self, Msg)
    --阵容
    self.battle_team = Msg
end


--房间信息
local function ParseRoomInfo(self, Msg)
    local item = RoomInfo.New()
    item.roomId = Msg.roomId
    item.leaderId = Msg.leaderId
    item.leaderLevel = Msg.leaderLevel
    item.leaderName = Msg.leaderName
    item.leaderPower = Msg.leaderPower
    item.level_id = Msg.quality  --关卡Id
    item.flushNum = Msg.flushNum + 1--服务器是从0  开始   客户端是从1开始
    item.quality = GetRoomLevelIdByQua(item.level_id)
    item.players = Msg.players
    item.state = Msg.state
    item.isPassword = Msg.isPassword
    self.room_info = item
    item.quality_cost = self:RefreshBossQua()
    print("房间信息初始化")
end

--解析队伍信息
local function ParseTeamInfo(self, Msg)
    self.room_team_info = {}
    for _, v in ipairs(Msg) do
        local item = TeamInfo.New()
        item.position = v.position
        item.roleId = v.roleId
        item.roleLevel = v.roleLevel
        item.roleName = v.roleName
        item.teamPower = v.teamPower
        item.isLeader = v.isLeader
        item.isReady = v.isReady
        self.room_team_info[v.position] = item
    end
end
--更新队伍信息
local function UpdateTeamInfo(self, Msg)
    for _, v in ipairs(Msg) do
        self:RemoveTeamInfo(v.roleId)
        if self.room_team_info[v.position] == nil then
            local item = TeamInfo.New()
            item.position = v.position
            item.roleId = v.roleId
            item.roleLevel = v.roleLevel
            item.roleName = v.roleName
            item.teamPower = v.teamPower
            item.isLeader = v.isLeader
            self.room_team_info[v.position] = item
        else
            self.room_team_info[v.position].position = v.position
            self.room_team_info[v.position].roleId = v.roleId
            self.room_team_info[v.position].roleLevel = v.roleLevel
            self.room_team_info[v.position].roleName = v.roleName
            self.room_team_info[v.position].teamPower = v.teamPower
            self.room_team_info[v.position].isLeader = v.isLeader
        end
        if v.isLeader and self.room_info.leaderId ~= v.roleId then
            print("队长变更后 改房间信息")
            self.room_info.leaderId = v.roleId
            self.room_info.leaderLevel = v.roleLevel
            self.room_info.leaderName = v.roleName
            self.room_info.leaderPower = v.teamPower
        end
    end
end
--删除玩家房间信息
local function RemoveTeamInfo(self, roleId)
    for k, v in pairs(self.room_team_info) do
        if v.roleId == roleId then
            self.room_team_info[k] = nil
        end
    end
    print(#self.room_team_info .. "队伍数量")
end

--更新玩家准备状态
local function UpdatePlayerReadyState(self, roleId, isReady)
    for k, v in pairs(self.room_team_info) do
        if v.roleId == roleId then
            self.room_team_info[k].isReady = isReady
            break
        end
    end
end

--获取玩家准备状态
local function GetPlayerReadyState(self, roleId)
    for k, v in pairs(self.room_team_info) do
        if v.roleId == roleId then
            return self.room_team_info[k].isReady
        end
    end
end

--接收到邀请信息
local function ReceiveInviteMsg(self, msg)
    local info = InviteInfo.New();
    info.name = msg.name;
    info.chapterId = msg.chapterId;
    info.roomId = msg.roomId;
    info.power = msg.power;
    info.password = msg.password;
    info.type = msg.type;
    table.insert(self.inviteMsg_list, info);
    if UIManager:GetInstance():GetWindow(UIWindowNames.UIDRBossInvite, true, true) == nil then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIDRBossInvite)
    end
end

--移除邀请信息
local function RemoveInviteMsg(self, msg)
    for k, v in pairs(self.inviteMsg_list) do
        if v.roomId == msg.roomId then
            table.remove(self.inviteMsg_list, k);
            break
        end
    end
    if #self.inviteMsg_list > 0 then
        if UIManager:GetInstance():GetWindow(UIWindowNames.UIDRBossInvite, true, true) == nil then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIDRBossInvite)
        else
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_WORLD_BOSS_ROOM_INVITE_LIST_REFRESH)
        end
    else
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIDRBossInvite)
    end
end

--检查 通过的关卡  每次通过关卡 获得奖励的时候 开始检测
--1  是否需要刷新 最新关卡
--2  是否需要减次数
local function CheckCustomsAndTimes(self, have_award)
    --通关不一定获得奖励
    if have_award then
        self.recovery_attack_time = self.attack_time == self.attack_time_max and self.regain_time * 60 * 60 or self.recovery_attack_time
        self.attack_time = self.attack_time - 1 > 0 and self.attack_time - 1 or 0
    end
    local chapter = CheckCanAttackCustoms(self.slect_customs)
    self.can_attack_customs = chapter > self.can_attack_customs and chapter or self.can_attack_customs
end
local function __delete(self)
    self.is_request = false
    self.room_info = nil
    self.room_team_info = nil
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end
end

--todo
local function SendGetDRBossData(self)
    local room_info_id = MsgIDDefine.PBDRBOSS_BOSS_LIST_REQUEST
    NetManager:GetInstance():SendMessage(room_info_id, nil, function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBCARD_HELL_REWARD_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            self:ParseDRBossParam(msg_obj)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIMultipleMonstersChoose)
        end
    end)
end
--发送 进入房间 协议
local function SendBeginGame(self)
    local msg_id = MsgIDDefine.PBDRBOSS_EXPLORE_START_REQUEST
    NetManager:GetInstance():SendMessage(msg_id, nil, function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBDRBOSS_EXPLORE_START_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            self:ParseEnterGameParam(msg_obj.Packages)
        end
    end)
end
--解析数据
local function ParseEnterGameParam(self, data)
    self.entergame_data = data.area
    self.slect_customs = data.chapterId
    self.duplicate_scene = boss_data[data.chapterId].DuplicateScene
    --todo,临时代码
    SceneManager:GetInstance():SwitchScene(SceneConfig.WorldBossScene)
end
--进入房间
local function SendJoinRoom(self, levelId, roomId, _psd, _msg)
    local room_info_id = MsgIDDefine.PBDRBOSS_ENTER_ROOM_REQUEST
    local room_info = (MsgIDMap[room_info_id])()
    room_info.levelId = levelId
    room_info.roomId = roomId
    if _psd == nil then
        room_info.password = ""
    else
        room_info.password = _psd
    end
    NetManager:GetInstance():SendMessage(room_info_id, room_info, function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBDRBOSS_ENTER_ROOM_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            self:RemoveInviteMsg({ roomId = roomId });
            return
        else
            --清空邀请信息队列
            self.inviteMsg_list = {}
            if UIManager:GetInstance():GetWindow(UIWindowNames.UIDRBossInvite, true, true) ~= nil then
                UIManager:GetInstance():CloseWindow(UIWindowNames.UIDRBossInvite)
            end
            self:ParseRoomInfo(msg_obj.Packages.room.simpleRoom)
            self:ParseTeamInfo(msg_obj.Packages.room.PlayerInRoom)
            self:ParseBattleTeam(msg_obj.Packages.team)
            if _msg ~= nil then
                _msg()
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIDRBossRoom)
        end
    end)
end

--搜索
local function SendSearchMessage(self, _str, _levelId)
    local room_info_id = MsgIDDefine.PBDRBOSS_SEARCH_ROOM_REQUEST
    local room_info = (MsgIDMap[room_info_id])()
    room_info.levelId = _levelId
    room_info.param = _str
    NetManager:GetInstance():SendMessage(room_info_id, room_info, function(msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBDRBOSS_SEARCH_ROOM_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            self:ParseRoomInfo(msg_obj.Packages.room)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIMultipleMonstersResoult, _levelId)
        end
    end)
end

--地图探索事件
local function SendExploreEvent(self, teamId, option)
    local msg_id = MsgIDDefine.PBDRBOSS_EXPLORE_EVENT_REQUEST
    local data = (MsgIDMap[msg_id])()
    data.teamId = teamId
    data.option = option
    NetManager:GetInstance():SendMessage(msg_id,data,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBDRBOSS_EXPLORE_EVENT_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            -- 进入战斗
            if msg_obj.Packages.fightEvent ~= nil then
                BattleFieldManager:GetInstance().battlePackages = msg_obj.Packages.fightEvent
                BattleAssistFunction.EnterWorldBossBattle()
            end
        end
    end)
end

DRBossData.__delete = __delete
DRBossData.__init = __init
DRBossData.SendJoinRoom = SendJoinRoom
DRBossData.CheckGameStatus = CheckGameStatus
DRBossData.UpDateSecond = UpDateSecond
DRBossData.ParseDRBossParam = ParseDRBossParam
DRBossData.CheckCustomsAndTimes = CheckCustomsAndTimes
DRBossData.SetSelectCustoms = SetSelectCustoms
DRBossData.RefreshBossQua = RefreshBossQua
DRBossData.SendGetDRBossData = SendGetDRBossData
DRBossData.ParseTeamInfo = ParseTeamInfo
DRBossData.UpdateTeamInfo = UpdateTeamInfo
DRBossData.ParseRoomInfo = ParseRoomInfo
DRBossData.ParseBattleTeam = ParseBattleTeam
DRBossData.RemoveTeamInfo = RemoveTeamInfo
DRBossData.RefreshBossQuaData = RefreshBossQuaData
DRBossData.UpdatePlayerReadyState = UpdatePlayerReadyState
DRBossData.GetPlayerReadyState = GetPlayerReadyState
DRBossData.ReceiveInviteMsg = ReceiveInviteMsg
DRBossData.RemoveInviteMsg = RemoveInviteMsg
DRBossData.SendBeginGame = SendBeginGame
DRBossData.SendSearchMessage = SendSearchMessage
DRBossData.ParseEnterGameParam =ParseEnterGameParam
DRBossData.SendExploreEvent = SendExploreEvent
DRBossData.GetEliteMonsterHeadByQua = GetEliteMonsterHeadByQua
return DRBossData