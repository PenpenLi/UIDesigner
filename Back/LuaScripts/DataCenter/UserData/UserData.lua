---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2018/11/14 14:28
---
local UserData = BaseClass("UserData", Singleton)
local startTime=0
local PlayerPrefs =CS.UnityEngine.PlayerPrefs;
local function __init(self)
    self.roleID=0
    self.guardExp = 0           ---守护灵经验池
    self.hostExp = 0            ---寄灵人经验池
    self.skillExp = 0           ---技能经验池
    self.pLevel = 0             ---玩家等级
    self.userExp = 0            --玩家经验
    self.curUserExpPercent = 0
    self.currency = {}          --玩家拥有的货币
    self.send_stamina = false
    self.buy_coin_times = 0     ---今日已购买金币次数
    self.name = ""
    self.nationUnionId = 0  --国战联盟id
    self.hellLevel = 1          ---玩家地狱道等级
    self.curLevelExp = 0
    self.curLevelLimitTxp = 1
    self.isShowLvPanel=false;--是否显示升级界面
    self.createTime = 0         ---创角时间
    self.questionTimes=0        --问卷调查次数
    self.pHead = 0             ---玩家头像id
    self.pHeadFrame = 0        ---玩家框头像id
    self.drawList=nil          ---抽卡感灵值列表
    self.ldRewardTime=-1;      --主角征集奖励倒计时
    self.ldReward=false;       --主角征集奖励是否已领取
    self.ldRewardInitIime=0;   --主角征集奖励的初始时间
    self.ldRewardOpenState=false;
end

--刷新抽卡数据
local function RefreshDrawList(self,_id,_drawNum,_type)
    if self.drawList[_id]~=nil then
        self.drawList[_id].num=_drawNum;
        local addNum=_type==1 and 1 or 10
        self.drawList[_id].count=self.drawList[_id].count+addNum;
    end
end

--初始化存储抽卡的感灵值
local function SetDrawList(self,_data)
    self.drawList={};
    for i, v in ipairs(_data) do
        self.drawList[v.id]={num=v.drawNum,count=v.count}
    end
end

local function SetRoleID(self,id)
    self.roleID=id
    self:InitTeachData()
end
local function InitTeachData(self)
    local  teachStateData=DataUtil.GetData("teach_level")
    for i, v in pairs(teachStateData) do
        local Str=tostring(self.roleID)..tostring(i)
        local StrBool=tostring(self.roleID)..tostring(i).."bool"
        if PlayerPrefs.HasKey(Str) then
            break
        else
            PlayerPrefs.SetInt(Str,0)
            PlayerPrefs.SetInt(StrBool,0)
        end
    end
end
--判断新手教学战斗的进度  来影响新手引导
local function GetTeachData(self,battleID)
    if self:JudgeTeachData(battleID) then
        local Str=tostring(self.roleID)..tostring(battleID)
        if PlayerPrefs.GetInt(Str)>=2000 then
            return true
        else
            return false
        end
    else
        return false
    end
end
local function JudgeTeachData(self,battleID)
    local Str=tostring(self.roleID)..tostring(battleID)
    if PlayerPrefs.HasKey(Str) then
        local StrBool=tostring(self.roleID)..tostring(battleID).."bool"
        if PlayerPrefs.GetInt(StrBool)==0 then
            return true
        else
            return false
        end
    else
        return false
    end
end
local function SetTeachData(self,battleID,success)
    if self:JudgeTeachData(battleID) then
        if success then
            local StrBool=tostring(self.roleID)..tostring(battleID).."bool"
            PlayerPrefs.SetInt(StrBool,1)
        else
            local Str=tostring(self.roleID)..tostring(battleID)
            local num=PlayerPrefs.GetInt(Str)
            PlayerPrefs.SetInt(Str,num+1)
        end
    end
end
--冒险关卡1-9
local function JudgeFightData(self,battleID)
    local StrBool=tostring(self.roleID)..tostring(battleID)
    if PlayerPrefs.HasKey(StrBool) then
        if PlayerPrefs.GetInt(StrBool)>=1 then
            return true
        else
            return false
        end
    else
        return false
    end
end
local function SetFightData(self,BattleID)
    if BattleID>=10107 and BattleID<=10109 then
        local StrBool=tostring(self.roleID)..tostring(BattleID)
        if PlayerPrefs.HasKey(StrBool) then
            local num=PlayerPrefs.GetInt(StrBool)
            PlayerPrefs.SetInt(StrBool,num+1)
        else
            PlayerPrefs.SetInt(StrBool,1)
        end
    end
end


local function StaminaResponse(self,msg_obj)
    --NetManager:GetInstance():RemoveListener(MsgIDDefine.PBUSER_SYC_STAMINA_RESPONSE,StaminaResponse)
    self.send_stamina = false
    if msg_obj.OpCode==0 then
        local old = BackpackData:GetInstance():GetItemNumById(CoinDefine.Stamina)
        BackpackData:GetInstance():UpdateItemData(CoinDefine.Stamina,msg_obj.Packages.stamina - old)
    end
end

local function AddBuyTimes(self,add)
    self.buy_coin_times = self.buy_coin_times+add
end

local function GetBuyTimes(self)
    return self.buy_coin_times or 0
end

local function StaminaDownCount(self)
    if not self.send_stamina then
        self.send_stamina = true
        NetManager:GetInstance():SendMessage(MsgIDDefine.PBUSER_SYC_STAMINA_REQUEST, nil,Bind(self,self.StaminaResponse))
        --NetManager:GetInstance():AddListener(MsgIDDefine.PBUSER_SYC_STAMINA_RESPONSE,StaminaResponse,self)
    end
end

local function CalCulatePlayerLevel(self)
    local team_level = DataUtil.GetData("team_level")
    local master_hell=DataUtil.GetData("master_hell");
    local limitLv=master_hell[self.hellLevel].LvLimit;
    self.pLevel=nil
    for i, v in ipairs(team_level) do
        if self.userExp < v.Exp then
            if i<=limitLv then
                self.pLevel = i
                if i > 1 then
                    self.curLevelExp=self.userExp - team_level[i-1].Exp;
                    self.curLevelLimitTxp=v.Exp-team_level[i-1].Exp;
                else
                    self.curLevelExp=self.userExp;
                    self.curLevelLimitTxp = v.Exp
                end
            else
                self.pLevel = limitLv;
                self.curLevelExp=self.userExp - team_level[self.pLevel-1].Exp;
                self.curLevelLimitTxp=team_level[self.pLevel].Exp-team_level[self.pLevel-1].Exp;
            end

            break
        end
    end
    if  self.pLevel==nil then
        self.pLevel=#team_level
        self.curLevelExp=self.userExp - team_level[self.pLevel].Exp;
        self.curLevelLimitTxp=team_level[self.pLevel].ExpCur
    end
end
local function UpdateOldLv(self)
    self.oldLv=self.pLevel
end
local function UpdateOldHellLv(self)
    self.old_hellLevel=self.hellLevel
end
local function UpdateExp(self,val)
    self.oldExp=self.userExp
    self.userExp = val
    local oldLv = self.pLevel
    self.oldLv=oldLv;
    CalCulatePlayerLevel(self)
    if self.pLevel > oldLv then
        Logger.Log("等级 提升")
        self.isShowLvPanel=true;
        --SdkManager:GetInstance().DataReport:SetAccountLevel(self.pLevel);
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_REQUEST_LEVEL_CHANGE)
        GuideManager:GetInstance():CheckLaunchGuide()
        GuideWeakCheckManager:GetInstance():GiveNoticeLevel(self.pLevel)
        --todo 通知等级礼包
        LevelGiftData:GetInstance():UpdateLevelGiftWindowState()
        --通知CardData 刷新寄灵人
        CardData:GetInstance():UpDataCardDataByHeroLvChangeCardLv(self.pLevel)
    end
    --if UIManager:GetInstance():GetWindow(UIWUIHeadMainModelindowNames.UITestMain,true,true) ~= nil then
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_LEVEL_UPDATE)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_CHANGE)
    --end
end

local function ParseServerData(self,data)
    self.guardExp = data.guardExp                 ---守护灵经验池
    self.hostExp = data.hostExp                   ---寄灵人经验池
    self.skillExp = data.skillExp                 ---技能经验池
    --self.pLevel = data.plevel                     ---玩家等级
    self.userExp = data.exp
    self.oldExp=data.exp
    self.max_stamina = data.maxStamina            ---最大体力值
    self.name = data.name
    self.hellLevel = math.floor(data.hellLevel)
    self.old_hellLevel=math.floor(data.hellLevel)
    --Logger.LogVars("ParseServerData data.nationUnionId : ",data.nationUnionId)
    self.nationUnionId = data.nationUnionId
    self.questionTimes=data.questionTime
    self.loginDay=data.loginDay
    self.createTime = data.createTime
    self.changeNameNum=data.changeNameNum

    --主角征集
    self.ldRewardTime=data.ldRewardTime;
    self.ldReward=data.ldReward;
    self.ldRewardInitIime=Time.realtimeSinceStartup;
    --SdkManager:GetInstance().DataReport:SetAccountName(self.name);
    if data.coinExchangeTime ~= nil then
        self.buy_coin_times = data.coinExchangeTime   ---今日已购买金币次数
    end
    CalCulatePlayerLevel(self)
    self.oldLv=self.pLevel
    self.pHead = data.head
    self.pHeadFrame = data.frame
    self.inner_serverId = math.modf(data.serverId) -- 服务器内部服id

    --SdkManager:GetInstance().DataReport:SetAccountLevel(self.pLevel);
    --TODO 把阵容解析
    self:GetAllBattleInfoData(data.battleTeam)
end
---更新玩家头像头像框
local function UpdatePlayerHeadInfo(self,_head,_frame)
    self.pHead = _head
    self.pHeadFrame = _frame
end
local function GetNorBattleCanMove(self)
    --查看 是否是中间有寄灵人  如果有 引导推拽
    --查看中间是否是曹焱兵  不是引导
    local key_data=self.battle_info_list[0]
    local mid_id=false
    local left_id=false
    local right_id=false
    for _, data in ipairs(key_data) do
        if    data.host~=nil  and data.host.cardId>0 then
            if data.position==0 then
                mid_id= true
            elseif data.position==1 then
                left_id= true
            elseif data.position==2 then
                right_id=true
            end
        end
    end
    for _, data in ipairs(key_data) do
        if    data.host~=nil  and data.position==1 and data.host.cardId==1101001 and MapData:GetInstance():GetLastWinLevelId()==10109 then
            return true
        end
    end
    if mid_id and (not left_id or not right_id) then
        return true
    end
    return false
end
local function GetBattleHeroNum(self,key,ishost)
    --获取对战上阵英雄数量
    local num=0
    for i, v in pairs(self.battle_info_list) do
        if i==key then
            for _, data in ipairs(v) do
                if ishost and  data.host~=nil and data.host.cardId>0 then
                    num=num+1
                end
                if not ishost and data.guardian~=nil and data.guardian.cardId>0 then
                    num=num+1
                end
            end
            return num
        end
    end
    Logger.LogError("没有获取布阵信息"..key)
    return num
end
local function GetAllBattleInfoData(self,data)
    --0-冒险，1-风，2-花，3-雪，4-月，5-恶灵入侵，6-试炼宝库，7-个人竞技进攻，8-个人竞技防守，9-实时竞技
--[[
message Team{
	optional Entity host = 1; // 出战寄灵人
    optional Entity guardian = 2; // 出战守护灵
    optional int32 position = 3; // 位置 // 0-中间，1-左边，2-右边
}
message Entity {
	optional int32 cardId = 1;
	optional int32 level = 2;
	optional int32 star = 3;//星级
}
--]]

    self.battle_info_list={}
    for _, v in ipairs(data) do
        --[[
        if v.key==0 then
            if v.team[1] then
                print("1-"..v.team[1].host.cardId)
                print("1-"..v.team[1].guardian.cardId)
                print("1-"..v.team[1].position)
            end
            if v.team[2] then
                print("2-"..v.team[2].host.cardId)
                print("2-"..v.team[2].guardian.cardId)
                print("2-"..v.team[2].position)
            end
            if v.team[3] then
                print("3-"..v.team[3].host.cardId)
                print("3-"..v.team[3].guardian.cardId)
                print("3-"..v.team[3].position)
            end
        end
        --]]
        self.battle_info_list[v.key] = v.team
    end
end
local function UpDateBattleInfoData(self,key,data)
    local have_data=false
    for i, v in pairs(self.battle_info_list) do
        if i==key then
            have_data=true
            self.battle_info_list[i]=data
            break
        end
    end
    if not have_data then
        self.battle_info_list[key]=data
    end
    --更新阵容
    CardData:GetInstance():GetBattleHero()
end
local function GetBattleInfoData(self,key)
    for i, v in pairs(self.battle_info_list) do
        if i==key then
           return self.battle_info_list[i]
        end
    end
    Logger.LogError("没有获取布阵信息"..tostring(key))
end

---更新地狱道等级
local function UpdatePlayerHellLevel(self,_lv)
    if _lv>self.hellLevel then
        self.old_hellLevel=self.hellLevel
    end
    self.hellLevel = _lv
    UnlockData:GetInstance():CheckNewOpenFunList(nil,nil,true)
    UpdateExp(self, self.userExp)
end
--更新地狱道等级
local function UpdateHellLv(self)
    self.old_hellLevel=self.hellLevel
end
local function UpdateRemainTime(self)
    if  self.i==0 then
        self.i=360
    end
    self.i=self.i-1
end

local function OnRefreshTime(self)
    self.i=360
    if self.timer ~= nil then
        self.timer:Stop()
    end
    self:UpdateRemainTime()
    self.timer = TimerManager:GetInstance():GetTimer(1, self.UpdateRemainTime , self)
    self.timer:Start()
end

local function GetTimeNumber(self)
    return self.i
end


local function BeginStaminTier(self)
    --开启体力倒计时
    self:OnRefreshTime()
    if self.stamina_timer == nil then
        local interval_time =60
        --local startTime=0
        startTime=Time.time
        if ShopData:GetInstance():GetGlobleItemInfoById(105) ~= nil then
            interval_time = 60*ShopData:GetInstance():GetGlobleItemInfoById(105)
        end
        self.stamina_timer = TimerManager:GetInstance():GetTimer(interval_time, StaminaDownCount , self)
        self.stamina_timer:Start()
    end
end



local function GetStartTime(self)
    return  startTime
end

local function SetUserLevel(self,level)
    self.pLevel = level
    GuideWeakCheckManager:GetInstance():GiveNoticeLevel(self.pLevel)
    GuideManager:GetInstance():CheckLaunchGuide()
    --TalkingData设置等级
    --SdkManager:GetInstance().DataReport:SetAccountLevel(self.pLevel);
    CardData:GetInstance():UpDataCardDataByHeroLvChangeCardLv(self.pLevel)
    --todo 通知等级礼包
    LevelGiftData:GetInstance():UpdateLevelGiftWindowState()
end

local function GetUserLevel(self,level)
    return self.pLevel or 0
end

local function GetUserName(self)
    return self.name
end

local function __delete(self)
    self.roleID=0
    self.guardExp = 0           ---守护灵经验池
    self.hostExp = 0            ---寄灵人经验池
    self.skillExp = 0           ---技能经验池
    self.pLevel = 0             ---玩家等级
    self.userExp = 0            --玩家经验
    self.curUserExpPercent = 0
    self.currency = {}          --玩家拥有的货币
    self.send_stamina = false
    self.buy_coin_times = 0     ---今日已购买金币次数
    self.name = ""
    self.nationUnionId = 0  --国战联盟id
    self.hellLevel = 1          ---玩家地狱道等级
    self.curLevelExp = 0
    self.curLevelLimitTxp = 1
    self.isShowLvPanel=false;--是否显示升级界面
    self.createTime = 0         ---创角时间
    self.inner_serverId = 0
    if self.timer ~= nil then
        self.timer:Stop()
        self.timer = nil
    end

    if self.stamina_timer ~= nil then
        self.stamina_timer:Stop()
        self.stamina_timer = nil
    end
end

--设置问卷调成次数
local function SetQuestionTimes(self,_times)
    self.questionTimes=_times;
end

--获取内部服务器id
local function GetInnerServerId(self)
    return self.inner_serverId
end



UserData.__init = __init
UserData.RefreshDrawList=RefreshDrawList;
UserData.SetDrawList=SetDrawList;
UserData.SetQuestionTimes=SetQuestionTimes;
UserData.__delete = __delete
UserData.UpdateExp = UpdateExp
UserData.AddBuyTimes = AddBuyTimes
UserData.UpdatePlayerHellLevel = UpdatePlayerHellLevel
UserData.ParseServerData = ParseServerData
UserData.BeginStaminTier = BeginStaminTier
UserData.SetUserLevel = SetUserLevel
UserData.GetUserLevel = GetUserLevel
UserData.GetBuyTimes=GetBuyTimes
UserData.GetStartTime=GetStartTime
UserData.OnRefreshTime=OnRefreshTime
UserData.GetTimeNumber=GetTimeNumber
UserData.UpdateRemainTime=UpdateRemainTime
UserData.StaminaResponse = StaminaResponse
UserData.SetRoleID= SetRoleID
UserData.InitTeachData = InitTeachData
UserData.GetTeachData = GetTeachData
UserData.SetTeachData = SetTeachData
UserData.JudgeTeachData = JudgeTeachData
UserData.GetUserName = GetUserName
UserData.SetFightData = SetFightData
UserData.JudgeFightData = JudgeFightData
UserData.GetNorBattleCanMove=GetNorBattleCanMove
UserData.GetAllBattleInfoData = GetAllBattleInfoData
UserData.UpDateBattleInfoData  =UpDateBattleInfoData
UserData.GetBattleInfoData = GetBattleInfoData
UserData.GetBattleHeroNum = GetBattleHeroNum
UserData.GetInnerServerId = GetInnerServerId
UserData.UpdatePlayerHeadInfo = UpdatePlayerHeadInfo
UserData.UpdateOldLv = UpdateOldLv
UserData.UpdateHellLv = UpdateHellLv
UserData.UpdateOldHellLv  =UpdateOldHellLv
return UserData