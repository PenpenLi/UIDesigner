---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ljl.
--- DateTime: 2019/4/3 16:21
---

local allRelicBodyData = DataUtil.GetData("relic_body")
local allRelicModelData = DataUtil.GetData("relic_module")
local propertyData = DataUtil.GetData("property")
local allItemData = DataUtil.GetData("item")
local allRelicAttrData = DataUtil.GetData("relic_attr_condition")
local propertyList = DataUtil.GetData("property")

---神器数据
local ArtifactData = {
    --神器id
    art_id = 0,
    --解锁等级
    un_lock_lv = 0,
    --神器名字
    art_name = "",
    --神器属性筛选器
    art_mast=0,
    --神器开启状态 0未开启  1开启
    art_state = 0,
    --神器图片名字
    art_icon = "",
    --神器的当前等级
    art_now_level = 0,
    --神器的最大等级
    art_max_level = 0,
    --神器升级的属性
    art_lv_up_info = "",
    --神器的等级属性
    art_level_info = {},
    --神器的当前等级属性
    art_now_level_info = {},
    --神器的下一等级属性
    art_next_level_info = {},
    --神器部件的集合
    art_fact_bodyList = {},
    --是否能升級（顯示紅點）
    art_is_show_red_point = 0,
    --品质框
    art_frame = "",
    --属性
    property={},
    InitProper=function(self)
        for i, v in pairs(propertyList) do
            self.property[i]=0
        end
    end,
    AssignProperty =function(self,_type,_num)
        if type(_type) == "number" and type(_num) == "number" then
            self.property[_type]=self.property[_type]+_num
        end
    end,
    UpdataProperty =function(self)
        --计算 101
        self:InitProper()
       --中间
        if self.art_now_level>0 then
            for i = 1, #allRelicBodyData do
                if allRelicBodyData[i].Id==self.art_id then
                    if allRelicBodyData[i].Lvs[self.art_now_level].Prop ~= nil then
                        local  Prop=allRelicBodyData[i].Lvs[self.art_now_level].Prop
                        for j = 1,#Prop  do
                            self:AssignProperty(Prop[j].Id,Prop[j].Val)
                        end
                    end
                    if allRelicBodyData[i].Lvs[self.art_now_level].GProp ~= nil then
                        local  Prop=allRelicBodyData[i].Lvs[self.art_now_level].GProp
                        for j = 1,#Prop  do
                            self:AssignProperty(Prop[j].Id,Prop[j].Val)
                        end
                    end
                    local Buns=allRelicBodyData[i].phaseBunus
                    local dataasda=DataUtil.GetData("property")
                    for j = 1, #Buns do
                        if self.art_now_level>=allRelicBodyData[i].phaseBunus[j].Lv then
                            local BunsProp=allRelicBodyData[i].phaseBunus[j].Prop
                            local BunsGProp=allRelicBodyData[i].phaseBunus[j].GProp
                            if BunsProp~=nil then
                                for m = 1, #BunsProp do
                                    self:AssignProperty(BunsProp[m].Id,BunsProp[m].Val)
                                end
                            end
                            if BunsGProp~=nil then
                                for m = 1, #BunsGProp do
                                    self:AssignProperty(BunsGProp[m].Id,BunsGProp[m].Val)
                                end
                            end
                        end
                    end
                end
            end
        end
        --部件计算
        for i = 1, #self.art_fact_bodyList do
            if self.art_fact_bodyList[i].artifact_level_now>0 then
                self.art_fact_bodyList[i]:InitProper()
                local Prop= allRelicModelData[self.art_fact_bodyList[i].artifact_id].Lvs[self.art_fact_bodyList[i].artifact_level_now].Prop
                local GProp= allRelicModelData[self.art_fact_bodyList[i].artifact_id].Lvs[self.art_fact_bodyList[i].artifact_level_now].GProp
                if Prop ~=nil then
                    for j = 1, #Prop do
                        self.art_fact_bodyList[i]:AssignProperty(Prop[j].Id,Prop[j].Val)
                    end
                end
                if GProp ~=nil then
                    for j = 1, #GProp do
                        self.art_fact_bodyList[i]:AssignProperty(GProp[j].Id,GProp[j].Val)
                    end
                end
            end
        end
    end,


}

---神器部件的数据
local ArtifactBodyData = {
    --神器部件的id
    artifact_id = 0,
    --部件的状态开启状态 0未开启  1开启
    artifact_state = 0,
    --神器属性筛选器
    artifact_mast=0,
    --部件的当前等级
    artifact_level_now = 0,
    --部件的最大等级
    artifact_level_max = 0,
    --部件的名字
    artifact_name = "",
    --部件的坐标
    artifact_pos = 0,
    --部件的图片名字
    artifact_icon = "",
    --部件的品质框
    artifact_frame = "",
    --部件当前效果集合
    artifact_now_infoList = {},
    --部件的下一等级效果集合
    artifact_next_infoList = {},
    --升级所需金币数量 /总数
    artifact_level_up_num = "",
    --升级货币的图标
    artifact_take_icon = "",
    --升级货币数量
    artifact_take_num = 0,
    --升级货币id
    artifact_take_id = 0,
    --升级材料集合
    artifact_level_itemList = {},
    --汇总的当前等级属性
    artifact_all_now_list = {},
    artifact_lv_update = false,
    --是否能升級（顯示紅點）
    artifact_is_show_red_point = 0,
    artifact_lv_id = 0,
    --神器等级属性
    artifact_level_info = {},
    property={},
    InitProper=function(self)
        for i, v in pairs(propertyList) do
           self.property[i]=0
        end
    end,
    AssignProperty =function(self,_type,_num)
        if type(_type) == "number" and type(_num) == "number" then
            self.property[_type]=self.property[_type]+_num
        end
    end,
}

local ArtifactsData = BaseClass("ArtifactsData", Singleton)
local itemData = require "DataCenter/ShowItemData/ShowItemData"
local artifact_data = DataClass("artifact_data",ArtifactData)
local artifact_body_data = DataClass("artifact_body_data",ArtifactBodyData)

local function __init(self)
    -- 所有卡牌列表
    self.artifactList = {}
    self.artifactBodyData = {}
    self.artifactListLvUpdate = false

end

---解析神器和套装数据
local function AnalysisData(self,_relicData)
    self.artifactList = {}
    for _, v in ipairs(allRelicBodyData) do
        local artifactAloneData = artifact_data.New()
        artifactAloneData:InitProper()
        artifactAloneData.art_id = v.Id
        artifactAloneData.art_name = v.Name
        if(UserData:GetInstance().pLevel >= v.UnlockLv) then
            artifactAloneData.art_state = 1
        else
            artifactAloneData.art_state = 0
        end
        artifactAloneData.un_lock_lv = v.UnlockLv
        artifactAloneData.art_icon = v.Icon
        artifactAloneData.art_frame = SpriteDefine:GetItemQualityFrameByType(v.Quality)
        if allRelicAttrData[v.Condition] ~= nil then
            artifactAloneData.art_mast=allRelicAttrData[v.Condition].mask
        end
        for j = 1, table.count(v.Components) do
            if allRelicModelData[tonumber(v.Components[j])] ~= nil then
                local artifactBodyAloneData = artifact_body_data.New()
                artifactBodyAloneData:InitProper()
                local comment_id = tonumber(v.Components[j])
                local all_relicData = allRelicModelData[comment_id]
                artifactBodyAloneData.artifact_id = comment_id
                artifactBodyAloneData.artifact_name = all_relicData.Name
                artifactBodyAloneData.artifact_icon = all_relicData.Icon
                artifactBodyAloneData.artifact_frame =SpriteDefine:GetItemQualityFrameByType(all_relicData.Qua)
                artifactBodyAloneData.artifact_pos = all_relicData.Pos
                artifactBodyAloneData.artifact_level_max = #all_relicData.Lvs
                if allRelicAttrData[all_relicData.ConditionId] ~= nil then
                    artifactBodyAloneData.artifact_mast=allRelicAttrData[all_relicData.ConditionId].mask
                end
                if _relicData ~= nil and #_relicData > 0 then
                    for o = 1, #_relicData do
                        if artifactAloneData.art_id == _relicData[o].id then
                            for p = 1,#_relicData[o].relicModules do
                                if artifactBodyAloneData.artifact_id == _relicData[o].relicModules[p].id then
                                    artifactBodyAloneData.artifact_level_now = math.floor(_relicData[o].relicModules[p].level)
                                end
                            end
                        end
                    end
                else
                    artifactBodyAloneData.artifact_level_now = 0
                    artifactAloneData.art_now_level = 0
                end
                table.insert(artifactAloneData.art_fact_bodyList,artifactBodyAloneData)
            end
        end
        table.sort(artifactAloneData.art_fact_bodyList,function (a,b) return a.artifact_level_now < b.artifact_level_now end)
        artifactAloneData.art_now_level =  math.floor(artifactAloneData.art_fact_bodyList[1].artifact_level_now)
        artifactAloneData.art_max_level =  math.floor(artifactAloneData.art_fact_bodyList[1].artifact_level_max)
        table.sort(artifactAloneData.art_fact_bodyList,function (a,b) return a.artifact_id < b.artifact_id end)
        for _, s in ipairs(v.phaseBunus) do
            local bodyInfo = {}
            bodyInfo.level = s.Lv
            bodyInfo.name =s.Lv.."级："..s.Desc
            if artifactAloneData.art_now_level >= s.Lv then
                bodyInfo.name = "<color=#FCC000>"..bodyInfo.name.."</color>"
            end
            table.insert(artifactAloneData.art_level_info,bodyInfo)
        end
        table.insert(self.artifactList,artifactAloneData)
    end
    table.sort(self.artifactList,function (a,b) return a.art_id < b.art_id end)
    for i = 1, #self.artifactList do
        self.artifactList[i]:UpdataProperty()
    end
    CardData:GetInstance():UpdataCardDataByArtifactsData()
    self:SetArtifactIsHaveRedPoint()
end

--通过id和等级获取主神器属性当前和下一级的属性
local function GetArtFactDataByLvAndId(self,_id,_level)
    for _, v in ipairs(allRelicBodyData) do
        if _id == v.Id then
            local artifactAloneData = artifact_data.New()
            if _level == #v.Lvs then
                if v.Lvs[_level].Prop then
                    for i, m in ipairs(v.Lvs[_level].Prop) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #v.Lvs[_level].Prop then
                                prop_info_data.nowPro = v.Lvs[_level].Prop[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        else
                            if _level ~= 0 and i <= #v.Lvs[_level].Prop then
                                prop_info_data.nowPro = math.floor(v.Lvs[_level].Prop[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        end
                        table.insert(artifactAloneData.art_next_level_info,prop_info_data)
                    end
                end
                if v.Lvs[_level].GProp then
                    for i, m in ipairs(v.Lvs[_level].GProp) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #v.Lvs[_level].GProp then
                                prop_info_data.nowPro = v.Lvs[_level].GProp[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        else
                            if _level ~= 0 and i <= #v.Lvs[_level].GProp then
                                prop_info_data.nowPro = math.floor(v.Lvs[_level].GProp[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        end
                        table.insert(artifactAloneData.art_next_level_info,prop_info_data)
                    end
                end
            else
                if v.Lvs[_level + 1].Prop then
                    for i, m in ipairs(v.Lvs[_level + 1].Prop) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #v.Lvs[_level].Prop then
                                prop_info_data.nowPro = v.Lvs[_level].Prop[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = m.Val
                        else
                            if _level ~= 0 and i <= #v.Lvs[_level].Prop then
                                prop_info_data.nowPro = math.floor(v.Lvs[_level].Prop[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = math.floor(m.Val * 100) .. "%"
                        end
                        table.insert(artifactAloneData.art_next_level_info,prop_info_data)
                    end
                end
                if v.Lvs[_level + 1].GProp then
                    for i, m in ipairs(v.Lvs[_level + 1].GProp) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #v.Lvs[_level].GProp then
                                prop_info_data.nowPro = v.Lvs[_level].GProp[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = m.Val
                        else
                            if _level ~= 0 and i <= #v.Lvs[_level].GProp then
                                prop_info_data.nowPro = math.floor(v.Lvs[_level].GProp[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = math.floor(m.Val * 100) .. "%"
                        end
                        table.insert(artifactAloneData.art_next_level_info,prop_info_data)
                    end
                end
            end
            return artifactAloneData
        end
    end
end

--設置部件紅點
local function SetRedPointSetActive(self,_data,_nowLv,maxLv)
    local number = 0
    if _nowLv == maxLv then
        _data.artifact_is_show_red_point = 0
        return
    end
    for _, v in ipairs(_data.artifact_level_itemList) do
        if BackpackData:GetInstance():GetItemNumById(v.id) >= v.num then
            number = number + 1
        end
    end
    if number == #_data.artifact_level_itemList then
        if _data.artifact_take_num ~= nil and _data.artifact_take_num ~= 0 then
            if BackpackData:GetInstance():GetItemNumById(1401002) >= _data.artifact_take_num then
                _data.artifact_is_show_red_point = 1
            else
                _data.artifact_is_show_red_point = 0
            end
        else
            _data.artifact_is_show_red_point = 1
        end
    else
        _data.artifact_is_show_red_point = 0
    end
end

---通过神器id和等级获取其信息
local function GetArtifactInfoByIdAndLevel(self,_id,_level,_isBody)
    local artifactBodyAloneData = artifact_body_data.New()
    if _isBody then
        if allRelicModelData[_id] ~= nil then
            if allRelicModelData[_id].Lvs[_level + 1] ~= nil then
                for _, n in ipairs(allRelicModelData[_id].Lvs[_level + 1].Cost) do
                    local awardData = itemData.New()
                    awardData.id = n.Id
                    local item = allItemData[awardData.id]
                    awardData.icon = item.Icon
                    awardData.num = n.Val
                    awardData.quality = SpriteDefine:GetItemQualityFrameByType(item.Quality)
                    if BackpackData:GetInstance():GetItemNumById(awardData.id) < n.Val then
                        awardData.numDes ="<color=#FF0000>"..BackpackData:GetInstance():GetItemNumById(awardData.id).."</color>".."/".. n.Val
                    else
                        awardData.numDes = BackpackData:GetInstance():GetItemNumById(awardData.id).."/".. n.Val
                    end
                    if awardData.id ~= 1401002 then
                        table.insert(artifactBodyAloneData.artifact_level_itemList,awardData)
                    elseif awardData.id == 1401002 then
                        artifactBodyAloneData.artifact_take_id = awardData.id
                        artifactBodyAloneData.artifact_take_num = awardData.num
                        artifactBodyAloneData.artifact_take_icon =  awardData.icon
                        if BackpackData:GetInstance():GetItemNumById(awardData.id) < n.Val then
                            artifactBodyAloneData.artifact_level_up_num ="<color=#FF0000>"..awardData.num.."</color>"
                        else
                            artifactBodyAloneData.artifact_level_up_num = awardData.num
                        end
                    end
                end
            end
            if _level == #allRelicModelData[_id].Lvs then
                if allRelicModelData[_id].Lvs[_level].Prop then
                    for i, m in ipairs(allRelicModelData[_id].Lvs[_level].Prop) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].Prop then
                                prop_info_data.nowPro = allRelicModelData[_id].Lvs[_level].Prop[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        else
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].Prop then
                                prop_info_data.nowPro = math.floor(allRelicModelData[_id].Lvs[_level].Prop[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        end
                        table.insert(artifactBodyAloneData.artifact_next_infoList,prop_info_data)
                    end
                end
                if allRelicModelData[_id].Lvs[_level].GProp then
                    for i, m in ipairs(allRelicModelData[_id].Lvs[_level].GProp ) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].GProp  then
                                prop_info_data.nowPro = allRelicModelData[_id].Lvs[_level].GProp [i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        else
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].GProp  then
                                prop_info_data.nowPro = math.floor(allRelicModelData[_id].Lvs[_level].GProp [i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = "满"
                        end
                        table.insert(artifactBodyAloneData.artifact_next_infoList,prop_info_data)
                    end
                end
            else
                if allRelicModelData[_id].Lvs[_level + 1].Prop then
                    for i, m in ipairs(allRelicModelData[_id].Lvs[_level + 1].Prop) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].Prop then
                                prop_info_data.nowPro = allRelicModelData[_id].Lvs[_level].Prop[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = m.Val
                        else
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].Prop then
                                prop_info_data.nowPro = math.floor(allRelicModelData[_id].Lvs[_level].Prop[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = math.floor(m.Val * 100) .. "%"
                        end
                        table.insert(artifactBodyAloneData.artifact_next_infoList,prop_info_data)
                    end
                end
                if allRelicModelData[_id].Lvs[_level + 1].GProp then
                    for i, m in ipairs(allRelicModelData[_id].Lvs[_level + 1].GProp) do
                        local prop_info_data = {}
                        prop_info_data.id = m.Id
                        prop_info_data.name = propertyData[m.Id].CnName
                        prop_info_data.type = propertyData[m.Id].Show_Fac
                        if prop_info_data.type == 1 then
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].GProp then
                                prop_info_data.nowPro = allRelicModelData[_id].Lvs[_level].GProp[i].Val
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = m.Val
                        else
                            if _level ~= 0 and i <= #allRelicModelData[_id].Lvs[_level].GProp then
                                prop_info_data.nowPro = math.floor(allRelicModelData[_id].Lvs[_level].GProp[i].Val *100) .. "%"
                            else
                                prop_info_data.nowPro = 0
                            end
                            prop_info_data.nextPro = math.floor(m.Val * 100) .. "%"
                        end
                        table.insert(artifactBodyAloneData.artifact_next_infoList,prop_info_data)
                    end
                end
            end
        end
        return artifactBodyAloneData
    else
        artifactBodyAloneData.artifact_now_infoList = {}
        local  caninsert=false
        local this_info=nil
        for _, v in ipairs(allRelicBodyData) do
            if v.Id == _id then
                for _,info in ipairs(self.artifactList) do
                    if info.art_id == _id then
                        this_info=info
                        break
                    end
                end
                if _level>0then
                    if v.Lvs[_level].Prop then
                        for _, m in ipairs(v.Lvs[_level].Prop) do
                            local data = {}
                            data.name =  propertyData[m.Id].CnName
                            data.num = m.Val
                            data.id = m.Id
                            caninsert=true
                            for _,info in ipairs(artifactBodyAloneData.artifact_now_infoList) do
                                if data.id == info.id then
                                    caninsert=false
                                    info.num=info.num+data.num
                                    break
                                end
                            end
                            if caninsert then
                                table.insert(artifactBodyAloneData.artifact_now_infoList,data)
                            end
                        end
                    end
                    if v.Lvs[_level].GProp then
                        for _, m in ipairs(v.Lvs[_level].GProp) do
                            local data = {}
                            data.name =  propertyData[m.Id].CnName
                            data.num = m.Val
                            data.id = m.Id
                            caninsert=true
                            for _,info in ipairs(artifactBodyAloneData.artifact_now_infoList) do
                                if data.id == info.id then
                                    caninsert=false
                                    info.num=info.num+data.num
                                    break
                                end
                            end
                            if caninsert then
                                table.insert(artifactBodyAloneData.artifact_now_infoList,data)
                            end
                        end
                    end
                end
                for i, s in ipairs(v.phaseBunus) do
                    local bodyInfo = {}
                    bodyInfo.level = s.Lv
                    bodyInfo.name =s.Lv.."级："..s.Desc
                    if  _level>=s.Lv then
                        if s.Prop then
                            for _, m in ipairs(s.Prop) do
                                local data = {}
                                data.name =  propertyData[m.Id].CnName
                                data.num = m.Val
                                data.id = m.Id
                                caninsert=true
                                for _,info in ipairs(artifactBodyAloneData.artifact_now_infoList) do
                                    if data.id == info.id then
                                        caninsert=false
                                        info.num=info.num+data.num
                                        break
                                    end
                                end
                                if caninsert then
                                    table.insert(artifactBodyAloneData.artifact_now_infoList,data)
                                end
                            end
                        end
                        if s.GProp then
                            for _, m in ipairs(s.GProp) do
                                local data = {}
                                data.name =  propertyData[m.Id].CnName
                                data.num = m.Val
                                data.id = m.Id
                                caninsert=true
                                for _,info in ipairs(artifactBodyAloneData.artifact_now_infoList) do
                                    if data.id == info.id then
                                        caninsert=false
                                        info.num=info.num+data.num
                                        break
                                    end
                                end
                                if caninsert then
                                    table.insert(artifactBodyAloneData.artifact_now_infoList,data)
                                end
                            end
                        end
                        bodyInfo.name = "<color=#3F793F>"..bodyInfo.name.."</color>"
                    end
                    table.insert(artifactBodyAloneData.artifact_level_info,bodyInfo)
                end
                --获取本神器 部件的属性
                for _, c in ipairs(v.Components) do
                    --拿到部件
                     local body_info= allRelicModelData[c]
                    for _, d in ipairs(this_info.art_fact_bodyList) do
                        if d.artifact_id==c then
                            --把这个组件的属性全部加上
                            if d.artifact_level_now>0 then
                                if body_info.Lvs[d.artifact_level_now].Prop then
                                    for _, m in ipairs(body_info.Lvs[d.artifact_level_now].Prop) do
                                        local data = {}
                                        data.name =  propertyData[m.Id].CnName
                                        data.num = m.Val
                                        data.id = m.Id
                                        caninsert=true
                                        for _,info in ipairs(artifactBodyAloneData.artifact_now_infoList) do
                                            if data.id == info.id then
                                                caninsert=false
                                                info.num=info.num+data.num
                                                break
                                            end
                                        end
                                        if caninsert then
                                            table.insert(artifactBodyAloneData.artifact_now_infoList,data)
                                        end
                                    end
                                end
                                if body_info.Lvs[d.artifact_level_now].GProp then
                                    for _, m in ipairs(body_info.Lvs[d.artifact_level_now].GProp) do
                                        local data = {}
                                        data.name =  propertyData[m.Id].CnName
                                        data.num = m.Val
                                        data.id = m.Id
                                        caninsert=true
                                        for _,info in ipairs(artifactBodyAloneData.artifact_now_infoList) do
                                            if data.id == info.id then
                                                caninsert=false
                                                info.num=info.num+data.num
                                                break
                                            end
                                        end
                                        if caninsert then
                                            table.insert(artifactBodyAloneData.artifact_now_infoList,data)
                                        end
                                    end
                                end
                            end
                            break
                        end
                    end
                end
            end
        end
        return artifactBodyAloneData
    end
end

local function UpdateData(self,_relicData,_trans)
    if self.artifactList == nil then
        return
    end
    for _, v in ipairs(self.artifactList) do
        if _relicData ~= nil and #_relicData > 0 then
            for o = 1, #_relicData do
                if v.art_id == _relicData[o].id then
                    for _, m in ipairs(v.art_fact_bodyList) do
                        for p = 1,#_relicData[o].relicModules do
                            if m.artifact_id == _relicData[o].relicModules[p].id then
                                m.artifact_level_now = math.floor(_relicData[o].relicModules[p].level)
                            end
                        end
                    end
                    table.sort(v.art_fact_bodyList,function (a,b) return a.artifact_level_now < b.artifact_level_now end)
                    v.art_now_level = math.floor(v.art_fact_bodyList[1].artifact_level_now)
                    v.art_max_level =  math.floor(v.art_fact_bodyList[1].artifact_level_max)
                    table.sort(v.art_fact_bodyList,function (a,b) return a.artifact_id < b.artifact_id end)
                    v:UpdataProperty()
                    CardData:GetInstance():UpdataCardDataByArtifactsData()
                end
            end
        else
            v.artifact_level_now = 0
            v.art_now_level = 0
        end
    end
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_ARTIFACT_DATA_UPDATE,_trans)
    self:SetArtifactIsHaveRedPoint()
end

---刷新地狱道等级神器解锁状态
local function UpdateDataHellLv(self)
    if self.artifactList == nil then
        return
    end
    for _, v in ipairs(self.artifactList) do
        if(UserData:GetInstance().pLevel >= v.un_lock_lv) then
            v.art_state = 1
        else
            v.art_state = 0
        end
    end
end

---请求获取神器数据
local function RequestArtifactMessage(self)
    local state,type,des= UnlockData:GetInstance():GetLockDataState(203)
    if not state then
        return
    end
    if self.have_send then
        Logger.LogError("已经请求过神器")
        return
    else
        self.have_send = true
    end

    local get_relic_info_id = MsgIDDefine.PBTEAM_GET_RELIC_INFO_REQUEST
    local get_relic_info = (MsgIDMap[get_relic_info_id])()
    NetManager:GetInstance():SendMessage(get_relic_info_id,get_relic_info,function (msg_obj)
        if msg_obj.OpCode ~= 0 then
            Logger.Log("ERROR PBTEAM_GET_RELIC_INFO_REQUEST~~")
            UISpecial:GetInstance():UITipText(msg_obj.Packages.msg)
            return
        else
            self:AnalysisData(msg_obj.Packages.relic)
        end
    end)
end

--设置神器主界面的红点
local function SetArtifactIsHaveRedPoint(self)
    local number = 0
    for _, v in ipairs(self.artifactList) do
        local isHave = self:GetArtifactRedPoint(v.art_fact_bodyList)
        if isHave then
            RedPointData:GetInstance():UpdateRedState("artifact_root",true)
            return
        else
            number = number + 1
        end
    end
    if number == #self.artifactList then
        RedPointData:GetInstance():UpdateRedState("artifact_root",false)
    end
end

--設置單個神器
local function GetArtifactRedPoint(self,_data)
    local number = 0
    for _, v in ipairs(_data) do
        local data =self:GetArtifactInfoByIdAndLevel(v.artifact_id,v.artifact_level_now,true)
        self:SetRedPointSetActive(data,v.artifact_level_now,v.artifact_level_max)
        if data.artifact_is_show_red_point == 1 then
            return true
        else
            number = number + 1
        end
    end
    if number == #_data then
        return false
    end
end

--获取神器的解锁条件
local function GetArtUnLockInfo(self,_id)
    for _, v in ipairs(allRelicBodyData) do
        if v.Id == _id then
            return v.UnlockLv
        end
    end
end
--获取所有神器的等级和
local function GetArtifactAllLv(self)
    local lv = 0
    local artifactList = self.artifactList
    for _, v in ipairs(artifactList) do
        for _, m in ipairs(v.art_fact_bodyList) do
            lv = lv + m.artifact_level_now
        end
    end
    return lv
end


ArtifactsData.GetArtUnLockInfo = GetArtUnLockInfo
ArtifactsData.GetArtFactDataByLvAndId = GetArtFactDataByLvAndId
ArtifactsData.__init = __init
ArtifactsData.SetArtifactIsHaveRedPoint = SetArtifactIsHaveRedPoint
ArtifactsData.AnalysisData = AnalysisData
ArtifactsData.SetRedPointSetActive = SetRedPointSetActive
ArtifactsData.GetArtifactRedPoint = GetArtifactRedPoint
ArtifactsData.UpdateDataHellLv = UpdateDataHellLv
ArtifactsData.GetArtifactInfoByIdAndLevel = GetArtifactInfoByIdAndLevel
ArtifactsData.UpdateData = UpdateData
ArtifactsData.RequestArtifactMessage = RequestArtifactMessage
ArtifactsData.GetArtifactAllLv = GetArtifactAllLv

return ArtifactsData