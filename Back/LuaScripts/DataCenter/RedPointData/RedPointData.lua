---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2019/3/5 14:17
---

local RedPointData = BaseClass("RedPointData", Singleton)


local RedName ={
    Seven_Gift_Red="sevenDayGift_root",--七日
    Online_Gift_Red= "OnlineGift_root",--在线
    Level_Gift_Red= "levelGift_root",--等级礼包
    Skill_Data="skill_data",--技能
    Carnival_Red="carnival_root",--嘉年华
    JLR_Red="JLR_Red",--寄灵人
    SHL_Red="SHL_Red",--守护灵
    TongLing_Red="TongLing_Red",--通灵红点
    -- 国战红点相关 -------------------------------------------------------
    Nation_Union_Red="Nation_Union_Red",--国战联盟红点
    Nation_Union_Invite_Red="Nation_Union_Invite_Red",--国战联盟邀请列表红点
    Nation_Union_Apply_Red="Nation_Union_Apply_Red",--国战联盟玩家申请红点
    Nation_Event_Red="Nation_Event_Red",--国战纪事红点
    Nation_Major_Task_Red="Nation_Major_Task_Red",--国战主线任务红点
    Nation_Battle_Log_Red="Nation_Battle_Log_Red",--国战战斗日志红点
    Nation_JunTuan_Red="Nation_JunTuan_Red",--国战军团红点
    -- 国战红点相关 结束-------------------------------------------------------
}
local function __init(self)
    -- 公告列表
    self.all_red ={}

end
local function InitRed(self)
    self.all_red = {}
    self:CreateNewRed(nil,RedName.Skill_Data)
    self:CreateNewRed(nil, RedName.Level_Gift_Red)
    self:CreateNewRed(nil, RedName.Seven_Gift_Red)
    self:CreateNewRed(nil, RedName.Online_Gift_Red)
    self:CreateNewRed(nil,RedName.Carnival_Red)
    self:CreateNewRed(nil,RedName.TongLing_Red)
    self:CreateNewRed(nil,"artifact_root")
    self:CreateNewRed(nil,"hell_red")
    self:CreateNewRed(nil,"task_root")
    self:CreateNewRed(nil,"friend_root")
    self:CreateNewRed("friend_root","friend_add")
    self:CreateNewRed("friend_add","friend_add_apply")
    self:CreateNewRed("friend_root","friend_friend")
    self:CreateNewRed("friend_friend","friend_friend_friend")
    self:CreateNewRed("friend_friend","friend_friend_stranger")

    local card_data=DataUtil.GetData("card")

    self:CreateNewRed(nil,RedName.JLR_Red,false)
    self:CreateNewRed(nil,RedName.SHL_Red,false)
    for i, v in pairs(card_data) do
        if v.IfEntreVersion==1 then
            local card_id=tostring(i)
            if v.Type==1 then
                --寄灵人
                self:CreateNewRed(RedName.JLR_Red,card_id,false)
                self:CreateNewRed(card_id,card_id.."_1",false)--属性
                self:CreateNewRed(card_id,card_id.."_2",false)--技能
                self:CreateNewRed(card_id,card_id.."_3",false)--升星
                self:CreateNewRed(card_id,card_id.."_4",false)--天赋
                self:CreateNewRed(card_id,card_id.."_5",false)--装备
            elseif v.Type==2 then
                --守护灵
                self:CreateNewRed(RedName.SHL_Red,card_id,false)
                self:CreateNewRed(card_id,card_id.."_1",false)--属性
                self:CreateNewRed(card_id.."_1",card_id.."_1_1",false)--升级
                self:CreateNewRed(card_id.."_1",card_id.."_1_2",false)--突破
                self:CreateNewRed(card_id,card_id.."_2",false)--技能
                self:CreateNewRed(card_id,card_id.."_3",false)--升星
                self:CreateNewRed(card_id,card_id.."_4",false)--武器
                self:CreateNewRed(card_id.."_4",card_id.."_4_1",false)--解封
                self:CreateNewRed(card_id.."_4",card_id.."_4_2",false)--强化
                for i = 1, 8 do
                    self:CreateNewRed(card_id.."_4_2",card_id.."_4_2_"..i,false)--强化 组建
                end
                self:CreateNewRed(card_id,card_id.."_2_1",false)--技能穿戴1
                self:CreateNewRed(card_id,card_id.."_2_2",false)--技能穿戴2
                self:CreateNewRed(card_id,card_id.."_5",false)--装备
            end
        end
    end

    -- 国战红点相关 -------------------------------------------------------
    self:CreateNewRed(nil,RedName.Nation_Union_Red)
    self:CreateNewRed(RedName.Nation_Union_Red,RedName.Nation_Union_Invite_Red)
    self:CreateNewRed(RedName.Nation_Union_Red,RedName.Nation_Union_Apply_Red)
    self:CreateNewRed(nil,RedName.Nation_Event_Red)
    self:CreateNewRed(nil,RedName.Nation_Major_Task_Red)
    self:CreateNewRed(nil,RedName.Nation_Battle_Log_Red)
    self:CreateNewRed(nil,RedName.Nation_JunTuan_Red)
    -- 国战红点相关 结束 -------------------------------------------------------

end
--创建新的红点节点
local function CreateNewRed(self,parent_name,self_name,defult)
    if self.all_red[self_name] == nil then
        self.all_red[self_name] = {parent = false,show = false,child = {}}
        if defult then
            self.all_red[self_name].show = defult
        end
        local parent_data = self.all_red[parent_name]
        if parent_data ~= nil then
            self.all_red[self_name].parent = parent_name
            table.insert(parent_data.child,self_name)
        end
    else
        Logger.Log("名字重复")
    end
end


local function ResetRedPoint(self,name)
    local self_data = self.all_red[name]
    if self_data ~= nil then
        self_data.show=false
        if #self_data.child > 0 then
            for i, v in ipairs(self_data.child) do
                self:ResetRedPoint(v)
            end
            --self_data.child = {}
        end
    end
end


--刷新所有红点状态
local function RefereshAllState(self,root_name)
    local self_data = self.all_red[root_name]
    if self_data ~= nil then
        if #self_data.child > 0 then
            self_data.show = false
            for i, v in ipairs(self_data.child) do
                local temp = RefereshAllState(self,v)
                if temp then
                    self_data.show = true
                end
            end
            return self_data.show
        else
            return self_data.show
        end
    else
        return false
    end
end

local function DelChild(self,name)
    local self_data = self.all_red[name]
    if self_data ~= nil then
        if self_data.parent then
            local parent_data = self.all_red[self_data.parent]
            table.removebyvalue(parent_data.child,name)
            if #parent_data.child == 0 then
                parent_data.show = false
            end
        end
        local parent_name = name
        while(self_data.parent) do
            parent_name = self_data.parent
            self_data = self.all_red[self_data.parent]
        end
        self.all_red[name] = nil
        RefereshAllState(self,parent_name)
        UIManager:GetInstance():Broadcast(UIMessageNames.ON_RED_POINT_CHANGE)
    end
end
local function UpdateCardRedState(self,name,show)
    local data = self.all_red[name]
    if data ~= nil then
        data.show = show
        local parent_name = name
        while(data.parent) do
            parent_name = data.parent
            data = self.all_red[data.parent]
        end
        RefereshAllState(self,parent_name)
    end
end
local function UpdateRedState(self,name,show)
    local data = self.all_red[name]
    if data ~= nil then
        data.show = show
        local parent_name = name
        while(data.parent) do
            parent_name = data.parent
            data = self.all_red[data.parent]
        end
        RefereshAllState(self,parent_name)
        UIManager:GetInstance():Broadcast(UIMessageNames.ON_RED_POINT_CHANGE)
    end
end

--批量更新一堆红点
local function UpdateTableRedState(self,nameAndShowTable)
    if nameAndShowTable == nil then
        return
    end
    local find = false
    for k, v in pairs(nameAndShowTable) do
        local data = self.all_red[k]
        if data ~= nil then
            local lastShow = data.show
            if lastShow ~= v then
                data.show = v
                local parent_name = k
                while(data.parent) do
                    parent_name = data.parent
                    data = self.all_red[data.parent]
                end
                RefereshAllState(self,parent_name)
                find = true
            end
        end
    end

    if find then
        UIManager:GetInstance():Broadcast(UIMessageNames.ON_RED_POINT_CHANGE)
    end
end

local function GetRedState(self,name)
    if self.all_red[name] then
        return self.all_red[name].show
    end
    return false
end

local function __delete(self)
    --self.all_red = {}
end

RedPointData.RefereshAllState = RefereshAllState
RedPointData.GetRedState = GetRedState
RedPointData.DelChild = DelChild
RedPointData.ResetRedPoint = ResetRedPoint
RedPointData.__init = __init
RedPointData.__delete = __delete
RedPointData.UpdateRedState = UpdateRedState
RedPointData.CreateNewRed = CreateNewRed
RedPointData.RedName= RedName
RedPointData.UpdateCardRedState = UpdateCardRedState
RedPointData.UpdateTableRedState = UpdateTableRedState
RedPointData.InitRed = InitRed
return RedPointData