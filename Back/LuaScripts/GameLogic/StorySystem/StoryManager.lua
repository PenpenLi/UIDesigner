---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangshoufeng.
--- DateTime: 19/2/21 10:56
---
local StoryManager = BaseClass("StoryManager", Singleton)

local StoryUtil = CS.StorySystem.StoryDataUtilities
local STORY_FLOODER_PATH = "Art/Stories/"

local function __init(self)
    --当前剧情
    self.curStory = nil
    --已经加载的实体
    self.loadedEntities = nil
    --当前剧情的结果
    self.curStoryRes = nil
    --是否重复播放剧情
    self.repeatStory = true
    --self.assetTable = nil
    self.defaultSceneName = nil
end


--回收实体
local function ClearEntities(self)
    --clear addition entities
  --  StoryUtil.ClearStoryNode(self.curStory)
    if self.loadedEntities ~= nil and (#self.loadedEntities > 0) then
        --recycle loaded entities
        for i, v in ipairs(self.loadedEntities) do
            if not IsNull(v.go )then
                --临时修改
                CS.UnityEngine.GameObject.Destroy(v.go)
                --GameObjectPool:GetInstance():RecycleGameObject(v.path, v.go);
            end
        end
        self.loadedEntities = nil
    end

end

--结束剧情并清理剧情数据
local function FinishStory(self)
    --TODO:添加逻辑:隐藏UI,显示遮罩
    coroutine.waitforframes(1)

    --Delete story data and eneities and return alives
    ClearEntities(self)

    --delete story node
    CS.UnityEngine.Object.Destroy(self.curStory)

    self.defaultSceneName = nil
end

--加载剧情基本预设
local function CoLoadStoryPrefab(name)
    --Art/Stories/StdStoryRoot/StdStoryRoot.prefab
    local path = STORY_FLOODER_PATH .. name .. "/" .. name .. ".prefab"
    --load story prefab
    local storyPrefab = ResourcesManager:GetInstance():CoLoadAsync(path, typeof(CS.UnityEngine.GameObject))
    local storyInst = nil
    if not IsNull(storyPrefab) then
        --inst storynode
        storyInst = CS.UnityEngine.GameObject.Instantiate(storyPrefab);
    else
        Logger.Log("Can not Find Story Prefab:" .. path)
    end

    return storyInst
end
--生成角色站位信息
local function CreateBattlePosDict(rolePosInfo)
    if rolePosInfo == nil or (#rolePosInfo) < 1 then
        return nil
    end

    --Create Entities
    --c# Dictionary for send data to C# code
    local Dict_Int_GameObject = CS.System.Collections.Generic.Dictionary(CS.System.Int32, CS.UnityEngine.GameObject)
    local battlePosDict = Dict_Int_GameObject()

    for i = 1, #rolePosInfo do
        local info = rolePosInfo[i]
        battlePosDict:Add(Mathf.Ceil(info.posId), info.go)
    end

    return battlePosDict
end


--加载并实例化舞台实体
local function CoLoadStage(storyNode, loadedEntities)
    local entityPaths = StoryUtil.GetLoadedNodePathes(storyNode);
    --Create Entities
    --c# Dictionary for send data to C# code
    local Dict_String_GameObject = CS.System.Collections.Generic.Dictionary(CS.System.String, CS.UnityEngine.GameObject)
    local entitiesLoaded = Dict_String_GameObject()

    if IsNull(entityPaths) then
        Logger.Log("EntityInfos: NULL")
    else
        for i = 0, entityPaths.Length - 1 do
            local p = entityPaths[i]
            if not IsNull(p) then
                local g = GameObjectPool:GetInstance():CoGetGameObjectAsync(p)
                if not IsNull(g) then
                    table.insert(loadedEntities, { path = p, go = g })
                    entitiesLoaded:Add(p, g)
                    g.gameObject:SetActive(false)
                else
                    Logger.LogError("Can not load :" .. p)
                end
            end
        end
    end
    return entitiesLoaded
end

--加载UI用精灵
local function CoLoadSprites(storyNode)
    local spriteInfos = StoryUtil.GetCharacterPortraitInfos(storyNode);
    --Load Sprites
    local Dict_Int_Sprite = CS.System.Collections.Generic.Dictionary(CS.System.Int32, CS.UnityEngine.Sprite)
    local spritesLoaded = Dict_Int_Sprite()
    if IsNull(spriteInfos) then
        Logger.Log("spriteInfos: NULL")
    else
        for i = 0, spriteInfos.Length - 1 do
            local info = spriteInfos[i]
            if not IsNull(info) then
                local sp = AtlasManager:GetInstance():CoLoadImageAsync(AtlasConfig.DynamicTex, info.path)
                if not IsNull(sp) then
                    spritesLoaded:Add(info.id, sp)
                end
            end
        end
    end
    return spritesLoaded
end

--装配剧情节点
local function CoSetupStoryRes(self,info, rolePosInfo,active)
    local storyNode = CoLoadStoryPrefab(info.Path)
    local loadedEntities = nil
    if not IsNull(storyNode) then
        --这里需要配置，在开始组装剧情节点的时候就加遮罩

        if info.Shade and (info.Shade==1 or info.Shade==2) then
            CS.CamMaskUtilities.SetMaskColor(1,100)
        end

        local scenePath= SceneLoadManager.GenSceneAssetFullPath(info.SceneName);
        local posOffset = SceneLoadManager:GetInstance():GetScenePosOffset(scenePath);

        storyNode.transform.position = Vector3.New(info.Pos[1], info.Pos[2], info.Pos[3]) + posOffset
        storyNode.transform.eulerAngles = Vector3.New(info.Rotate[1], info.Rotate[2], info.Rotate[3])
        --get entities info
        loadedEntities = {}
        local entitiesLoaded = CoLoadStage(storyNode, loadedEntities, rolePosInfo)
        local battlePosDoct = CreateBattlePosDict(rolePosInfo)
        local spritesLoaded = CoLoadSprites(storyNode)
        StoryUtil.SetupStoryNode(storyNode, entitiesLoaded, battlePosDoct, spritesLoaded,active)
        coroutine.waitforframes(1)
    else
        Logger.Log("Can not Instantiate Story Prefab:" .. info.Path)
    end
    return storyNode, loadedEntities
end
--触发剧情，在SceneManager中调用
local function TriggerStory(_id)

    --CS.CamMaskUtilities.SetMaskColor(1.0,100);
    local uimgr_instance = UIManager:GetInstance()
    local storyTrigger = nil;
    local loadingClosed = false

    storyTrigger = StoryConstConfig.StoryTrigger.SceneEnter
    if storyTrigger.Type ~= nil then
        local triggerObj = storyTrigger.Type.New()
        --加载所有的场景和剧情

        local res = triggerObj:CoTrigger(_id)
        -- 加载完成，关闭loading界面
        SceneManager:GetInstance():CloseLoading()
        if res then
            --显示摄像机遮罩
            --play story
            triggerObj:CoPlayStory()
            loadingClosed = true

        else
            CS.CamMaskUtilities.SetMaskColor(0.0,100);
            CS.CamMaskUtilities.RemoveMask(100);
            loadingClosed = true
            triggerObj = nil
        end
    end

    coroutine.waitforframes(1)
    if loadingClosed then
        --关闭摄像机遮罩
        --但剧情场景加载逻辑结束时,剧情已经播放完成,为防止穿帮,不关闭遮罩,只显示UI
        if SceneManager:GetInstance().current_scene ~= "StoryScene" then

            CS.CamMaskUtilities.SetMaskColor(0.0,100);
            CS.CamMaskUtilities.RemoveMask(100);
        end
    end
    Logger.Log("结束剧情")

    --if SceneManager:GetInstance().current_scene.scene_config.Name=="HomeScene" then
    --    Logger.Log("重置場景")
    --    UIManager:GetInstance():OpenWindow(UIWindowNames.UITestMain)
    --    --local mainAsset=SceneManager:GetInstance().scenes[SceneConfig.HomeScene.Name].scene_asset;
    --    --CS.SceneDataUtilities.ConfigLitAndShadow(mainAsset,Vector3.New(0,0,0),Vector3.New(0,0,0))
    --    local mainSceneName=SceneManager:GetInstance().scenes[SceneConfig.HomeScene.Name].scene_name;
    --    if not string.isNilOrEmpty(mainSceneName) then
    --        SceneLoadManager:GetInstance():ConfigLitAndShadow(mainSceneName,Vector3.zero,Vector3.zero)
    --    end
    --end
    DataManager:GetInstance():Broadcast(DataMessageNames.UIGuide_OverEvent)
    return loadingClosed;
end
--播放剧情并等待结束
local function CoPlayStoryNode(self,storyNode,info)
    local finFlag = false
    local storyRes = ""

    local sceneName = nil
    if string.isNilOrEmpty(info.SceneName) then
          --  sceneName =  self.defaultSceneName --self.assetTable["Default"]
    else

        sceneName = info.SceneName --self.assetTable[info.SceneName]
        local scenePath = SceneLoadManager.GenSceneAssetFullPath(sceneName)
        SceneLoadManager:GetInstance():ConfigLitAndShadow(scenePath,storyNode.transform.position,Vector3.zero)
        SceneLoadManager:GetInstance():ConfigCameraStyle(true)
    end


    self.curStory = storyNode
    local onChatflowFin = BindCallback(function(p)
        storyRes = p
        finFlag = true
    end
    )
    --关于剧情摄像机遮罩逻辑
    --在播放剧情前,在SceneManager中打开优先级为100的遮罩
    --然后在此处打开优先级为0的遮罩,Timeline和ChatFlow中控制的遮罩优先级都为0
    --所以剧情控制开始时,应该在Timeline开头或ChatFlow开头添加关闭遮罩的指令
    --在剧情开始播放后,会移除先级为100的遮罩,这时会显示优先级为0的遮罩
    --在剧情结束后,会显示先级为100的遮罩
    StoryUtil.PlayStoryNode(storyNode, onChatflowFin,UserData:GetInstance().name)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIStoryJump)
    coroutine.waitforframes(3);
    CS.CamMaskUtilities.RemoveMask(100);
    local camNow=StoryUtil.FindCurrentCamera();
    if camNow ~= nil and info.Shade and info.Shade==1 then
        --关闭main摄像机
        camNow:GetComponent(typeof(CS.UnityEngine.Camera)).enabled=false
    end
    coroutine.waituntil(function()
        return finFlag
    end)
    if camNow ~= nil and info.Shade and info.Shade==1 then
        --打开main摄像机 TODO
        camNow:GetComponent(typeof(CS.UnityEngine.Camera)).enabled=true
        --纯对话结束后也不加黑
        CS.CamMaskUtilities.SetMaskColor(1.0,100);

    end
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIStoryJump)

    SceneLoadManager:GetInstance():ConfigCameraStyle(false)
    StoryUtil.KillStoryNode(self.curStory)
    StoryUtil.ClearStoryNode(self.curStory)
    CS.UnityEngine.Object.Destroy(self.curStory)

    return storyRes
end

local function CoPlayStoryNode_KeepLastFrame(self,storyNode,info)
    local finFlag = false
    local storyRes = ""
    --if self.assetTable  ~= nil then
    local sceneName = nil
    if string.isNilOrEmpty(info.SceneName) then
        sceneName =  self.defaultSceneName --self.assetTable["Default"]
    else
        sceneName = info.SceneName --self.assetTable[info.SceneName]
    end
    SceneLoadManager:GetInstance():ConfigLitAndShadow(sceneName,storyNode.transform.position,Vector3.zero)
    --end

    self.curStory = storyNode
    local onChatflowFin = BindCallback(function(p)
        storyRes = p
        finFlag = true
    end
    )
    CS.CamMaskUtilities.SetMaskColor(1.0,0);
    StoryUtil.PlayStoryNode(storyNode, onChatflowFin,UserData:GetInstance().name)
   -- StoryUtil.PlayStoryNode(storyNode, onChatflowFin,"李超")
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIStoryJump)
    coroutine.waitforframes(3);
    CS.CamMaskUtilities.RemoveMask(100);
    coroutine.waituntil(function()
        return finFlag
    end)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIStoryJump)
    StoryUtil.StopStoryNode(self.curStory)
    return storyRes
end


local function OnStoryStart(info)
    --StoryData:GetInstance():OnStoryStart(info)
end

-----------------------------------------------------------------
--public interface

--跳过剧情,显示遮罩,调用FinishStory()
local function Skip(self,type)
    StoryManager.DMEvent(false);
    if type == 1 then
        StoryUtil.StopStoryNode(self.curStory)
    else
        StoryUtil.KillStoryNode(self.curStory)
        StoryUtil.ClearStoryNode(self.curStory)
        CS.UnityEngine.Object.Destroy(self.curStory)
    end
end

--跳过剧情,定到最后一帧
local function JumpToEnd(self)
    coroutine.start( function ()
        StoryManager.DMEvent(false);
        StoryUtil.StopStoryNode(self.curStory)
        local maskAlpha = 0.0
        while maskAlpha < 1 do
            CS.CamMaskUtilities.SetMaskColor(maskAlpha,100);
            maskAlpha = maskAlpha + 1.0 * Time.deltaTime;
            coroutine.waitforframes(1)
        end
        CS.CamMaskUtilities.SetMaskColor(1.0,100);
        StoryUtil.JumpToEnd(self.curStory)
        coroutine.waitforframes(1);
        CS.CamMaskUtilities.SetMaskColor(0,100);
        StoryUtil.StopStoryNode(self.curStory)
        StoryUtil.FinishStoryNode(self.curStory)
        --FinishStory(self)
        coroutine.yieldbreak()
    end)


end
--预加载剧情
local function CoPreloadStory(self, info, rolePosInfo, active)
    local res = false

    if info ~= nil then
        local tmpNode, tmpEntities = CoSetupStoryRes(self,info, rolePosInfo,active)
        if tmpNode ~= nil then

            self.curStory = tmpNode
            res = true
        end
        if (tmpEntities ~= nil) and (#tmpEntities > 0 )then
            if self.loadedEntities == nil then
                self.loadedEntities = {}
            end
            table.insertto( self.loadedEntities,tmpEntities,0)
        end
    end

    return res,self.curStory
end

local function CoPlayCurStory(self, info)
    if not IsNull(self.curStory) then
        OnStoryStart(info)
        local storyRes = CoPlayStoryNode(self,self.curStory,info)
        CS.CamMaskUtilities.SetMaskColor(0.0,100);
        CS.CamMaskUtilities.RemoveMask(100);
        --Logger.Log("StoryFin:" .. self.curStory.name .. " -res:" .. storyRes)
        self.curStoryRes = storyRes
        FinishStory(self)
    end
end

local function DMEvent(isstart,number)
    Logger.Log("弹幕啊   ！！！！！！！！！！！！！！！！")
    if isstart then
        Logger.Log(number)
    end
    UIManager:GetInstance():Broadcast(UIMessageNames.UI_DAN_MU_EVENT,isstart,number)
    --UIManager:GetInstance():CloseWindow(UIWindowNames.UIStoryJump)
end

--获取所有已经加载的实体
local function GetAllEntities(self)
    return self.loadedEntities
end

local function __delete(self)

    if not IsNull(self.curStory) then
        StoryUtil.KillStoryNode(self.curStory)
        StoryUtil.ClearStoryNode(self.curStory)
        CS.UnityEngine.Object.Destroy(self.curStory)
    end
    --当前剧情
    self.curStory = nil
    --已经加载的实体
    self.loadedEntities = nil
end


--预加载剧情通用接口
local function CoPreloadStoryCommon(self, storyinfo)

    local info = storyinfo.info;
    local rolePosInfo = storyinfo.rolePosInfo;
    local active = storyinfo.active;

    local res = false
    if info ~= nil then
        local tmpNode, tmpEntities = CoSetupStoryRes(self, info, rolePosInfo, active)
        if tmpNode ~= nil then
            self.curStory = tmpNode
            res = true
        end
        if (tmpEntities ~= nil) and (#tmpEntities > 0) then
            if self.loadedEntities == nil then
                self.loadedEntities = {}
            end
            table.insertto(self.loadedEntities, tmpEntities, 0)
        end
    end

    return res, self.curStory
end

local function ChangeBattleSceneAnim(tex)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_GUIDE_BOARD_CREATE,tex)
end

--out put interface
StoryManager.__init = __init
StoryManager.GetAllEntities = GetAllEntities
--StoryManager.CoTriggerStory = CoTriggerStory
StoryManager.Skip = Skip
StoryManager.JumpToEnd = JumpToEnd
StoryManager.ChangeBattleSceneAnim = ChangeBattleSceneAnim
StoryManager.CoPreloadStory = CoPreloadStory
StoryManager.CoPlayCurStory = CoPlayCurStory
StoryManager.CoPlayStoryNode = CoPlayStoryNode
StoryManager.CoPlayStoryNode_KeepLastFrame = CoPlayStoryNode_KeepLastFrame
StoryManager.ClearEntities = ClearEntities
StoryManager.__delete = __delete
StoryManager.TriggerStory = TriggerStory
StoryManager.CoPreloadStoryCommon = CoPreloadStoryCommon
StoryManager.DMEvent = DMEvent


return StoryManager