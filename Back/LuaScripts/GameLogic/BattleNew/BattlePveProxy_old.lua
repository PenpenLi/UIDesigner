---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/12/12 17:29
---
require "GameLogic.BattleNew.BattleEnum"

local OneBattle=require "GameLogic.BattleNew.Logic.OneBattle"
local BattleNetManager=require "GameLogic.BattleNew.Logic.Manager.BattleNetManager"
local Messenger = require "Framework.Common.Messenger"
local BattleUIManager = require "GameLogic.BattleNew.Logic.Manager.BattleUIManager"
local BattleViewContext=require"GameLogic.BattleNew.View.BattleViewContext"
local BattleFieldManager=require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
--Pvp战斗总控
local BattlePveProxy=BaseClass("BattlePveProxy",Updatable)
local BattleAssistFunction= require "GameLogic.BattleNew.BattleAssistFunction"
local function __init(self)
    --战斗UI
    self.battleUIManager=nil
    --事件通信
    self.battleMessage=nil
    --网络模块
    self.netManager=nil
    --战斗逻辑层
    self.oneBattle=nil
    --表现层
    self.battleViewContext=nil

    --状态
    self.currentState=nil
    --本场战斗数据
    self.battlePackages=nil
    --上阵阵容（布阵阶段可以更换）
    self.roles={}
    --敌方阵容
    self.enemyRoles={}
    --最终我方阵容
    self.myTeam={}
    self.myGuard={}
    --剧情触发器
    self.storyTrigger=nil
    --当前场景颜色值
    self.scene_mask_col= nil
end

--事件处理区
local function EmBattleToStart(self,data,battleCache)
    --Logger.Log("通过布阵 进入战斗")
    self.roles = data
    self.battleCache = battleCache
    --for k,v in pairs(self.roles) do
    --    --Logger.Log("v.entityId"..v.Id)
    --    --Logger.Log("v.guardianId"..v.guardianId)
    --    --Logger.Log("v.position"..v.position)
    --end

    self.netManager:SendPveBattleStartRequest(self.roles)
end

local function EmBattleStart(self,Packages)
    --Logger.Log("战斗开始")
    self.myTeam = Packages.myTeam
    self.myGuard =  Packages.myGuard
    self:ChangeState(BattleEnum.LogicState.BATTLE)
end

local function BattleFinish(self,data)
    self:ChangeState(BattleEnum.LogicState.RESULT,data)
end

local function BattleRolePlayWinOver(self)
    self.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYUIRESULT,self.settlement_data)
    self.battleUIManager:OnDestroy()
    self.battleMessage:Cleanup()
    self.settlement_data = nil
end


local function AddEventListener(self)
    self.battleMessage:AddListener(BattleEnum.BattleMessage.NOTIFYEMBATTLETOSTART,EmBattleToStart,self)
    self.battleMessage:AddListener(BattleEnum.BattleMessage.NOTIFYBATTLETOSTART,EmBattleStart,self)
    self.battleMessage:AddListener(BattleEnum.BattleMessage.BATTLE_FINISH,BattleFinish,self)
    self.battleMessage:AddListener(BattleEnum.BattleMessage.NOTIFYWINPLAYOVER,BattleRolePlayWinOver,self)
end

local function RemoveEventListener(self)
    self.battleMessage:RemoveListener(BattleEnum.BattleMessage.NOTIFYEMBATTLETOSTART,EmBattleToStart)
    self.battleMessage:RemoveListener(BattleEnum.BattleMessage.NOTIFYBATTLETOSTART,EmBattleStart)
    self.battleMessage:RemoveListener(BattleEnum.BattleMessage.BATTLE_FINISH,BattleFinish)
    self.battleMessage:RemoveListener(BattleEnum.BattleMessage.NOTIFYWINPLAYOVER,BattleRolePlayWinOver)
end

local function OnInit(self,battlePackages,scene_mask_col,cam_time)
    self.battlePackages=battlePackages
    self.scene_mask_col = scene_mask_col
    self.cam_time = cam_time
    for k,v in ipairs(self.battlePackages.myTeam) do
        local role={}
        role.Id=v.hostId
        role.guardianId=v.guardianId
        if BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.TEACHING or BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.GUIDE then
            local drill_card = DataUtil.GetData("drill_card")
            if drill_card[v.hostId] ~= nil then
                role.viewDataId = drill_card[v.hostId].CardId
            end
            if drill_card[v.guardianId] ~= nil then
                role.guarDianViewDataId = drill_card[v.guardianId].CardId
            end
        else
            role.viewDataId=v.hostId
            role.guarDianViewDataId=v.guardianId
        end

        role.position=v.position
        table.insert(self.roles,role)
    end
    for k,v in ipairs(self.battlePackages.enemyTeam) do
        local role={}
        role.Id=v.entityId
        role.viewDataId= BattleAssistFunction.GetCardIdByTeamAndEntityId(BattleEnum.BattlePlayerType.ENEMY,v.entityId)
        if not v.callSkill._is_null and v.callSkill.guardianId > 0 then
            role.guardianId=v.callSkill.guardianId
            role.guarDianViewDataId=BattleAssistFunction.GetCardIdByTeamAndEntityId(BattleEnum.BattlePlayerType.ENEMY,v.callSkill.guardianId)
        else
            role.guardianId = 0
            role.guarDianViewDataId=0
        end

        role.position=v.position
        table.insert(self.enemyRoles,role)
    end
    self:ChangeState(BattleEnum.LogicState.EMBATTLE)
    AddEventListener(self)
end


local function ChangeState(self,state,data)
    self.currentState=state
    if self.currentState==BattleEnum.LogicState.EMBATTLE then
        --Logger.Log("进入布阵状态")
        self.battleMessage=Messenger.New()
        self.battleUIManager = BattleUIManager.New()
        self.battleUIManager:OnInit(self.battleMessage)
        self.netManager=BattleNetManager.New()
        self.netManager:OnInit(self.battleMessage)
        coroutine.start(function ()
            --打开布阵界面
            self.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYOPENEMBATTLEUI,self.roles,self.enemyRoles,self.cam_time)
        end)



    elseif self.currentState==BattleEnum.LogicState.BATTLE then
        --Logger.Log("进入战斗状态")
        self.battleViewContext=BattleViewContext.New()
        self.battleViewContext:OnInit(self.battleMessage,self.scene_mask_col,self.ctrl_cam_trans,self.battleCache)
        --初始化剧情触发器
        local triggerType = StoryConstConfig.StoryTrigger.Battle
        self.storyTrigger = triggerType.Type.New()
        local triggerInitRes = self.storyTrigger:CreateTriggers(self.battleViewContext)
        if not triggerInitRes then
            Logger.Log("StoryConstConfig.StoryTrigger.Battle create faild")
            self.storyTrigger = nil
        end
        self.oneBattle=OneBattle.New()
        self.oneBattle:OnInit(self.battleMessage,self.myTeam,self.myGuard,self.battlePackages,self.netManager,self.storyTrigger)
        self.battleUIManager:SetBattlePlayerManager(self.oneBattle.battlePlayerManager,self.battleViewContext.battleRoleViewManager)
    elseif self.currentState==BattleEnum.LogicState.RESULT then
        if data.isSuccess==true then
            --self.oneBattle:OnDestroy()
            --self.battleViewContext:OnDestroy()
            self.battleViewContext.battleRoleViewManager:WinDestroyRole()
            self.settlement_data = data
            self.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYUIRESULTBEGIN)
            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_WIN__CAM,0);
        else
            --self.oneBattle:OnDestroy()
            --self.battleViewContext:OnDestroy()
            self.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYUIRESULT,data)
            --self.battleUIManager:OnDestroy()
            --self.battleMessage:Cleanup()
        end

    end

end


local function Update(self)
    --Logger.Log("BattlePveProxy Update currentState:"..self.currentState)
    if self.currentState==BattleEnum.LogicState.BATTLE then
        self.battleViewContext:Update()
        self.oneBattle:Update()
    end
end

local function OnDestroy(self)
    if self.oneBattle ~= nil then
        self.oneBattle:OnDestroy()
    end
    if self.battleMessage ~= nil then
        self.battleMessage:Cleanup()
    end
    if self.battleUIManager ~= nil then
        self.battleUIManager:OnDestroy()
    end
    if self.battleViewContext ~= nil then
        self.battleViewContext:OnDestroy()
    end
    RemoveEventListener(self)
end



local function SetControlCamera(self,ctrl_trans)
    self.ctrl_cam_trans = ctrl_trans
end



BattlePveProxy.__init=__init
BattlePveProxy.OnInit=OnInit
BattlePveProxy.Update=Update
BattlePveProxy.OnDestroy=OnDestroy
BattlePveProxy.ChangeState=ChangeState
BattlePveProxy.SetControlCamera = SetControlCamera

return BattlePveProxy