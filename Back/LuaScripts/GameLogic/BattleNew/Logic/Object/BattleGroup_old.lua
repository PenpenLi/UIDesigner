---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/12/12 16:32
---
local BattleAssistFunction= require "GameLogic.BattleNew.BattleAssistFunction"
local BattleGroup=BaseClass("BattleGroup")

local function __init(self)
    --Id
    self.groupId=0
    --所属阵营
    self.player=nil
    --寄灵人
    self.mainRole=nil
    --召唤守护灵
    self.guardianRole=nil
    --守护灵初始数据
    self.initGuardData = nil
    --当前前排角色
    self.battleRole=nil

    --当前状态
    self.state=0
    --死亡的主角色  ui显示用
    self.deadMainRole = nil
end


local function OnInit(self,groupId,player)
    self.groupId=groupId
    self.player=player

    self.state=BattleEnum.BattleGroupState.NORMAL
end


local function SetMainRole(self,battleRole)
    --Logger.Log("group"..self.groupId.."设置主要角色"..battleRole.entityId)
    self.mainRole=battleRole
    self.battleRole=self.mainRole
    self.mainRole:ChangeBattlePosition(BattleEnum.BattlePosition.FRONT)
    --self:ChangeBattleRoleLogic()
end

local function CallGuardianRole(self,guard)
    self.guardianRole = guard
    self.battleRole=self.guardianRole
    self.mainRole:ChangeBattlePosition(BattleEnum.BattlePosition.BACK)
    self.guardianRole:ChangeBattlePosition(BattleEnum.BattlePosition.FRONT)
    return {teamId = self.guardianRole.teamId,entityId = self.guardianRole.entityId}
end

local function SetGuardianRole(self,battleRole)
    self.initGuardData=battleRole
    --self:ChangeBattleRoleLogic()
end

--local function ChangeBattleRoleLogic(self)
--    if self.guardianRole==nil then
--        self.battleRole=self.mainRole
--        self.mainRole:ChangeBattlePosition(BattleEnum.BattlePosition.FRONT)
--    else
--        self.battleRole=self.guardianRole
--        self.mainRole:ChangeBattlePosition(BattleEnum.BattlePosition.BACK)
--        self.guardianRole:ChangeBattlePosition(BattleEnum.BattlePosition.FRONT)
--    end
--end

local function ChangeRoleShowPosition(self)

    --发送设置父节点消息
    self.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.SOMEONE_CHANGE_PARENT,self.mainRole)
    if self.guardianRole~=nil then
        self.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.SOMEONE_CHANGE_PARENT,self.guardianRole)
    end
end

local function GetRoleById(self,id)
    if self.mainRole~=nil and self.mainRole.entityId==id then
        --Logger.Log("group"..self.groupId.."mainRole"..self.mainRole.entityId)
        return self.mainRole
    end
    if self.guardianRole~=nil and self.guardianRole.entityId==id then
        return self.guardianRole
    end
    return nil
end

local function Update(self)
    if self.mainRole~=nil then
        self.mainRole:Update()
    end
    if self.guardianRole~=nil then
        self.guardianRole:Update()
    end
end

local function roleDeadLogic(self,battleRole)
    if battleRole==self.mainRole then
        if self.guardianRole~=nil and self.guardianRole.currentState<BattleEnum.BattleRoleState.DEAD then
            self.guardianRole:ChangeState(BattleEnum.BattleRoleState.DEAD)
            self.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYROUNDDATASWITCH,{old = self.mainRole.entityId,new = self.guardianRole})
        end
        --self.mainRole=nil
    elseif  battleRole==self.guardianRole then
        if self.mainRole~=nil  and  self.mainRole.currentState<BattleEnum.BattleRoleState.DEAD then
            self:ChangeState(BattleEnum.BattleGroupState.CANTBEATTACKED)
        end
    end
end


local function roleStartDestroyLogic(self,battleRole)
    if battleRole==self.mainRole then
        --self.mainRole=nil
    elseif battleRole==self.guardianRole then
        local preRole=battleRole
        --self.guardianRole=nil
        if self.mainRole~=nil  and  self.mainRole.currentState<BattleEnum.BattleRoleState.DEAD then
            self.battleRole=self.mainRole
            self.mainRole:ChangeBattlePosition(BattleEnum.BattlePosition.FRONT)
            --self:ChangeBattleRoleLogic()
            self:ChangeRoleShowPosition()
            self.mainRole:ChangeState(BattleEnum.BattleRoleState.CHANGEPOSITION)
            self.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYROUNDDATASWITCH,{old = preRole.entityId,new = self.mainRole})
        end
    end
end



local function roleFinishDestroyLogic(self,battleRole)
    if battleRole==self.mainRole then
        self.mainRole=nil
        self.deadMainRole = battleRole
    elseif battleRole==self.guardianRole then
        self.guardianRole=nil
    end
    --注释掉  不然获取不到该死亡组  ui没有数据
    --if self.mainRole==nil and self.guardianRole==nil then
    --    self.initGuardData = nil
    --    table.removebyvalue(self.player.groups,self)
    --end
end

local function ChangeState(self,state)
    self.state=state
end



local function OnDestroy(self)

    if self.mainRole~=nil then
        self.mainRole:OnDestroy()
    end
    if self.guardianRole~=nil then
        self.guardianRole:OnDestroy()
    end
    if self.initGuardData ~= nil then
        self.initGuardData:OnDestroy()
    end
    if self.deadMainRole ~= nil then
        self.deadMainRole:OnDestroy()
    end
    self.deadMainRole = nil
    self.initGuardData = nil
    self.mainRole=nil
    self.guardianRole=nil
end



BattleGroup.__init=__init
BattleGroup.OnInit=OnInit
BattleGroup.Update=Update
BattleGroup.OnDestroy=OnDestroy
BattleGroup.SetMainRole=SetMainRole
BattleGroup.GetRoleById=GetRoleById
BattleGroup.SetGuardianRole=SetGuardianRole
BattleGroup.CallGuardianRole = CallGuardianRole
BattleGroup.ChangeRoleShowPosition=ChangeRoleShowPosition
BattleGroup.ChangeState=ChangeState
BattleGroup.roleDeadLogic=roleDeadLogic
BattleGroup.roleStartDestroyLogic=roleStartDestroyLogic
BattleGroup.roleFinishDestroyLogic=roleFinishDestroyLogic
return BattleGroup