---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/12/12 13:40
---
local BattleSkill = require"GameLogic.BattleNew.Logic.Object.BattleSkill"
local BattleCallSkill = require"GameLogic.BattleNew.Logic.Object.BattleCallSkill"
local BattleSkillEffect = require"GameLogic.BattleNew.Logic.Object.BattleSkillEffect"
local BattleAssistFunction= require "GameLogic.BattleNew.BattleAssistFunction"
local BattleRole=BaseClass("BattleRole")


local function __init(self)
    --阵营id
    self.teamId=0
    --角色ID
    self.entityId=0
    --最大血量

    self.maxHp=0
    --当前血量
    self.hp=0
    --当前血量百分比
    self.currentHp=0
    --敌方还是我方
    self.playerType=0
    --所在组ID111
    self.position=0
    --所在战斗位置
    self.battlePosition=0
    --行动状态
    self.state=0
    --等级
    self.level=0
    --当前状态
    self.currentState=0
    --计时
    self.timer=0
    --所有技能
    self.skills={}
    --所有技能效果
    self.effects={}
    --召唤技能
    self.callSkill=nil
    --所在group
    self.group=nil
    --当前使用的技能信息
    self.currentSkillMessage=nil
    --当前召唤信息
    self.callSkillMessage=nil
    --当前释放技能效果列表
    self.skill_case = nil
    --技能持续时间
    self.useSkillTime =0
    --使用技能类型
    self.lastUseSkillType=0
    --技能返回阶段时间
    self.reTime = 0
    --返回状态
    self.reState = 0  -- 1-返回攻击 2-返回加速
    --技能提示
    self.skillTip = false
    --是否是最后一个英雄释放技能
    self.lastUseSkillRole = false
end

local function OnInit(self,serverRole,group)
    self.teamId=serverRole.teamId
    self.entityId=serverRole.entityId
    self.maxHp=serverRole.hp
    self.hp=self.maxHp
    self.currentHp=1.0
    self.position=serverRole.position
    self.state=serverRole.state
    self.level=serverRole.level
    self.timer=0
    self.group=group
    self.playerType=self.group.player.playerType
    --角色技能
    for k,v in ipairs(serverRole.skills) do
        local skill=BattleSkill.New()
        skill:OnInit(self,v)
        table.insert(self.skills,skill)
    end
    --角色技能效果
    for k,v in ipairs( serverRole.effects) do
        local effect=BattleSkillEffect.New()
        effect:OnInit(self,v)
        table.insert(self.effects,effect)
    end
    if serverRole.callSkill~=nil and serverRole.callSkill.guardianId~=0 then
        self.callSkill=BattleCallSkill.New()
        self.callSkill:OnInit(self,serverRole.callSkill)
    end

    --Logger.Log("创建逻辑角色")
    --Logger.Log("TEAMID"..self.teamId)
    --Logger.Log("ROLEID"..self.entityId)
    --Logger.Log("血量:"..self.hp)
    --self:ChangeState(BattleEnum.BattleRoleState.ENTER)
end


local function CheckIsMainRole(self)
    if self.group.mainRole == self then
        return true
    end
    return false
end

local function SyncFinishCase(self,i)
    if self.skill_case ~= nil and self.skill_case[i] then
        self.skill_case[i] = false
    end
end

local function CheckCaseOver(self)
    if self.skill_case ~= nil then
        for i, v in ipairs(self.skill_case) do
            if v then
                local skillCase = self.currentSkillMessage.cases[i]
                if skillCase~=nil  then
                    for m,n in ipairs(skillCase.targets) do
                        local role=self.group.player.OneBattle.battlePlayerManager:GetRoleByTeamAndId(n.teamId,n.entityId)
                        role:SyncByServerChange(n)
                    end
                end
            end
        end
    end
    self.skill_case = nil

end


--战斗中技能中变换量同步
local function SyncByServerChange(self,serverRole,param2,param3)
    if self.hp~=serverRole.hp then
        self.hp=serverRole.hp
        self.currentHp=self.hp/self.maxHp
    end
    self.state=serverRole.state
    if serverRole.skills~=nil  then
        for k,v in ipairs(serverRole.skills) do
            local skill=self:GetSkillById(v.skillId)
            skill:SyncByServer(v)
        end
    end
    if serverRole.effects~=nil  then
        for k,v in ipairs(serverRole.effects) do
            local effect=self:GetSkillEffectById(v.effectId)
            if not v.isRemove then
                if effect==nil then
                    local effect=BattleSkillEffect.New()
                    effect:OnInit(self,v,param2,param3)
                    table.insert(self.effects,effect)
                else
                    effect:SyncByServer(v,param2,param3)
                end
            else
                if effect ~= nil then
                    effect:OnDestroy()
                    table.removebyvalue(self.effects,effect)
                else
                    --初始化下效果 可能会是掉血效果
                    local effect=BattleSkillEffect.New()
                    effect:OnInit(self,v,param2,param3)
                end
            end
        end

    end
    if not serverRole.callSkill._is_null and serverRole.callSkill.guardianId~=0 then
        self.callSkill:SyncByServer(serverRole.callSkill)
    end
    --Logger.Log("技能过程中同步角色")
    --Logger.Log("TEAMID"..self.teamId)
    --Logger.Log("ROLEID"..self.entityId)
    --Logger.Log("血量:"..self.hp)
end



local function ChangeState(self,state)
    self.timer=0
    if self.currentState==state then
        return
    end
    self.currentState=state
    if self.currentState==BattleEnum.BattleRoleState.ENTER then

    elseif self.currentState==BattleEnum.BattleRoleState.IDLE then

    elseif self.currentState==BattleEnum.BattleRoleState.USE_SKILL then
    elseif self.currentState==BattleEnum.BattleRoleState.USE_SKILL_FRONT then
    elseif self.currentState==BattleEnum.BattleRoleState.DEAD then
        if self.hp>0 then
            self.hp=0
        end
       self.group:roleDeadLogic(self)
    elseif self.currentState==BattleEnum.BattleRoleState.DESTROY then
        self.group:roleStartDestroyLogic(self)
    elseif self.currentState==BattleEnum.BattleRoleState.CHANGEPOSITION then

    end
    --向显示层发送消息
    self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.SOMEONE_CHANGE_STATE,self,self.currentState)
end



local function ChangeBattlePosition(self,pos)
    self.battlePosition=pos
end


--使用召唤技能
local function CallGuardianSkill(self,isFront,guard)
    --Logger.Log("角色teamId.."..self.teamId)
    --Logger.Log("角色Id"..self.entityId)
    --Logger.Log("使用召唤技能")
    self.currentSkillMessage= nil
    --local role=BattleRole.New()
    --role:OnInit(messageCallGuardian.guardian,self.group)
    self.callSkillMessage = self.group:CallGuardianRole(guard)
    coroutine.start(function ()
        --发送显示层生成角色
        self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.ADD_ROLE_VIEW,self.group.guardianRole,false)
        self.group.guardianRole:ChangeState(BattleEnum.BattleRoleState.IDLE)
        self.lastUseSkillType=2
        self.useSkillTime = BattleAssistFunction.GetCallTimeLineTime(self.playerType, self.entityId)
        self.skillTip = isFront
        self.reTime = 0
        --self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL)
        --if isFront then
        --    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL_FRONT)
        --else
        --    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL)
        --end
        self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL)
    end)
end

--使用技能
local function UseSkill(self,messageActionSkill,isFront,useSkillTime,reTime,reState,lastRole)
    --Logger.Log("角色teamId.."..self.teamId)
    --Logger.Log("角色Id"..self.entityId)
    --Logger.Log("使用技能"..messageActionSkill.skillId)
    self.callSkillMessage = nil
    self.currentSkillMessage=messageActionSkill
    local useSkillDead = false
    if messageActionSkill ~= nil and messageActionSkill.cases ~= nil then
        self.skill_case = {}
        for i, v in ipairs(messageActionSkill.cases) do
            self.skill_case[i] = true
            --检查自身血量变化
            if v.targets ~= nil then
                for m, n in ipairs(v.targets) do
                    if n.entityId == self.entityId and n.hp == 0 then
                        useSkillDead = true
                        break
                    end
                end
            end
            if useSkillDead then
                break
            end
        end
    end
    self.lastUseSkillType=1
    self.skillTip = isFront
    if reState == 1 and reTime > 0 and useSkillDead then
        self.useSkillTime = self.useSkillTime+self.reTime
        self.reTime = 0
        self.reState = 0
    else
        self.useSkillTime = useSkillTime
        self.reTime = reTime
        self.reState = reState
    end
    self.lastUseSkillRole = lastRole
    --if isFront then
    --    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL_FRONT)
    --else
    --    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL)
    --end
    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL)

end

--是否是寄灵人
local function IsHost(self)
    return not self.callSkill==nil
end

--获取人物技能
local function GetSkillById(self,skillId)

    local skill=nil

    for k,v in pairs(self.skills) do

        if v.skillId==skillId then
            skill=v
            break
        end
    end
    return skill
end


local function GetSkillEffectById(self,effectId)
    local effect=nil
    for k,v in pairs(self.effects) do
        if v.effectId==effectId then
            effect=v
            break
        end
    end
    return effect
end


local function Update(self)

    if self.currentState==BattleEnum.BattleRoleState.ENTER then

    elseif self.currentState==BattleEnum.BattleRoleState.IDLE then
    elseif self.currentState==BattleEnum.BattleRoleState.USE_SKILL_FRONT then
        --self.timer=self.timer+Time.deltaTime
        --if self.timer > 1 then
        --    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL)
        --end
    elseif self.currentState==BattleEnum.BattleRoleState.USE_SKILL_BACK then
        self.timer=self.timer+Time.deltaTime
        --if self.timer > 0.3 and self.lastUseSkillType == 2 and self.callSkillState == 2 then
        --    UIManager:GetInstance():Broadcast(UIMessageNames.UIEMBATTLE_CHANGE__CAM,3);
        --    self.callSkillState = 0
        --end
        if self.timer > self.reTime then
            --if self.lastUseSkillType == 2 then
            --    self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.SOMEONE_FINISH_SKILL,self,self.lastUseSkillType)
            --end
            self:ChangeState(BattleEnum.BattleRoleState.IDLE)
        end
    elseif self.currentState==BattleEnum.BattleRoleState.USE_SKILL then
        self.timer=self.timer+Time.deltaTime
        if self.timer>self.useSkillTime then
            if self.lastUseSkillType==1 then
                self:CheckCaseOver()
            elseif self.lastUseSkillType==2 then
                self.group:ChangeRoleShowPosition()
            end
            self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.SOMEONE_FINISH_SKILL,self,self.lastUseSkillType)
            if self.hp > 0 then
                if self.reTime > 0 then
                    self:ChangeState(BattleEnum.BattleRoleState.USE_SKILL_BACK)
                else
                    self:ChangeState(BattleEnum.BattleRoleState.IDLE)
                end
            end
        end
    elseif self.currentState==BattleEnum.BattleRoleState.DEAD then
        self.timer=self.timer+Time.deltaTime
        if self.timer>3.0 then
            self:ChangeState(BattleEnum.BattleRoleState.DESTROY)
        end
    elseif self.currentState==BattleEnum.BattleRoleState.DESTROY then
        self.timer= self.timer+Time.deltaTime
        if  self.timer>2.0 then
            --self:OnDestroy()
            --暂时不清楚技能  死亡角色用
            self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.DELETE_ROLE_VIEW,self)
            self.group:roleFinishDestroyLogic(self)
        end
    elseif self.currentState==BattleEnum.BattleRoleState.CHANGEPOSITION then
        self.timer= self.timer+Time.deltaTime
        if  self.timer>2.0 then
            self:ChangeState(BattleEnum.BattleRoleState.IDLE)
            self.group:ChangeState(BattleEnum.BattleGroupState.NORMAL)
        end
    end
end


local function OpreateHp(self,hpChange,isCrit,hurtType)
    --self.hp=self.hp-10000000
    --self.hp=self.hp+hpChange
    self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.SOMEONE_CHANGE_HP,self,hpChange,isCrit,hurtType)
end

local function CheckDead(self)
    if self.hp<=0  and self.currentState<BattleEnum.BattleRoleState.DEAD then
        if self.special_dead == 1 then
            self:ChangeState(BattleEnum.BattleRoleState.DESTROY)
            self.group:roleDeadLogic(self)
        else
            self:ChangeState(BattleEnum.BattleRoleState.DEAD)
        end

    end

end

local function SpecialDead(self)
    self.special_dead = 1
end


local function OnDestroy(self)
    self.skills={}
    self.effects={}
    --发送显示层销毁消息
    --self.group.player.OneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.DELETE_ROLE_VIEW,self)
    --self.group:roleFinishDestroyLogic(self)
end
--获取护盾值
local function GetShieldVal(self)
    local val = 0
    local maxVal = 0
    for k,v in ipairs(self.effects) do
        if v.value > 0 then
            val = val + v.value
            maxVal = maxVal + v.maxValue
        end
    end
    --if val > 0 then
    --    if maxVal > 0 then
    --        shieldVal = val/maxVal
    --        shieldPer = maxVal / self.maxHp
    --        if shieldPer > 1 then
    --            shieldPer = 1
    --        end
    --    else
    --        shieldPer = 0
    --    end
    --end
    return val,maxVal
end

BattleRole.__init=__init
BattleRole.OnInit=OnInit
BattleRole.Update=Update
BattleRole.OnDestroy=OnDestroy
BattleRole.IsHost=IsHost
BattleRole.GetSkillById=GetSkillById
BattleRole.GetSkillEffectById=GetSkillEffectById
BattleRole.CallGuardianSkill=CallGuardianSkill
BattleRole.ChangeState=ChangeState
BattleRole.UseSkill=UseSkill
BattleRole.ChangeBattlePosition=ChangeBattlePosition
BattleRole.OpreateHp=OpreateHp
BattleRole.CheckCaseOver = CheckCaseOver
BattleRole.SyncFinishCase = SyncFinishCase
BattleRole.CheckDead=CheckDead
BattleRole.SpecialDead = SpecialDead
BattleRole.SyncByServerChange=SyncByServerChange
BattleRole.GetShieldVal = GetShieldVal
BattleRole.CheckIsMainRole = CheckIsMainRole
return BattleRole