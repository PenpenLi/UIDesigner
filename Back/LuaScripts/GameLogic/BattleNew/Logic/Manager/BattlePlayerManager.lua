---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/12/12 16:47
---
local BattlePlayer=require "GameLogic.BattleNew.Logic.Object.BattlePlayer"
local BattlePlayerManager=BaseClass("BattlePlayerManager")

local function __init(self)
    --所属战斗
    self.oneBattle=nil
    --我方阵营
    self.player1=nil
    --敌方阵营
    self.player2=nil
    --当前攻击阵营
    self.attackPlayer=nil
    --是否是先手
    self.isFirst = nil
end







local function OnInit(self,oneBattle,myTeam,myGuard,battlePackages,battleEnemy)
    --Logger.Log("BattlePlayerManager OnInit")
    self.oneBattle=oneBattle
    self.player1=BattlePlayer.New()
    local myTeamInfo={}
    myTeamInfo[1]={jlr = myTeam,shl = myGuard}
    local create_list = {}
    self.player1:OnInit(oneBattle,BattleEnum.BattlePlayerType.MINE,battlePackages.myTeamId)
    self.player1:CreateWaveRoles(myTeamInfo,create_list)
    self.player2=BattlePlayer.New()
    local enemyTeamInfo={}
    enemyTeamInfo[1]={jlr = battleEnemy,shl = battlePackages.enemyGuard}
    self.player2:OnInit(oneBattle,BattleEnum.BattlePlayerType.ENEMY,battlePackages.enemyTeamId)
    self.player2:CreateWaveRoles(enemyTeamInfo,create_list)
    self.attackPlayer=battlePackages.isFirst==true and self.player1 or self.player2
    self.isFirst = battlePackages.isFirst
    oneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.ADD_WAVE_ROLES,create_list)
    if not self.isFirst then
        oneBattle.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYENEMYFIRST)
    end
end



--此轮是否该我进攻
local function isMineAttack(self)
    return self.attackPlayer.playerType==BattleEnum.BattlePlayerType.MINE
end

--此轮是否该我进攻
local function PvpCheckIsMine(self,teamId)
    return self.player1.Id==teamId
end



--获取进攻方战斗角色
local function GetAttackerBattleRoles(self)
    return self.attackPlayer:GetBattleRoles()
end


local function GetAllBattleRoles(self)
    local result = self.player1:GetBattleRoles()
    table.insertto(result,self.player2:GetBattleRoles())
    return result
end


--根据ID获取阵营
local function GetPlayerById(self,teamId)
    if self.player1.Id==teamId then
        return self.player1
    elseif self.player2.Id==teamId then
        return self.player2
    end
    return nil
end


--根据ID获取战斗角色
local function GetRoleByTeamAndId(self,teamId,id)
    --Logger.Log("获取角色阵容ID"..teamId)
    --Logger.Log("获取角色ID"..id)
    local player=self:GetPlayerById(teamId)
    --Logger.Log("player.ID"..player.Id)
    return player:GetRoleById(id)
end


--切换攻击方
local function ChangeAttacker(self)
    self.attackPlayer=self.attackPlayer==self.player1 and self.player2 or self.player1
end

--获取防守方
local function GetDefencePlayer(self)
    if self.attackPlayer == self.player1 then
        return self.player2
    else
        return self.player1
    end

end

local function Update(self)

    self.player1:Update()
    self.player2:Update()
end
--检测是否有单位死亡
local function CheckBattleRoleDead(self)
    self.player1:CheckBattleRoleDead()
    self.player2:CheckBattleRoleDead()
end

local function OnDestroy(self)
    self.player1:OnDestroy()
    self.player2:OnDestroy()
end
BattlePlayerManager.CheckBattleRoleDead = CheckBattleRoleDead
BattlePlayerManager.__init=__init
BattlePlayerManager.OnInit=OnInit
BattlePlayerManager.Update=Update
BattlePlayerManager.OnDestroy=OnDestroy
BattlePlayerManager.isMineAttack=isMineAttack
BattlePlayerManager.ChangeAttacker=ChangeAttacker
BattlePlayerManager.GetDefencePlayer = GetDefencePlayer
BattlePlayerManager.GetAttackerBattleRoles=GetAttackerBattleRoles
BattlePlayerManager.GetRoleByTeamAndId=GetRoleByTeamAndId
BattlePlayerManager.GetPlayerById=GetPlayerById
BattlePlayerManager.PvpCheckIsMine = PvpCheckIsMine
BattlePlayerManager.GetAllBattleRoles = GetAllBattleRoles
return BattlePlayerManager

