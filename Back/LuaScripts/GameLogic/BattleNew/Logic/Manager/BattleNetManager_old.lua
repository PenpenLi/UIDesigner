---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/11/7 15:55
---
local BattleNetManager=BaseClass("BattleNetManager")
local MsgIDDefine = require "Net.Config.MsgIDDefine"
local MsgIDMap = require "Net.Config.MsgIDMap"
local BattleFieldManager=require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
local function __init(self)

    --事件
    self.battleMessage=nil
end

function BattleNetManager:OnInit(battleMessage)
    self.battleMessage=battleMessage


end

function BattleNetManager:SendPveBattleStartRequest(roles)
    Logger.Log("发送战斗开始请求")

    local msd_id = MsgIDDefine.PBFIGHT_PVE_START_REQUEST
    local msg = (MsgIDMap[msd_id])()
    for k,v in pairs(roles) do
        local battleGroup=msg.battleGroup:add()
        battleGroup.hostId=v.Id
        battleGroup.guardianId=v.guardianId
        battleGroup.position=v.position
    end
    NetManager:GetInstance():SendMessage(msd_id, msg,Bind(self,self.PveBattleStartResponse))
    --NetManager:GetInstance():AddListener(MsgIDDefine.PBFIGHT_PVE_START_RESPONSE,self.PveBattleStartResponse,self)
end

function BattleNetManager:PveBattleStartResponse(msg_obj)
    Logger.Log("收到战斗开始回复msg_obj.OpCode"..msg_obj.OpCode)
    --NetManager:GetInstance():RemoveListener(MsgIDDefine.PBFIGHT_PVE_START_RESPONSE,self.PveBattleStartResponse)
    if msg_obj.OpCode==0 then
        self.battleMessage:Broadcast(BattleEnum.BattleMessage.NOTIFYBATTLETOSTART,msg_obj.Packages)
    end
end

function BattleNetManager:SendConvertCrytalsRequest(teamId)
    Logger.Log("发送回复水晶请求")
    local msd_id = MsgIDDefine.PBFIGHT_CONVERT_CRYTALS_REQUEST
    local msg = (MsgIDMap[msd_id])()
    msg.teamId=teamId
    NetManager:GetInstance():SendMessage(msd_id, msg)
    NetManager:GetInstance():AddListener(MsgIDDefine.PBFIGHT_CONVERT_CRYTALS_RESPONSE,self.ConvertCrytalsResponse,self)

end


function BattleNetManager:ConvertCrytalsResponse(msg_obj)
    Logger.Log("收到回复水晶请求msg_obj"..msg_obj.OpCode)
    NetManager:GetInstance():RemoveListener(MsgIDDefine.PBFIGHT_CONVERT_CRYTALS_RESPONSE,self.ConvertCrytalsResponse)
    if msg_obj.OpCode==0 then

        local Packages=msg_obj.Packages
        self.battleMessage:Broadcast(BattleEnum.BattleMessage.CONVERTCRYTALS,Packages)
    else
        Logger.Log("ERROR PBFIGHT_CONVERT_CRYTALS_RESPONSE")
    end
end

function BattleNetManager:SendPveActionRequest(teamId,standby,select_skills)

    Logger.Log("发送战斗回合数据")
    local msd_id = MsgIDDefine.PBFIGHT_PVE_ACTION_REQUEST
    local msg = (MsgIDMap[msd_id])()
    msg.teamId=teamId
    msg.standby=standby
    if select_skills ~= nil then
        for k,v in ipairs(select_skills) do
            local choos_skill=msg.skills:add()
            choos_skill.entityId=v[1]
            choos_skill.skillId=v[2]
            choos_skill.isCall=v[3]
        end
    end

    NetManager:GetInstance():SendMessage(msd_id, msg,function(msg_obj)
        Logger.Log("收到战斗回合数据OpCode"..msg_obj.OpCode)
        if msg_obj.OpCode==0 then
            Logger.Log(" OpCode ： "..msg_obj.OpCode.."msg:"..tostring(msg_obj))
            local Packages=msg_obj.Packages
            self.battleMessage:Broadcast(BattleEnum.BattleMessage.PVEROUNDDATA,Packages)
        end
    end)
end


function BattleNetManager:SendChooseSkillRequest(teamId,entityId,skillId,isCall)
    Logger.Log("发送选择技能数据")
    local msd_id = MsgIDDefine.PBFIGHT_CHOOSE_SKILL_REQUEST
    local msg = (MsgIDMap[msd_id])()
    msg.teamId=teamId
    msg.entityId=entityId
    msg.skillId=skillId
    msg.isCall=isCall
    NetManager:GetInstance():SendMessage(msd_id, msg,function(msg_obj)
        Logger.Log("收到选择技能数据OpCode"..msg_obj.OpCode)
        if msg_obj.OpCode==0 then

            local Packages=msg_obj.Packages
            self.battleMessage:Broadcast(BattleEnum.BattleMessage.SERVER_CHOOSESKILL_RESPONSE,Packages)
        end
    end)
end

BattleNetManager.__init=__init
return BattleNetManager