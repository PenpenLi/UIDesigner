---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aaa.
--- DateTime: 2018/11/19 13:41
---
local BattleUIManager = BaseClass("BattleUIManager")
local BattleAssistFunction= require "GameLogic.BattleNew.BattleAssistFunction"
local BattleFieldManager=require "GameLogic.BattleNew.Logic.Manager.BattleFieldManager"
local normal_hurt_text_path = "Effect/Prefab/UI/ef_ui_fight_digital.prefab"
local crit_hurt_text_path = "Effect/Prefab/UI/ef_ui_fight_digital_crit.prefab"
local total_hurt_text_path = "Effect/Prefab/UI/ef_ui_fight_digital_Total hit.prefab"
local cutin_path = "UI/Prefabs/Other/UIBattleCutIn_Small.prefab"
local cutin_big_path = "UI/Prefabs/Other/UIBattleCutIn_Big.prefab"
local blood_path = "UI/Prefabs/Other/UIBattleBlood.prefab"
local blood_special_path = "UI/Prefabs/Other/UIBattleSpecialBlood.prefab"
local skill_tip_path = "UI/Prefabs/Other/SkillTipAnim.prefab"
local battle_team_tip = "UI/Prefabs/Other/BattleRoundTip.prefab"
local friend_team_tip_path = "Effect/Prefab/UI/FX_UI_Round_B.prefab"
local enemy_team_tip_path = "Effect/Prefab/UI/FX_UI_Round_R.prefab"
local jlr_circle_end_path="Art/EffectRes/Common/FX_c_other_zhenfa hero T_end.prefab";
local shl_circle_end_path="Art/EffectRes/Common/FX_c_other_zhenfa S_hero T_end.prefab";
local role_effect_show_path="Art/EffectRes/Common/FX_c_other_choose dust.prefab";
local enemy_role_effect_show_path="Art/EffectRes/Common/FX_c_Skill click for enemy.prefab";
local select_skill_effect_path="Art/EffectRes/Common/FX_c_Skill click for hero.prefab";
local combo_path = "UI/Prefabs/Other/Combo.prefab"
local drop_cry1_path = "Art/EffectRes/Common/fx_c_crystal_red_down.prefab"
local drop_cry2_path = "Art/EffectRes/Common/fx_c_crystal_yellow_down.prefab"
local drop_cry3_path = "Art/EffectRes/Common/fx_c_crystal_blue_down.prefab"
local blood_slider_time = 0.3
local blood_slider_total_time = 0.6
local blood_slider_between_time = 0.3
local blood_show_time = 0.8
local GameObject = CS.UnityEngine.GameObject
local shieldSize = 110
local specialShieldSize = 908
local BattleRoleView=require("GameLogic.BattleNew.View.Object.BattleRoleView")
--提示对话框
local BattleDialogTip = "UI/Prefabs/Other/BattleDialogTip.prefab"
local function InitEmBattleUi(self,roles,enemyRoles,camTime)
    Logger.Log("打开布阵界面")
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIEmBattle,roles,enemyRoles,camTime)
end


local function SetBattlePlayerManager(self,battlePlayer,battleView)
    self.battlePlayer = battlePlayer
    self.battleView = battleView
end


local function RoundUIData(self,type,enemy_crystal,friend_crystal,down_count)
    if type == 1 then
        self.save_select_skill_order = {}
    end
    if UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleIn,true,true) == nil then
        --特殊处理
        if type == 2 then
            type = 3
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleIn,type,self.battlePlayer,friend_crystal,down_count)
    else
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_BATTLE_ROUND_DATA,type,enemy_crystal,friend_crystal,down_count)
    end
end


--根据3d世界位置获取UI位置
local function GetUIPos(self,pos,size_delta)
    if IsNull(self.cam) then
        self.cam = CS.UnityEngine.Camera.main
    end
    local lpos = nil
    if not IsNull(self.cam) then
        lpos = self.cam:WorldToViewportPoint(Vector3.New(pos[1],pos[2],pos[3]))
        if lpos.z < 0 then
            lpos.y = -1
        end
        lpos = Vector3.New((lpos.x - 0.5)*size_delta[0], (lpos.y - 0.5)*size_delta[1], 0)
    else
        Logger.Log("飘字差不多主相机")
        lpos = Vector3.New(0,0,0)
    end
    return lpos
end

local function GetWorldPos(self,x,y)
    if IsNull(self.cam) then
        self.cam = CS.UnityEngine.Camera.main
    end
    return self.cam:ViewportToWorldPoint(Vector3.New(x,y,5))
end

--清理飘字
local function ClearHurtText(self)
    if self.hurt_text ~= nil then
        for k, v in pairs(self.hurt_text) do
            if v ~= nil then
                if v[1] then
                    GameObjectPool:GetInstance():RecycleGameObject(v[2],k)
                    TimerManager:GetInstance():SimpleTimerStop(v[1])
                end
            end
            self.hurt_text[k] = nil
        end
        self.hurt_text = nil
    end
    if self.total_hurt_data ~= nil then
        if self.total_hurt_data.anim_args then
            LuaTweener.StopTweener(self.total_hurt_data.anim_args)
        end
        if self.total_hurt_data.game_args then
            TimerManager:GetInstance():SimpleTimerStop(self.total_hurt_data.game_args)
        end
        self.total_hurt_data = nil
    end

end
--隐藏所有血条
local function HideAllBlood(self)
    if self.blood_data ~= nil then
        for k, v in pairs(self.blood_data) do
            if v ~= nil then
                if not IsNull( v.blood_game)  then
                    GameObjectPool:GetInstance():RecycleGameObject(blood_path,v.blood_game)
                    v.blood_game = nil
                end
                if v.slider_args ~= nil then
                    TimerManager:GetInstance():SimpleTimerStop(v.slider_args)
                    v.slider_args = nil
                end
                if v.blood_game_pos_args ~= nil then
                    TimerManager:GetInstance():SimpleTimerStop(v.blood_game_pos_args)
                    v.blood_game_pos_args = nil
                end
                if v.blood_hide_args ~= nil then
                    TimerManager:GetInstance():SimpleTimerStop(v.blood_hide_args)
                    v.blood_hide_args = nil
                end
                v.state = 0
            end
        end
    end
    if self.special_blood_data ~= nil then
        if not IsNull(self.special_blood_data.blood_game ) then
            GameObjectPool:GetInstance():RecycleGameObject(blood_special_path,self.special_blood_data.blood_game)
            self.special_blood_data.blood_game = nil
        end
        if self.special_blood_data.slider_args ~= nil then
            TimerManager:GetInstance():SimpleTimerStop(self.special_blood_data.slider_args)
            self.special_blood_data.slider_args = nil
        end
        self.special_blood_data.state = 0
    end
end
--清理血条
local function ClearBlood(self)
    if self.blood_data ~= nil then
        HideAllBlood(self)
        self.blood_data = nil
    end
    if self.special_blood_data ~= nil then
        HideAllBlood(self)
        self.special_blood_data = nil
    end
end


local function CreateSmallCutIn(self,id)
    GameObjectPool:GetInstance():GetGameObjectAsync(cutin_path,
            function(go)
                if not IsNull(go) then
                    LJAudioManger:GetInstance():PlayVoice("UI_Casting_01")
                    local card_static = DataUtil.GetData("card")
                    --local battle_role = DataUtil.GetData("battle_role_config")
                    --local pos = {-135,159}
                    local painting = "draw_cxl_1101002"
                    if card_static[id] ~= nil then
                        painting = card_static[id].Cutin
                    end
--[[                    if battle_role[id] ~= nil then
                        pos = battle_role[id].CastingPos
                    end]]
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.NormalLayer.Name)
                    local inst_trans = go.transform
                    UIUtil.FindComponent(inst_trans:Find("Root/Ani"),typeof(CS.UnityEngine.Animator)).updateMode = CS.UnityEngine.AnimatorUpdateMode.UnscaledTime
                    UIUtil.CommonLoadImg(UIUtil.FindImage(inst_trans,"Root/Ani/Head"),AtlasConfig.DynamicTex,painting)
                    UIUtil.SetUIParent(inst_trans,layer.transform)
                    --UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform),"head/hero").anchoredPosition3D = Vector3.New(pos[1],pos[2],0)
                    TimerManager:GetInstance():SimpleTimerArgs(0.9,function(go)
                        GameObjectPool:GetInstance():RecycleGameObject(cutin_path,go)
                    end,go,true)
                end
            end)
end

local function CreateCuteIn(self,id,type)
    if  type == 1 then
        GameObjectPool:GetInstance():GetGameObjectAsync(cutin_big_path,
                function(go)
                    if not IsNull(go) then
                        LJAudioManger:GetInstance():PlayVoice("UI_Casting_02")
                        local card_static = DataUtil.GetData("card")
                        local painting = "cutin_cfcyb_1101001"
                        if card_static[id] ~= nil then
                            painting = card_static[id].Cutin
                        end
                        local layer =  UIManager:GetInstance():GetLayer(UILayers.NormalLayer.Name)
                        local inst_trans = go.transform
                        UIUtil.FindComponent(inst_trans:Find("Root"),typeof(CS.UnityEngine.Animator)).updateMode = CS.UnityEngine.AnimatorUpdateMode.UnscaledTime
                        UIUtil.CommonLoadImg(UIUtil.FindImage(inst_trans,"Root/headAni/Head"),AtlasConfig.DynamicTex,painting)
                        UIUtil.SetUIParent(inst_trans,layer.transform)
                        TimerManager:GetInstance():SimpleTimerArgs(2,function(go)
                            GameObjectPool:GetInstance():RecycleGameObject(cutin_big_path,go)
                        end,go,true)
                    end
                end)

    else
        CreateSmallCutIn(self,id)
    end
end


local function DropCryFly(self,play)
    if play then
        local function FlyOver(change)
            if self.battleView then
                self.battleView.viewContext:BattleEndCheck()
            end
            if change ~= nil then
                UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE,change)
            end
        end
        if self.drop_cry_game ~= nil and #self.drop_cry_game > 0 then
            for i, v in ipairs(self.drop_cry_game) do
                if v.endFlyTpye ~= 0 then
                    local world_pos = Vector3.zero
                    local posX = 0.44
                    if v.cryType == 1 then
                        posX = 0.4
                    elseif v.cryType == 3 then
                        posX = 0.48
                    end
                    if v.endFlyTpye == BattleEnum.BattlePlayerType.ENEMY then
                        world_pos = GetWorldPos(self,posX,0.9)
                    else
                        world_pos = GetWorldPos(self,posX,0.05)
                    end
                    LuaTweener.TransMoveTo(v.game.transform,v.to_pos,world_pos,0.5,EaseFormula.Linear,function()
                        GameObjectPool:GetInstance():RecycleGameObject(v.path,v.game)
                        if v.endFlyTpye == BattleEnum.BattlePlayerType.MINE then
                            UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_PLAY_GETCRY_EFFECT,v.cryType)
                        end
                        FlyOver(v.change)
                    end)
                    LuaTweener.UIScaleTo(v.game.transform:Find("crystal"),Vector3.one,Vector3.New(0.2,0.2,0.2),0.5,EaseFormula.Linear)
                end
            end
            self.drop_cry_game = nil
        else
            FlyOver()
        end
    else
        if self.drop_cry_game ~= nil then
            for i, v in ipairs(self.drop_cry_game) do
                GameObjectPool:GetInstance():RecycleGameObject(v.path,v.game)
            end
            self.drop_cry_game = nil
        end
    end
end

local function CreateDropCry(self,fp,tp,cry_type,playerType,endFlyTpye,change)
    local drop_cry_path = drop_cry1_path
    if cry_type == 2 then
        drop_cry_path = drop_cry2_path
    elseif cry_type == 3 then
        drop_cry_path = drop_cry3_path
    end
    GameObjectPool:GetInstance():GetGameObjectAsync(drop_cry_path,function(go)
        if not IsNull(go) then
            local inst_trans = go.transform
            inst_trans.localScale = Vector3.one
            inst_trans:Find("crystal").localScale = Vector3.one
            local from_pos = fp
            local to_pos = BattleAssistFunction.CreateRandomCircle(tp,2)
            if self.drop_cry_game == nil then
                self.drop_cry_game = {}
            end
            table.insert(self.drop_cry_game,{game = go,to_pos = to_pos,path = drop_cry_path,playerType = playerType,cryType = cry_type, endFlyTpye = endFlyTpye, change = change})
            LuaTweener.TransParabolicMoveTo(inst_trans,from_pos,to_pos,0.3)
        end
    end)
end

local function PlayerDropCry(self,teamId,entityId,cry_type,cry_num,change)
    cry_num = math.abs(cry_num)
    self.fly_change_cry_data = change
    local endFlyTpye = 0 --最终飞向的位置 0--只掉落 1--飞向己方水晶位置 2--飞向敌方水晶位置
    if change[1] ~= nil and change[1].add ~= nil and change[1].add[cry_type] ~= nil then
        if change[1].add[cry_type] < 0 then
            endFlyTpye = 2
        end
        if change[1].add[cry_type] > 0 then
            endFlyTpye = 1
        end
    end
    if change[2] ~= nil and change[2].add ~= nil and change[2].add[cry_type] ~= nil then
        if change[2].add[cry_type] < 0 then
            endFlyTpye = 1
        end
        if change[2].add[cry_type] > 0 then
            endFlyTpye = 2
        end
    end
    if cry_type > 0 and cry_num > 0 then
        local role = self.battleView:GetRoleViewById(teamId,entityId)
        if role ~= nil then
            local fp = role.fxController:GetAnchorTrans(2).position
            local tp = role.transform.position+Vector3.New(0,0.2,0)
            for i = 0, cry_num-1 do
                TimerManager:GetInstance():SimpleTimerArgs(0.1*i+0.3,function()
                    CreateDropCry(self,fp,tp,cry_type,role.entity.playerType,endFlyTpye,change)
                end,nil,true)
            end
        end

    end
end


local function CreateTotalHurtPrefab(self,num,playerType)
    if self.total_hurt_data == nil then
        self.total_hurt_data = {state = 0,game_args = false,anim_args = false,pos ={0.5,0.3},enemy_pos = nil,friend_pos = nil,num = 0 }
        local global = DataUtil.GetData("global")
        for i, v in pairs(global) do
            if v.Key == "TatalDemagePosD" then
                self.total_hurt_data.enemy_pos = {tonumber(v.valueSA[1]),tonumber(v.valueSA[2])}
            elseif v.Key == "TatalDemagePosW" then
                self.total_hurt_data.friend_pos = {tonumber(v.valueSA[1]),tonumber(v.valueSA[2])}
            end
        end
    end
    self.total_hurt_data.num = num
    if playerType == BattleEnum.BattlePlayerType.MINE and self.total_hurt_data.friend_pos ~= nil then
        self.total_hurt_data.pos = self.total_hurt_data.enemy_pos
    elseif self.total_hurt_data.enemy_pos ~= nil then
        self.total_hurt_data.pos = self.total_hurt_data.friend_pos
    end
    if self.total_hurt_data.state == 1 then
        return
    elseif self.total_hurt_data.state == 2 then
        self.unity_anim = UIUtil.FindComponent(self.total_hurt_data.gameObject.transform, typeof(CS.UnityEngine.Animator), "ef_ui_fight_digital_Total"):Play("ef_ui_fight_Number Total",0,0)
        if self.total_hurt_data.anim_args then
            LuaTweener.StopTweener(self.total_hurt_data.anim_args)
        end
        self.total_hurt_data.anim_args = LuaTweener.UITextTo(UIUtil.FindText(self.total_hurt_data.gameObject.transform:GetChild(0),"Text"),0,self.total_hurt_data.num,0.24,1,function()
            self.total_hurt_data.anim_args = false
        end)
        if self.total_hurt_data.game_args then
            TimerManager:GetInstance():SimpleTimerStop(self.total_hurt_data.game_args)
        end
        local args = TimerManager:GetInstance():SimpleTimerArgs(0.9,function(go)
            self.total_hurt_data.state = 0
            self.total_hurt_data.game_args = false
            GameObjectPool:GetInstance():RecycleGameObject(total_hurt_text_path,go)
        end,self.total_hurt_data.gameObject,true)
        self.total_hurt_data.game_args = args
        return
    end
    self.total_hurt_data.state = 1
    GameObjectPool:GetInstance():GetGameObjectAsync(total_hurt_text_path,function(go)
        if not IsNull(go) then
            if self.total_hurt_data.state == 0 then
                GameObjectPool:GetInstance():RecycleGameObject(total_hurt_text_path,go)
                return
            end
            local ImgObj=UIUtil.FindTrans(go.transform,"ef_ui_fight_digital_Total/TEX")
            UIUtil.CommonLoadImg(UIUtil.FindImage(ImgObj),AtlasConfig.Language,"ui_dtex_Battle_013")
            self.total_hurt_data.state = 2
            local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
            local inst_trans = go.transform
            inst_trans:SetParent(layer.transform)
            inst_trans.localScale = Vector3.New(1,1,1)
            local size_delta = UIUtil.FindComponent(layer.transform,typeof(CS.UnityEngine.RectTransform)).sizeDelta
            UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform)).anchoredPosition3D =
            Vector3.New((self.total_hurt_data.pos[1] - 0.5)*size_delta[0], (self.total_hurt_data.pos[2] - 0.5)*size_delta[1], 0)
            UIUtil.FindComponent(inst_trans:GetChild(0),typeof(CS.UnityEngine.Animator)).updateMode = CS.UnityEngine.AnimatorUpdateMode.UnscaledTime
            self.total_hurt_data.anim_args = LuaTweener.UITextTo(UIUtil.FindText(inst_trans:GetChild(0),"Text"),0,self.total_hurt_data.num,0.24,1,function()
                self.total_hurt_data.anim_args = false
            end)
            local args = TimerManager:GetInstance():SimpleTimerArgs(0.9,function(go)
                self.total_hurt_data.state = 0
                self.total_hurt_data.game_args = false
                GameObjectPool:GetInstance():RecycleGameObject(total_hurt_text_path,go)
            end,go,true)
            self.total_hurt_data.game_args = args
            self.total_hurt_data.gameObject = go
        else
            self.total_hurt_data.state = 0
        end
    end)
end

local function CreateHurtPrefab(self,hurt_path,hurt_text,hurt_scale,pos)
    GameObjectPool:GetInstance():GetGameObjectAsync(hurt_path,
            function (go,go_path,hurt_text)
                if not IsNull(go) then
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
                    local inst_trans = go.transform
                    inst_trans:SetParent(layer.transform)
                    inst_trans.localScale = Vector3.New(hurt_scale,hurt_scale,hurt_scale)
                    UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform)).anchoredPosition3D = GetUIPos(self,pos,UIUtil.FindComponent(layer.transform,typeof(CS.UnityEngine.RectTransform)).sizeDelta)
                    UIUtil.FindText(inst_trans:GetChild(0),"Text").text = hurt_text
                    UIUtil.FindComponent(inst_trans:GetChild(0),typeof(CS.UnityEngine.Animator)).updateMode = CS.UnityEngine.AnimatorUpdateMode.UnscaledTime
                    local args = TimerManager:GetInstance():SimpleTimerArgs(0.6,function(go)
                        self.hurt_text[go][1] = false
                        GameObjectPool:GetInstance():RecycleGameObject(go_path,go)
                    end,go,true)
                    self.hurt_text[go] = {args,go_path}
                end
            end,hurt_path,hurt_text
    )
end

local function ShowSkillEffectName(self, pos, text)
    GameObjectPool:GetInstance():GetGameObjectAsync(skill_tip_path,
            function (go)
                if not IsNull(go) then
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
                    local inst_trans = go.transform
                    inst_trans:SetParent(layer.transform)
                    inst_trans.localScale = Vector3.New(1,1,1)
                    local oldPos = GetUIPos(self,pos,UIUtil.FindComponent(layer.transform,typeof(CS.UnityEngine.RectTransform)).sizeDelta)
                    local newPos = oldPos+Vector3.New(0,50,0)
                    UIUtil.FindText(inst_trans).text = text
                    LuaTweener.UIMoveTo(UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform)),oldPos,newPos,1.5,EaseFormula.OutQuad,function()
                        GameObjectPool:GetInstance():RecycleGameObject(skill_tip_path,go)
                    end)
                    LuaTweener.UIUnityFadeTo(UIUtil.FindText(inst_trans),0,1,0.27,EaseFormula.Linear)
                    LuaTweener.UIScaleTo(inst_trans,Vector3.New(0,0,0),Vector3.New(1.2,1.2,1.2),0.27,EaseFormula.Linear,function()
                        LuaTweener.UIScaleTo(inst_trans,Vector3.New(1.2,1.2,1.2),Vector3.New(1,1,1),0.23,EaseFormula.Linear,function()
                            LuaTweener.UIUnityFadeTo(UIUtil.FindText(inst_trans),1,0,1,EaseFormula.Linear)
                        end)

                    end)
                end
            end
    )
end

--data = {pos = all_pos[index],num = -100,type = 1}
local function CreateHurtText(self,data)
    local hurt_path = ""
    local hurt_type = 2
    local hurt_scale = 1
    local hurt_text = ""
    if data.num > 0 then
        hurt_type = 1
        if data.isCrit then
            hurt_path = crit_hurt_text_path
            hurt_scale = 1
        else
            hurt_scale = 1
            hurt_path = normal_hurt_text_path
        end
        hurt_text = DataUtil.GetTextByNum(data.num,hurt_type)
    else
        if data.isCrit  then
            hurt_type = 4
        elseif data.hurtType == 4 then
            hurt_type = 3
           -- hurt_text = DataUtil.GetTextByNum(data.num,hurt_type)
        elseif data.hurtType == 3 then
            hurt_type = 0
            --hurt_text = DataUtil.GetTextByNum(data.num,hurt_type)
        end
        hurt_text = DataUtil.GetTextByNum(data.num,hurt_type)
        if data.isCrit then
            hurt_path = crit_hurt_text_path
            hurt_scale = 1
        else
            hurt_scale = 1
            hurt_path = normal_hurt_text_path
        end
    end
    CreateHurtPrefab(self,hurt_path,hurt_text,hurt_scale,data.pos)
    if data.totalHide == 0 then
        CreateTotalHurtPrefab(self,data.totalHurt,data.playerType)
    end

--[[    if data.num < 0 then
        local pos = {data.pos[1],data.pos[2]+0.6,data.pos[3]}
        CreateHurtPrefab(self,hurt_path,hurt_type,hurt_scale,pos,data.totalNum)
    end]]

end


local function SkillStartEvent(self,data)
   -- if data.roleView.entity.playerType == BattleEnum.BattlePlayerType.MINE then

    GameObjectPool:GetInstance():GetGameObjectAsync(skill_tip_path,
            function (go)
                if not IsNull(go) then
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
                    local inst_trans = go.transform
                    inst_trans:SetParent(layer.transform)
                    inst_trans.localScale = Vector3.New(1,1,1)
                    local oldPos = GetUIPos(self,data.pos,UIUtil.FindComponent(layer.transform,typeof(CS.UnityEngine.RectTransform)).sizeDelta)
                    local newPos = oldPos+Vector3.New(0,50,0)
                    local skill_data = DataUtil.GetData("skill")
                    if skill_data[data.skillId] ~= nil then
                        UIUtil.FindText(inst_trans).text = skill_data[data.skillId].Name
                    else
                        UIUtil.FindText(inst_trans).text = "未知技能"
                    end
                    LuaTweener.UIMoveTo(UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform)),oldPos,newPos,1.5,EaseFormula.OutQuad,function()
                        GameObjectPool:GetInstance():RecycleGameObject(skill_tip_path,go)
                    end)
                    LuaTweener.UIUnityFadeTo(UIUtil.FindText(inst_trans),0,1,0.27,EaseFormula.Linear)
                    LuaTweener.UIScaleTo(inst_trans,Vector3.New(0,0,0),Vector3.New(1.2,1.2,1.2),0.27,EaseFormula.Linear,function()
                        LuaTweener.UIScaleTo(inst_trans,Vector3.New(1.2,1.2,1.2),Vector3.New(1,1,1),0.23,EaseFormula.Linear,function()
                            LuaTweener.UIUnityFadeTo(UIUtil.FindText(inst_trans),1,0,1,EaseFormula.Linear)
                        end)

                    end)
                end
            end
    )


   -- end

end


local function UpdateBloodPos(arg)
    local send_data = arg[1].blood_data[arg[2]]
    send_data.rectTrans.anchoredPosition3D = GetUIPos(arg[1],{send_data.transform.position.x,send_data.transform.position.y+send_data.offset,send_data.transform.position.z},arg[3])
end
--隐藏血条
local function HideBlood(arg)
    local send_data = arg[1].blood_data[arg[2]]
    if send_data ~= nil then
        send_data.state = 0
        if send_data.blood_game_pos_args ~= nil then
            TimerManager:GetInstance():SimpleTimerStop(send_data.blood_game_pos_args)
            send_data.blood_game_pos_args = nil
        end
        if not IsNull(send_data.blood_game) then
            GameObjectPool:GetInstance():RecycleGameObject(blood_path, send_data.blood_game)
            send_data.blood_game = nil
        end
        send_data.blood_hide_args = nil
        send_data.slider = nil
    end

   -- send_data.blood_game_args = nil
end
--血条动画
local function SliderMove(arg)
    local send_data = nil
    if arg[2] ~= nil then
        send_data = arg[1].blood_data[arg[2]]
    else
        send_data = arg[1].special_blood_data
    end
    local interval_time = Time.time - send_data.begin_time
    local temp_total_time = blood_slider_total_time
    if send_data.playType == 3 then
        temp_total_time = temp_total_time+blood_slider_between_time
    end
    if interval_time > blood_slider_time then
        if interval_time > temp_total_time then
            TimerManager:GetInstance():SimpleTimerStop(send_data.slider_args)
            if send_data.playType == 1 then
                send_data.slider.value = send_data.target
            elseif send_data.playType == 2 then
                send_data.shield_slider.value = send_data.shieldVal*send_data.shieldPer
            else
                send_data.slider.value = send_data.target
                send_data.shield_slider.value = send_data.shieldVal*send_data.shieldPer
            end

            send_data.slider_args = nil
        else
            if send_data.playType == 1 then
                send_data.slider.value = send_data.oldHp+(send_data.target - send_data.oldHp)*
                        EaseFormula:Evaluate(interval_time - blood_slider_time,temp_total_time - blood_slider_time,EaseFormula.InQuint)
            elseif send_data.playType == 2 then
                send_data.shield_slider.value = (send_data.oldShieldVal+(send_data.shieldVal - send_data.oldShieldVal)*
                        EaseFormula:Evaluate(interval_time - blood_slider_time,temp_total_time - blood_slider_time,EaseFormula.InQuint))*send_data.shieldPer
            else
                local mid_time = blood_slider_time + blood_slider_between_time
                if interval_time > mid_time then
                    send_data.slider.value = send_data.oldHp+(send_data.target - send_data.oldHp)*
                            EaseFormula:Evaluate(interval_time - mid_time,temp_total_time - mid_time,EaseFormula.InQuint)
                else
                    send_data.shield_slider.value = (send_data.oldShieldVal+(send_data.shieldVal - send_data.oldShieldVal)*
                            EaseFormula:Evaluate(interval_time - blood_slider_time,blood_slider_between_time,EaseFormula.InQuint))*send_data.shieldPer
                end
            end

        end
    end

end
--添加血条上的buff
local function AddBuff(data,prefab,parent)
    if IsNull(parent) then
        return
    end
    if data ~= nil and  not IsNull(prefab) then
        --首先检测图标有没有 没有不显示
        local skill_effect = DataUtil.GetData("skill_effect")
        local skill_effect_buff = DataUtil.GetData("skill_effect_buff")
        local result_icon = {}
        for i, v in ipairs(data) do
            if skill_effect[v.id] ~= nil then
                local id = skill_effect[v.id].DetailType
                if skill_effect_buff[id] ~= nil and skill_effect_buff[id].BuffIcon~= nil and #skill_effect_buff[id].BuffIcon>0 then
                    table.insert(result_icon,{icon = skill_effect_buff[id].BuffIcon,layer = v.layer})
                end
            end
        end
        local data_count =  #result_icon
        if data_count > 0 then
            parent.gameObject:SetActive(true)
            local child_count = parent.childCount
            local add = data_count - child_count
            for i = 1, add do
                local new_pre = GameObject.Instantiate(prefab).transform
                new_pre:SetParent(parent)
                new_pre.localScale = Vector3.New(1,1,1)
                UIUtil.FindComponent(new_pre,typeof(CS.UnityEngine.RectTransform)).anchoredPosition3D = Vector3.New(0,0,0)
                child_count = child_count+1
            end
            for i = 0, child_count - 1 do
                local child_trans = parent:GetChild(i)
                if i < data_count then
                    child_trans.gameObject:SetActive(true)
                    UIUtil.FindText(child_trans).text = math.floor(result_icon[i+1].layer)
                    UIUtil.CommonLoadImg(UIUtil.FindImage(child_trans),AtlasConfig.DynamicTex,result_icon[i+1].icon)
                else
                    child_trans.gameObject:SetActive(false)
                end
            end

        else
            parent.gameObject:SetActive(false)
        end
    else
        parent.gameObject:SetActive(false)
    end
end


local function SetShieldSlider(self,temp_data,shield_size)
    local play_type = 0
    if  temp_data.oldShieldVal ~= temp_data.shieldVal or temp_data.shieldVal > 0 then
        temp_data.shieldRect.gameObject:SetActive(true)
        temp_data.shieldRectPre.gameObject:SetActive(true)
        temp_data.pre_shield_slider.value = temp_data.shieldVal * temp_data.shieldPer
        temp_data.shield_slider.value = temp_data.oldShieldVal * temp_data.shieldPer
        if temp_data.oldShieldVal ~= temp_data.shieldVal then
            play_type = play_type+2
        end
    else
        temp_data.shieldRect.gameObject:SetActive(false)
        temp_data.shieldRectPre.gameObject:SetActive(false)
        temp_data.pre_shield_slider.value = 0
        temp_data.shield_slider.value = 0
    end

    return play_type
end


local function FixBloodMinPercentVal(val)
    if val > 0 then
        if val > 1 then
            val = 1
        end
        return math.max(val,0.1)
    else
        return val
    end
end
--刷新血条水晶
local function RefreshBloodCry(cry_trans,cry_type,cry_num,cry_max,cry_init_max)
    local function GetCryIconName(type)
        if type == 1 then
            return "ui_t_c2_327"
        elseif type == 2 then
            return "ui_t_c2_329"
        elseif type == 3 then
            return "ui_t_c2_331"
        else
            return "ui_t_c2_490"
        end
    end

    local function GetCryFrameName(type)
        if type == 1 then
            return "ui_t_c2_326"
        elseif type == 2 then
            return "ui_t_c2_328"
        elseif type == 3 then
            return "ui_t_c2_330"
        else
            return "ui_t_c2_489"
        end
    end
    local function SetCryImg(child_trans,cry_type,cry_num,index,cry_max)
        child_trans.gameObject:SetActive(true)
        UIUtil.CommonLoadImg(child_trans,AtlasConfig.DynamicTex,GetCryFrameName(cry_type))
        local icon_trans = child_trans:GetChild(0)
        local normal_effect = child_trans:GetChild(1)
        local special_effect = child_trans:GetChild(2)
        if index < cry_num then
            icon_trans.gameObject:SetActive(true)
            UIUtil.CommonLoadImg(icon_trans,AtlasConfig.DynamicTex,GetCryIconName(cry_type))
            normal_effect.gameObject:SetActive(cry_num < cry_max and cry_num >= 0.5 * cry_max)
            special_effect.gameObject:SetActive(cry_num >= cry_max)
        else
            icon_trans.gameObject:SetActive(false)
            normal_effect.gameObject:SetActive(false)
            special_effect.gameObject:SetActive(false)
        end
    end
    if not IsNull(cry_trans) and cry_max > 0 then
        cry_trans.gameObject:SetActive(true)
        local child_count = cry_trans.childCount
        if cry_max > child_count then
            --获取第一个 并且复制
            local pre = cry_trans:GetChild(0).gameObject
            local num = cry_max - child_count
            for i = 1, num do
                local inst = CS.UnityEngine.GameObject.Instantiate(pre)
                inst.transform:SetParent(cry_trans)
                inst.transform.localScale = Vector3.one
                inst.transform.localEulerAngles = Vector3.zero
                inst.transform.localPosition = Vector3.zero
                child_count = child_count + 1
            end
        end
        for i = 0, child_count - 1 do
            local child_trans = cry_trans:GetChild(i)
            if i < cry_init_max then
                SetCryImg(child_trans,cry_type,cry_num,i,cry_max)
            elseif i < cry_max then
                SetCryImg(child_trans,4,cry_num,i,cry_max)
            else
                child_trans.gameObject:SetActive(false)
            end
        end
    else
        cry_trans.gameObject:SetActive(false)
    end
end
--切换血条层级
local function SwitchBloodLayer(self,finial_data,oldHp)
    if oldHp>finial_data.target then
        finial_data.slider = finial_data.slider_game
        finial_data.pre_slider = finial_data.pre_slider_game
    else
        finial_data.slider = finial_data.pre_slider_game
        finial_data.pre_slider = finial_data.slider_game
    end
    if finial_data.oldShieldVal > finial_data.shieldVal then
        finial_data.shield_slider = finial_data.shield_slider_game
        finial_data.pre_shield_slider = finial_data.pre_shield_slider_game
    else
        finial_data.shield_slider = finial_data.pre_shield_slider_game
        finial_data.pre_shield_slider = finial_data.shield_slider_game
    end
end

--显示血条
local function ShowBlood(self,blood_arg)
    --Logger.Log(string.format(" id = %s ,hp = %s, pox= %s,%s,%s",blood_arg.id,blood_arg.val,blood_arg.pos[1],blood_arg.pos[2],blood_arg.pos[3]))
    if blood_arg == nil then
        return
    end
    local temp_id = math.floor(blood_arg.id).."_"..math.floor(blood_arg.team)
    if not blood_arg.isShow then
        local hide_data = self.blood_data[temp_id]
        if hide_data ~= nil then
            if Time.time >= hide_data.hideTime then
                HideBlood({self,temp_id})
            else
                if hide_data.blood_hide_args ~= nil then
                    TimerManager:GetInstance():SimpleTimerStop(hide_data.blood_hide_args)
                    hide_data.blood_hide_args = nil
                end
                hide_data.blood_hide_args =  TimerManager:GetInstance():SimpleTimerArgs(hide_data.hideTime - Time.time,HideBlood,{self,temp_id},true)
            end
        end
        return
    end
    local temp_data = self.blood_data[temp_id]
    if temp_data == nil then
        temp_data = {target = 1,state = 0,transform = false,effects = false,
                     offset = false,shieldPer = 1,shieldVal = 0,playType = 0,oldHp = 0,oldShieldVal = 0,hideTime = 0,cry_max = 0,cry_num = 0,cry_type = 0,playerType = 0}
        self.blood_data[temp_id] = temp_data
    end
    if temp_data.blood_hide_args ~= nil then
        TimerManager:GetInstance():SimpleTimerStop(temp_data.blood_hide_args)
        temp_data.blood_hide_args = nil
    end
    if blood_arg.cry_type > 0 and blood_arg.cry_max > 0 then
        temp_data.cry_type = blood_arg.cry_type
        temp_data.cry_max = blood_arg.cry_max
        temp_data.cry_num = blood_arg.cry_num
        temp_data.cry_init_max = blood_arg.cry_init_max
    end
    temp_data.playerType = blood_arg.playerType
    temp_data.offset = blood_arg.offset
    temp_data.effects = blood_arg.effects
    temp_data.team = blood_arg.team

    if blood_arg.shieldPer > 0 then
        temp_data.shieldPer = blood_arg.shieldPer
    end
    temp_data.shieldVal = FixBloodMinPercentVal(blood_arg.shieldVal)
    temp_data.target = FixBloodMinPercentVal(blood_arg.val)
    temp_data.oldHp = FixBloodMinPercentVal(blood_arg.oldVal)
    temp_data.oldShieldVal = FixBloodMinPercentVal(blood_arg.oldShield)
    temp_data.transform = blood_arg.transform
    --state 0--代表没有 1代表加载中  2--使用中
    if temp_data.state == 0 then
        temp_data.state = 1
    elseif temp_data.state == 1 then
        return
    elseif temp_data.state == 2 then
        temp_data.begin_time = Time.time
        SwitchBloodLayer(self,temp_data,temp_data.oldHp)
        --重置血条动画时间
        temp_data.oldHp = temp_data.slider.value
        temp_data.pre_slider.value = temp_data.target
        if temp_data.shieldPer > 0 then
            temp_data.oldShieldVal = temp_data.shield_slider.value/temp_data.shieldPer
        end
        temp_data.playType = SetShieldSlider(self,temp_data,shieldSize)
        if temp_data.oldHp ~= temp_data.target then
            temp_data.playType = temp_data.playType + 1
        end
        if temp_data.slider_args == nil and temp_data.playType > 0 then
            temp_data.slider_args =  TimerManager:GetInstance():SimpleTimerArgs(1,SliderMove,{self,temp_id},false,true)
        end

        --血条消失时间
        temp_data.hideTime = blood_show_time+blood_slider_total_time+Time.time
        if temp_data.playType == 3 then
            temp_data.hideTime = temp_data.hideTime + blood_slider_between_time
        end
        RefreshBloodCry(temp_data.blood_game.transform:Find("Cry"),temp_data.cry_type,temp_data.cry_num,temp_data.cry_max,temp_data.cry_init_max)
            --temp_data.blood_game_args = TimerManager:GetInstance():SimpleTimerArgs(blood_show_time,HideBlood,{self,temp_id},true)
        return
    end
    GameObjectPool:GetInstance():GetGameObjectAsync(blood_path,
            function (go,oldHp)
                --Logger.Log("添加血条成功  "..temp_id)
                local finial_data = self.blood_data[temp_id]
                if not IsNull(go) then
                    go.name = temp_id
                    finial_data.state = 2
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.BackgroudLayer.Name)
                    local inst_trans = go.transform
                    inst_trans:SetParent(layer.transform)
                    inst_trans.localScale = Vector3.New(1,1,1)
                    finial_data.rectTrans = UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform))
                    if finial_data.playerType == BattleEnum.BattlePlayerType.ENEMY then
                        UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"UIBattleBloodPre/Image"),AtlasConfig.DynamicTex,"ui_t_c2_156")
                        UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"UIBattleBlood/Image"),AtlasConfig.DynamicTex,"ui_t_c2_158")
                    else
                        UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"UIBattleBloodPre/Image"),AtlasConfig.DynamicTex,"ui_t_c2_162")
                        UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"UIBattleBlood/Image"),AtlasConfig.DynamicTex,"ui_t_c2_156")
                    end
                    local temp_size = UIUtil.FindComponent(layer.transform,typeof(CS.UnityEngine.RectTransform)).sizeDelta
                    finial_data.rectTrans.anchoredPosition3D = GetUIPos(self,{finial_data.transform.position.x,finial_data.transform.position.y+finial_data.offset,finial_data.transform.position.z}
                    ,temp_size)
                    finial_data.shieldRect =  UIUtil.FindComponent(inst_trans, typeof(CS.UnityEngine.RectTransform),"UIShield")
                    finial_data.shieldRectPre =  UIUtil.FindComponent(inst_trans, typeof(CS.UnityEngine.RectTransform),"UIShieldPre")

                    finial_data.slider_game = UIUtil.FindSlider(inst_trans,"UIBattleBlood")
                    finial_data.pre_slider_game = UIUtil.FindSlider(inst_trans,"UIBattleBloodPre")
                    finial_data.shield_slider_game = UIUtil.FindSlider(inst_trans,"UIShield")
                    finial_data.pre_shield_slider_game = UIUtil.FindSlider(inst_trans,"UIShieldPre")
                    SwitchBloodLayer(self,finial_data,oldHp)
                    finial_data.pre_slider.value = finial_data.target
                    finial_data.blood_game = go
                    AddBuff(finial_data.effects,UIUtil.FindTrans(inst_trans,"item"),UIUtil.FindTrans(inst_trans,"BuffGrid"))
                    finial_data.blood_game_pos_args = TimerManager:GetInstance():SimpleTimerArgs(1,UpdateBloodPos,{self,temp_id,temp_size},false,true)
                    RefreshBloodCry(finial_data.blood_game.transform:Find("Cry"),finial_data.cry_type,finial_data.cry_num,finial_data.cry_max,finial_data.cry_init_max)

                    finial_data.playType = SetShieldSlider(self,finial_data,shieldSize)
                    finial_data.slider.value = oldHp
                    finial_data.begin_time = Time.time
                    if oldHp ~= finial_data.target then
                        finial_data.playType = finial_data.playType + 1
                    end
                    if finial_data.playType > 0 then
                        finial_data.slider_args =  TimerManager:GetInstance():SimpleTimerArgs(1,SliderMove,{self,temp_id},false,true)
                    end
                    --血条消失时间
                    finial_data.hideTime = blood_show_time+blood_slider_total_time+Time.time
                    if finial_data.playType == 3 then
                        finial_data.hideTime = finial_data.hideTime + blood_slider_between_time
                    end
                        --finial_data.blood_game_args = TimerManager:GetInstance():SimpleTimerArgs(blood_show_time,HideBlood,{self,temp_id},true)


                else
                    finial_data.state = 0
                end
            end,temp_data.oldHp
    )
end

local function ShowSpecialBlood(self,blood_arg)
    if not blood_arg.isShow then
        if self.special_blood_data ~= nil then
            if not IsNull(self.special_blood_data.blood_game) then
                GameObjectPool:GetInstance():RecycleGameObject(blood_special_path,self.special_blood_data.blood_game)
                self.special_blood_data.blood_game = nil
            end
            if self.special_blood_data.slider_args ~= nil then
                TimerManager:GetInstance():SimpleTimerStop(self.special_blood_data.slider_args)
                self.special_blood_data.slider_args = nil
            end
            self.special_blood_data.state = 0
        end
        return
    end
    if self.special_blood_data == nil then
        self.special_blood_data = {state = 0,shieldPer = 0,shieldVal = 0,playType = 0,oldHp = 0,oldShieldVal = 0}
    end
    local img_str = BattleAssistFunction.GetHeroDataById(blood_arg.id,blood_arg.playerType).icon
    if blood_arg.shieldPer > 0 then
        self.special_blood_data.shieldPer = blood_arg.shieldPer
    end
    self.special_blood_data.shieldVal = FixBloodMinPercentVal(blood_arg.shieldVal)
    self.special_blood_data.oldShieldVal =FixBloodMinPercentVal(blood_arg.oldShield)
    self.special_blood_data.oldHp = FixBloodMinPercentVal(blood_arg.oldVal)
    self.special_blood_data.target = FixBloodMinPercentVal(blood_arg.val)
    if self.special_blood_data.state == 1 then
        return
    elseif self.special_blood_data.state == 2 then
        self.special_blood_data.begin_time = Time.time
        --重置血条动画时间
        UIUtil.CommonLoadImg(self.special_blood_data.img,AtlasConfig.DynamicTex,img_str)
        self.special_blood_data.oldHp = self.special_blood_data.slider.value
        self.special_blood_data.pre_slider.value = self.special_blood_data.target
        if self.special_blood_data.shieldPer > 0 then
            self.special_blood_data.oldShieldVal = self.special_blood_data.shield_slider.value/self.special_blood_data.shieldPer
        end
        self.special_blood_data.playType = SetShieldSlider(self,self.special_blood_data,specialShieldSize)
        if self.special_blood_data.oldHp ~= self.special_blood_data.target then
            self.special_blood_data.playType = self.special_blood_data.playType + 1
        end
        if self.special_blood_data.slider_args == nil and self.special_blood_data.playType > 0 then
            self.special_blood_data.slider_args =  TimerManager:GetInstance():SimpleTimerArgs(1,SliderMove,{self},false,true)
        end
        return
    end
    self.special_blood_data.state = 1
    GameObjectPool:GetInstance():GetGameObjectAsync(blood_special_path,
            --由于oldhp一直再变化  所有需要用传参的形式
            function (go,oldHp)
                --Logger.Log("添加血条成功  "..temp_id)
                local finial_data = self.special_blood_data
                if not IsNull(go) then
                    finial_data.state = 2
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.BackgroudLayer.Name)
                    local inst_trans = go.transform
                    UIUtil.SetUIParent(inst_trans,layer.transform)
                    finial_data.shieldRect =  UIUtil.FindComponent(inst_trans, typeof(CS.UnityEngine.RectTransform),"UIShield")
                    finial_data.shieldRectPre =  UIUtil.FindComponent(inst_trans, typeof(CS.UnityEngine.RectTransform),"UIShieldPre")
                    finial_data.slider = UIUtil.FindSlider(inst_trans,"UIBattleBlood")
                    finial_data.pre_slider = UIUtil.FindSlider(inst_trans,"UIBattleBloodPre")
                    finial_data.shield_slider = UIUtil.FindSlider(inst_trans,"UIShield")
                    finial_data.pre_shield_slider = UIUtil.FindSlider(inst_trans,"UIShieldPre")
                    finial_data.img = inst_trans:Find("Head/Icon")
                    UIUtil.CommonLoadImg(finial_data.img,AtlasConfig.DynamicTex,img_str)
                    finial_data.pre_slider.value = finial_data.target
                    finial_data.blood_game = go
                    finial_data.playType = SetShieldSlider(self,finial_data,specialShieldSize)
                    finial_data.slider.value = oldHp
                    finial_data.begin_time = Time.time
                    if oldHp ~= finial_data.target then
                        finial_data.playType = finial_data.playType + 1
                    end
                    if finial_data.playType > 0 then
                        finial_data.slider_args =  TimerManager:GetInstance():SimpleTimerArgs(1,SliderMove,{self},false,true)
                    end
                else
                    finial_data.state = 0
                end
            end,self.special_blood_data.oldHp
    )
end

--显示所有血条
local function ShowAllBlood(self)
    for i, v in ipairs(self.battleView.roles) do
        ShowBlood(self,v:GetBloodData())
    end
end

local function RefreshAllBloodCry(self,friend_list,enemy_list)
    for i, v in ipairs(self.battleView.roles) do
        local temp_data = self.blood_data[math.floor(v.entity.entityId).."_"..math.floor(v.entity.teamId)]
        local cry_list = enemy_list
        if v.entity.playerType == BattleEnum.BattlePlayerType.MINE then
            cry_list = friend_list
        end
        if temp_data ~= nil and cry_list[temp_data.cry_type] ~= nil and not IsNull(temp_data.blood_game) then
            RefreshBloodCry(temp_data.blood_game.transform:Find("Cry"),temp_data.cry_type,cry_list[temp_data.cry_type],temp_data.cry_max,temp_data.cry_init_max)
        end
    end
end

local function HeroBloodData(self,data,type)
    ShowBlood(self,data)
end

local function HideTeamTip(self,type)
    if self.team_tip_game ~= nil then
        GameObjectPool:GetInstance():RecycleGameObject(self.team_tip_path,self.team_tip_game)
        self.team_tip_game = nil
        self.team_tip_path = nil
        if self.team_move_flag ~= nil then
            LuaTweener.StopTweener(self.team_move_flag)
            self.team_move_flag = nil
        end
        if self.team_alha_flag ~= nil then
            LuaTweener.StopTweener(self.team_alha_flag)
            self.team_alha_flag = nil
        end
    end
    if self.team_game_timer ~= nil then
        TimerManager:GetInstance():SimpleTimerStop(self.team_game_timer)
        self.team_game_timer = nil
    end
    if self.round_tip_game ~= nil then
        GameObjectPool:GetInstance():RecycleGameObject(self.round_tip_path,self.round_tip_game)
        self.round_tip_game = nil
        self.round_tip_path = nil
    end
    --1代表ui回合结束
    --if type == 1 then
    --    DropCryFly(self,true)
    --end
end

local function TeamAttrSet(self,go,type)
    if self.team_game_timer ~= nil then
        TimerManager:GetInstance():SimpleTimerStop(self.team_game_timer)
        self.team_game_timer = nil
    end
    local inst_trans = go.transform
    if self.team_move_flag ~= nil then
        LuaTweener.StopTweener(self.team_move_flag)
        self.team_move_flag = nil
    end
    if self.team_alha_flag ~= nil then
        LuaTweener.StopTweener(self.team_alha_flag)
        self.team_alha_flag = nil
    end
    local old_pos = nil
    local new_pos = nil
    local temp_rect = nil
    local img = nil
    if type == 1 then
        UIUtil.FindTrans(inst_trans,"Enemy").gameObject:SetActive(false)
        UIUtil.FindTrans(inst_trans,"Friend").gameObject:SetActive(true)
        temp_rect = UIUtil.FindComponent(inst_trans, typeof(CS.UnityEngine.RectTransform),"Friend")
        old_pos =  Vector3.New(633,312,0)
        new_pos = Vector3.New(0,0,0)
        temp_rect.anchoredPosition3D = old_pos
        img = UIUtil.FindImage(inst_trans, "Friend/Friend_img")
    else
        UIUtil.FindTrans(inst_trans,"Enemy").gameObject:SetActive(true)
        UIUtil.FindTrans(inst_trans,"Friend").gameObject:SetActive(false)
        temp_rect = UIUtil.FindComponent(inst_trans, typeof(CS.UnityEngine.RectTransform),"Enemy")
        old_pos =  Vector3.New(633,312,0)
        new_pos = Vector3.New(0,0,0)
        temp_rect.anchoredPosition3D = old_pos
        img = UIUtil.FindImage(inst_trans, "Enemy/Enemy_Img")
    end
    local col = img.color
    col.a = 0
    img.color = col
    self.team_move_flag = LuaTweener.UIMoveTo(temp_rect,old_pos,new_pos,0.35,EaseFormula.InOutQuad,function()
        self.team_move_flag = nil
        self.team_alha_flag = LuaTweener.UIUnityFadeTo(img,0,1,0.5,EaseFormula.InOutQuad,function()
            self.team_alha_flag = nil
        end)
    end)
    self.team_game_timer =  TimerManager:GetInstance():SimpleTimerArgs(3,function()
        self.team_game_timer = nil
        self.team_move_flag = LuaTweener.UIMoveTo(temp_rect,new_pos,old_pos,0.2,EaseFormula.InOutQuad,function()
            self.team_move_flag = nil
            HideTeamTip(self)
        end)
    end,nil,true)
end

local function ShowTeamTip(self,type)

    if self.team_tip_game ~= nil then
        TeamAttrSet(self,self.team_tip_game,type)
        return
    end
    GameObjectPool:GetInstance():GetGameObjectAsync(battle_team_tip,function(go)
        if not IsNull(go) then
            self.team_tip_game = go
            local inst_trans = go.transform
            local layer =  UIManager:GetInstance():GetLayer(UILayers.BackgroudLayer.Name)
            UIUtil.SetUIParent(inst_trans,layer.transform)
            local Enemy=UIUtil.FindTrans(inst_trans,"Enemy/Enemy_Img")
            UIUtil.CommonLoadImg(UIUtil.FindImage(Enemy),AtlasConfig.Language,"ui_t_c2_142")
            local Friend=UIUtil.FindTrans(inst_trans,"Friend/Friend_img")
            UIUtil.CommonLoadImg(UIUtil.FindImage(Friend),AtlasConfig.Language,"ui_t_c2_141")
            self.team_tip_path = battle_team_tip
            TeamAttrSet(self,go,type)
        end
    end)
end

local function ShowRoundTip(self,type,round)
    local team_path = enemy_team_tip_path
    if type == 1 then
        team_path = friend_team_tip_path
    end
    GameObjectPool:GetInstance():GetGameObjectAsync(team_path,function(go)
        if not IsNull(go) then
            self.round_tip_game = go
            local inst_trans = go.transform
            local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
            UIUtil.SetUIParent(inst_trans,layer.transform)
            self.round_tip_path = team_path
            UIUtil.FindText(inst_trans,"root/Round").text = "回合 <size=130>"..round.."</size>"
            LJAudioManger:GetInstance():PlayVoice("UI_BattleTeamTip_01")
        end
    end)
end


local function HideBattleUIByType(self,type)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_UI_HIDE,type)
end

local function SelectSkillCallBack(self,...)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_SELECT_SKILL_BACK,...)
end

local function CrystalChange(self,data)
    --if self.hide_battle_ui then
    --    --BattleUIData:GetInstance():SaveCrystalChange(data)
    --else
    --    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE,data)
    --end
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE,data)
end

local function SwitchHero(self,data)
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_BATTLE_SWITCH_ROLE,data)
end

local function EmBattleStart(self,roles,battleCache)
    self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYEMBATTLETOSTART,roles,battleCache)
    --if BattleFieldManager:GetInstance().fightId ~= nil and BattleFieldManager:GetInstance().fightId ~= 0 then
    --    SdkManager:GetInstance().DataReport:MissionCompleted("关卡"..BattleFieldManager:GetInstance().fightId)
    --end
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIEmBattle)


end

local function PlayBattleEnemyShowEffect(self,roles)
    if self.battleArea == nil then
        self.battleArea =CS.UnityEngine.GameObject.Find("BattleArea")
    end
    local all_effect = {}
    for k,v in ipairs(roles) do
        GameObjectPool:GetInstance():GetGameObjectAsync(enemy_role_effect_show_path,function (go)
            if not IsNull(go) then
                local position=BattleAssistFunction.GetRolePosition(BattleFieldManager:GetInstance().sceneConfigId,BattleEnum.BattlePlayerType.ENEMY,v.position+1)
                go.transform:SetParent(self.battleArea.transform)
                go.transform.localPosition=position;
                table.insert(all_effect,{game = go,path = enemy_role_effect_show_path});
            end
        end)
    end
    TimerManager:GetInstance():SimpleTimerArgs(1.5,function()
        for i, v in ipairs(all_effect) do
            if not IsNull(v.game) then
                GameObjectPool:GetInstance():RecycleGameObject(v.path,v.game)
            end
        end
    end,nil,true)
end

local function PlayBattleBeginEffect(self)
    if self.battleArea == nil then
        self.battleArea =CS.UnityEngine.GameObject.Find("BattleArea")
    end
    --添加消失光效
    local all_effect = {}
    for i = 1, 3 do
        GameObjectPool:GetInstance():GetGameObjectAsync(jlr_circle_end_path,function (go)
            if not IsNull(go) then
                local position=BattleAssistFunction.GetRolePosition(BattleFieldManager:GetInstance().sceneConfigId,BattleEnum.BattlePlayerType.MINE,i);
                go.transform:SetParent(self.battleArea.transform)
                go.transform.localPosition=position;
                table.insert(all_effect,{game = go,path = jlr_circle_end_path})
            end
        end)
        GameObjectPool:GetInstance():GetGameObjectAsync(shl_circle_end_path,function (go)
            if not IsNull(go) then
                local position=BattleAssistFunction.GetSummonPosition(BattleFieldManager:GetInstance().sceneConfigId,BattleEnum.BattlePlayerType.MINE,i);
                go.transform:SetParent(self.battleArea.transform)
                go.transform.localPosition=position;
                table.insert(all_effect,{game = go,path = shl_circle_end_path})
            end
        end)
        GameObjectPool:GetInstance():GetGameObjectAsync(role_effect_show_path,function (go)
            if not IsNull(go) then
                local position=BattleAssistFunction.GetSummonPosition(BattleFieldManager:GetInstance().sceneConfigId,BattleEnum.BattlePlayerType.MINE,i);
                go.transform:SetParent(self.battleArea.transform)
                go.transform.localPosition=position;
                table.insert(all_effect,{game = go,path = role_effect_show_path})
            end
        end)
    end
    TimerManager:GetInstance():SimpleTimerArgs(1,function()
        for i, v in ipairs(all_effect) do
            GameObjectPool:GetInstance():RecycleGameObject(v.path,v.game)
        end
    end,nil,true)
end

local function RoundUIFinish(self,type,auto)
    if type == 1 then
        self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYBATTLESTART,self.save_select_skill_order,type,auto)
    else
        self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYBATTLESTART,nil,type,auto)
    end

end
--检测效果是否满足条件
local function CheckMeetCondition(self,data,role)
    local function CheckConById(type,val)
        local result = false
        if type == 123 then --自身带有特定buff时
            if role:GetSkillEffectById(val[2]) ~= nil then
                result = true
            end
        elseif type == 124 then --自身濒死时
            if role.hp == 1 then
                result = true
            end
        elseif type == 127 then -- 生命值高于
            if role.currentHp > val[2] then
                result = true
            end
        elseif type == 128 then -- 生命值低于
            if role.currentHp < val[2] then
                result = true
            end
        elseif type == 129 then
            if (self.battlePlayer.oneBattle.round + 1) / 2 % 2 == 1 then -- 奇数回合时
                result = true
            end
        elseif type == 130 then
            if (self.battlePlayer.oneBattle.round + 1) / 2 % 2 == 0 then -- 偶数回合时
                result = true
            end
        elseif type == 142 then -- 寄灵人为专属寄灵人
            local mainRole = role.group.mainRole
            local guardianRole = role.group.guardianRole
            if mainRole ~= nil and guardianRole ~= nil then
                local guardianRoleExc = DataUtil.GetData("card")[guardianRole.entityId].ExclusiveGuard
                if guardianRoleExc ~= nil then
                    for k, v in pairs(guardianRoleExc) do
                        if v == mainRole.entityId then
                            result = true
                            break
                        end
                    end
                end
            end
        elseif type == 143 then -- 角色同一回合中第几个行动
            if #self.save_select_skill_order == val[2] - 1 or (self.save_select_skill_order[val[2]] ~= nil and self.save_select_skill_order[val[2]][1] == role.entityId) then
                result = true
            end
        elseif type == 146 then -- 回合内行动多余n次
            if #self.save_select_skill_order > val[2] then
                result = true
            end
        elseif type == 147 then -- 有正面效果
            for k, v in pairs(role.effects) do
                local effectData = DataUtil.GetData("skill_effect")[v.effectId]
                if effectData.SubType == 1 then
                    result = true
                    break
                end
            end
        elseif type == 148 then -- 有负面效果
            for k, v in pairs(role.effects) do
                local effectData = DataUtil.GetData("skill_effect")[v.effectId]
                if effectData.SubType == 2 then
                    result = true
                    break
                end
            end
        elseif type == 149 then -- 敌方x颜色水晶多于m个
            if self.battlePlayer.player2.Crytals[val[2]] > val[3] then
                result = true
            end
        elseif type == 150 then -- 敌方x颜色水晶少于m个
            if self.battlePlayer.player2.Crytals[val[2]] < val[3] then
                result = true
            end
        elseif type == 151 then -- 己方x颜色水晶多于m个
            if self.battlePlayer.player1.Crytals[val[2]] > val[3] then
                result = true
            end
        elseif type == 152 then -- 己方x颜色水晶少于m个
            if self.battlePlayer.player1.Crytals[val[2]] < val[3] then
                result = true
            end
        elseif type == 155 then -- 技能第几位释放
            if #self.save_select_skill_order == val[2] - 1 then
                result = true
            end
        end
        return result
    end
    if data.ConId ~= nil then
        for i = 1, 3 do
            if data.ConId[i] ~= nil then
                if not CheckConById(data.ConId[i],data.ConParam[i]) then
                    return false
                end
            end
        end
    end
    return true
end

local function SelectSkill(self,data,heroType,enemyCry,selfCry)
    local cryChangeMine = { reduce = {}, add = {} }
    for i, v in pairs(data[4]) do
        if i > 0 then
            cryChangeMine.reduce[i] = v
        end
    end
    local cryChangeEnemy = { add = {} }
    local cry_type = -1
    local isSuccess = 0
    if data[3] then
        --等技能图标动效播完之后在刷新守护灵数据
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_BATTLE_SWITCH_ROLE,{old = data[1],new = self.battlePlayer.attackPlayer:GetGuardById(data[1])})
    else
        local role = self.battlePlayer.attackPlayer:GetRoleById(data[1])
        local battle_skill = role:GetSkillById(data[2])
        local all_skill = DataUtil.GetData("skill")
        if all_skill[battle_skill.skillId] ~= nil then
            local all_effect = DataUtil.GetData("skill_effect")
            local effects = all_skill[battle_skill.skillId].lvs[battle_skill.level][battle_skill.breakLevel].Effects
            for i, v in ipairs(effects) do
                if all_effect[v.id] ~= nil and all_effect[v.id].Type == 3 then
                    --额外效果
                    if CheckMeetCondition(self,all_effect[v.id].lvs[v.lv],role) then
                        if all_effect[v.id].DetailType == 3001 then --获得水晶
                            if all_effect[v.id].lvs[v.lv] ~= nil then
                                local type_val = all_effect[v.id].lvs[v.lv].Value
                                local crystal_type = type_val[1]
                                local crystal_num = type_val[2]
                                if cryChangeMine.add[crystal_type] then
                                    cryChangeMine.add[crystal_type] = cryChangeMine.add[crystal_type] +  crystal_num
                                else
                                    cryChangeMine.add[crystal_type] =crystal_num
                                end
                            end
                            isSuccess = 1
                            cry_type = 3001
                        elseif all_effect[v.id].DetailType == 3006 then
                            if all_effect[v.id].lvs[v.lv] ~= nil then
                                local crystal_num = all_effect[v.id].lvs[v.lv].Value[2]
                                if cryChangeMine.add[heroType] then
                                    cryChangeMine.add[heroType] = cryChangeMine.add[heroType] +  crystal_num
                                else
                                    cryChangeMine.add[heroType] =crystal_num
                                end
                            end
                            isSuccess = 1
                            cry_type = 3001
                        elseif all_effect[v.id].DetailType == 3002 then --削减敌方水晶
                            --判断敌方水晶是否足够
                            if all_effect[v.id].lvs[v.lv] ~= nil then
                                local type_val = all_effect[v.id].lvs[v.lv].Value
                                local crystal_type = type_val[1]
                                local crystal_num = type_val[2]
                                if enemyCry[crystal_type] and enemyCry[crystal_type] > 0 then
                                    if enemyCry[crystal_type] < crystal_num then
                                        crystal_num = enemyCry[crystal_type]
                                    end
                                    if cryChangeEnemy.add[crystal_type] then
                                        cryChangeEnemy.add[crystal_type] = cryChangeEnemy.add[crystal_type] -  crystal_num
                                    else
                                        cryChangeEnemy.add[crystal_type] = -crystal_num
                                    end
                                    isSuccess = 1
                                    cry_type = 3002
                                else
                                    cryChangeEnemy.add[crystal_type] = 0
                                    isSuccess = 0
                                    cry_type = 3002
                                end
                            end
                        elseif all_effect[v.id].DetailType == 3003 then --偷取敌方水晶
                            if all_effect[v.id].lvs[v.lv] ~= nil then
                                local type_val = all_effect[v.id].lvs[v.lv].Value
                                local crystal_type = type_val[1]
                                local crystal_num = type_val[2]
                                if enemyCry[crystal_type] and enemyCry[crystal_type] > 0 then
                                    if enemyCry[crystal_type] < crystal_num then
                                        crystal_num = enemyCry[crystal_type]
                                    end
                                    if cryChangeEnemy.add[crystal_type] then
                                        cryChangeEnemy.add[crystal_type] = cryChangeEnemy.add[crystal_type] - crystal_num
                                    else
                                        cryChangeEnemy.add[crystal_type] = -crystal_num
                                    end
                                    if cryChangeMine.add[crystal_type] then
                                        cryChangeMine.add[crystal_type] = cryChangeMine.add[crystal_type] +  crystal_num
                                    else
                                        cryChangeMine.add[crystal_type] =crystal_num
                                    end
                                    isSuccess = 1
                                    cry_type = 3003
                                else
                                    cryChangeMine.add[crystal_type] = 0
                                    cryChangeEnemy.add[crystal_type] = 0
                                    isSuccess = 0
                                    cry_type = 3003
                                end
                            end
                        end
                    end
                end
            end
            -- 专属武器技能效果，消耗全部水晶
            if battle_skill.effectId > 0 and all_effect[battle_skill.effectId].DetailType == 1015 then
                cryChangeMine.reduce[heroType] = selfCry[heroType]
            end
        end
    end
    SelectSkillCallBack(self,data[1],data[2],data[3],1)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE,{ cryChangeMine, cryChangeEnemy, cry_type, isSuccess })
    table.insert(self.save_select_skill_order,{data[1],data[2],data[3],data[4],cryChangeMine,cryChangeEnemy})
    --self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYSELECTSKILL,data)
    --播放特效
    local roleView = self.battleView:GetRoleViewById(self.battlePlayer.attackPlayer.Id,data[1])
    if roleView ~= nil then
        roleView:Play( BattleRoleView.AnimName_Name_Idle2)
        GameObjectPool:GetInstance():GetGameObjectAsync(select_skill_effect_path,function (go)
            if not IsNull(go) then
                go.transform.localPosition=roleView.transform.position;
                TimerManager:GetInstance():SimpleTimerArgs(1.5,function()
                    if not IsNull(go) then
                        GameObjectPool:GetInstance():RecycleGameObject(select_skill_effect_path,go)
                    end
                end,nil,true)
            end
        end)
    end
end

local function CancelSelectSkill(self,index)
    local function CrystalInvert(crystal)
        local result = {reduce = {}, add = {} }
        if crystal.reduce ~= nil then
            for i, v in pairs(crystal.reduce) do
                result.reduce[i] = -v
            end
        end
        if crystal.add ~= nil then
            for i, v in pairs(crystal.add) do
                result.add[i] = -v
            end
        end
        return result
    end

    local function CancelSkill(skill_data)
        UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_CRYSTAL_CHANGE,{ CrystalInvert(skill_data[5]), CrystalInvert(skill_data[6]), -1, 0 })
        SelectSkillCallBack(self,skill_data[1],skill_data[2],skill_data[3],-1)
    end
    local call_skill = {}
    for i = #self.save_select_skill_order, 1,-1 do
        local cur = self.save_select_skill_order[i]
        if cur[3] then
            call_skill[cur[1]] = true
            local roleId = self.battlePlayer.attackPlayer:GetGuardById(cur[1]).entityId
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_BATTLE_SWITCH_ROLE,{old = roleId,new = self.battlePlayer.attackPlayer:GetRoleById(cur[1])})
        end
        local roleView = self.battleView:GetRoleViewById(self.battlePlayer.attackPlayer.Id,cur[1])
        if roleView ~= nil then
            roleView:Play( BattleRoleView.AnimName_Name_Idle)
        end
        table.remove(self.save_select_skill_order,i)
        if i == index then
            CancelSkill(cur)
            break
        else
            CancelSkill(cur)
        end
    end
    --召唤技能重新选择一下技能
    for i = 1, #self.save_select_skill_order do
        local cur = self.save_select_skill_order[i]
        if call_skill[cur[1]] then
            SelectSkillCallBack(self,cur[1],cur[2],cur[3],0)
        end
    end
end


local function GetComboImg(type)
    if type == 1 then
        return "ui_t_Battle_015","ui_t_Battle_012"
    elseif type == 2 then
        return "ui_t_Battle_016","ui_t_Battle_013"
    elseif type == 3 then
        return "ui_t_Battle_017","ui_t_Battle_014"
    end
end
local function HideComboTip(self)
    GameObjectPool:GetInstance():RecycleGameObject(combo_path,self.combo_data.game)
    self.combo_data.state = 0
    self.combo_data.game = nil
    self.combo_data.args = false
end
local function SetComboImg(self,inst_trans)
    local bg_img,num_img = GetComboImg(self.combo_data.type)
    local card_data = BattleAssistFunction.GetHeroDataById(self.combo_data.id,self.combo_data.teamId)
    if card_data ~= nil then
        UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"SkillIconImg"),AtlasConfig.DynamicTex,card_data.icon)
    end
    UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"BgImg"),AtlasConfig.DynamicTex,bg_img)
    UIUtil.CommonLoadImg(UIUtil.FindTrans(inst_trans,"NumImg"),AtlasConfig.DynamicTex,num_img)
end
--连接提示
local function ComboTip(self,data)
    if self.combo_data == nil then
        self.combo_data = {state = 0,tiemr = false,type = 0,game = false,args = false,id = 0,teamId = 0}
    end
    self.combo_data.type = data.count
    self.combo_data.id = data.entityId
    self.combo_data.teamId = data.teamId
    if self.combo_data.state == 1 then
        return
    elseif self.combo_data.state == 2 then
        if self.combo_data.args then
            TimerManager:GetInstance():SimpleTimerStop(self.combo_data.args)
        end
        SetComboImg(self,self.combo_data.game.transform)
        self.combo_data.args = TimerManager:GetInstance():SimpleTimerArgs(3,HideComboTip,self,true)
        return
    end
    self.combo_data.state = 1
    GameObjectPool:GetInstance():GetGameObjectAsync(combo_path,
            function (go)
                if not IsNull(go) then
                    local ImgObj=UIUtil.FindTrans(go.transform,"DesImg")
                    UIUtil.CommonLoadImg(UIUtil.FindImage(ImgObj),AtlasConfig.Language,"ui_t_Battle_011")
                    self.combo_data.state = 2
                    local layer =  UIManager:GetInstance():GetLayer(UILayers.InfoLayer.Name)
                    local inst_trans = go.transform
                    inst_trans:SetParent(layer.transform)
                    inst_trans.localScale = Vector3.New(1,1,1)
                    UIUtil.FindComponent(inst_trans,typeof(CS.UnityEngine.RectTransform)).anchoredPosition3D = Vector3.New(0,0,0)
                    SetComboImg(self,inst_trans)
                    if self.combo_data.args then
                        TimerManager:GetInstance():SimpleTimerStop(self.combo_data.args)
                    end
                    self.combo_data.game = go
                    self.combo_data.args = TimerManager:GetInstance():SimpleTimerArgs(3,HideComboTip,self,true)
                else
                    self.combo_data.state = 0
                end
            end)
end


local function QuitBattle(self)
    if self.battlePlayer ~= nil and self.battlePlayer.oneBattle.isEnd then
        UISpecial:GetInstance():UITipText(DataUtil.GetClientText(100076))
        return
    end
    NetManager:GetInstance():SendMessage(MsgIDDefine.PBFIGHT_LEAVE_FIGHT_REQUEST, nil,function(msg_obj)
        if msg_obj.OpCode==0 then
            UIManager:GetInstance():CloseWindow(UIWindowNames.UIBattleIn)
            UIManager:GetInstance():CloseWindow(UIWindowNames.UIEmBattle)
            if(BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.NORMAL) or BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.GUIDE then
                if msg_obj.Packages.costItem ~= nil and not msg_obj.Packages.costItem._is_null then
                    BackpackData:GetInstance():UpdateItemData(msg_obj.Packages.costItem.itemId,-msg_obj.Packages.costItem.count)
                end
                --第一版本 返回关卡
                --SceneManager:GetInstance():SwitchScene(SceneConfig.LevelScene)
                --第二版本 打开UI
                --UIManager:GetInstance():OpenWindow(UIWindowNames.UILevelMain)
                UIUtil.ReturnMapScene();
                --SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene);
            elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.LUHUAGULOU then
                --[[if not msg_obj.Packages.costItem._is_null then
                    BackpackData:GetInstance():UpdateItemData(msg_obj.Packages.costItem.itemId,-msg_obj.Packages.costItem.count)
                end--]]
                SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene)
            elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.SOLO_BOSS then
                SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene)
            elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.TEACHING then
                SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene)
            elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.SOLO_ARENA then
                SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene)
                --TimerManager:GetInstance():SimpleTimerArgs(1, function ()
                --ArenaData:GetInstance():OpenArena()
                --ArenaData:GetInstance():OpenArenaOne()
                --end ,self,true)
            elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.CACODEMON then
                SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene)
            else
                SceneManager:GetInstance():SwitchScene(SceneConfig.HomeScene)
            end

        end
    end)
end

local function BackRoleData(self,data)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_BACK_ROLE_DATA,data)
end

local function GetRoleData(self,team,id)
    self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYGETROLEDATA,team,id)
end

local function BattleEndBegin(self)
    ClearBlood(self)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBATTLE_PLAY_CRY_ANIM,false)
    self:RemoveDataListener()
end

local function BattleEnd(self,data)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIBattleIn)
    local BattleID=BattleFieldManager:GetInstance().fightId
    --记录下 教学关卡的次数
    UserData:GetInstance():SetTeachData(BattleID,data.isSuccess)--记录教学关卡


    if data.isSuccess then
        --新手结束
        if GuideGroup:GetInstance().Runing or GuideWeakGroup:GetInstance().Runing  then
            DataManager:GetInstance():Broadcast(DataMessageNames.UIGuide_OverEvent)
        end
        if BattleID then
            GuideWeakCheckManager:GetInstance():GiveNoticeCustom(BattleID)
        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleSettlement,data)
        if(BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.NORMAL ) then
            MapData:GetInstance():PassLevel(BattleFieldManager:GetInstance().fightId,data.star)
        elseif  BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.GUIDE then
            MapData:GetInstance():PassLevel(BattleFieldManager:GetInstance().fightId ,data.star)
        elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.LUHUAGULOU then
            LuHuaGuLouData:GetInstance():UpdateReedTowerData()
        elseif BattleFieldManager:GetInstance().battleType == BattleEnum.BattleType.TEACHING then
            TeachPassData:GetInstance():UpdateHadFinishTeachPass(data.clearTeachChapterList)
            MapData:GetInstance():TeachingEnd()
            --elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.SOLO_ARENA then
        elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.CACODEMON then
            CacodemonData:GetInstance():UpdateEarningsTimes(data.yieldNum)
        elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.TESTHOARD then
            TestHoardData:GetInstance():OnPassLevel()
        elseif BattleFieldManager:GetInstance().battleType==BattleEnum.BattleType.BIOGRAPLY then
            BiographyData:GetInstance():OnPassLevel()
        end
        if not data.costItem._is_null then
            BackpackData:GetInstance():UpdateItemData(data.costItem.itemId,-data.costItem.count)
        end
        GuideManager:GetInstance():CheckLaunchGuide()
    else
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleSettlementFail,data)
    end
    self:OnDestroy(true)
end

local function SetTimeScaleMult(self,mult)
    self.message:Broadcast(BattleEnum.BattleMessage.SET_TIME_SCALE_MULT,mult)
end

--设置气泡在模型头上位置
local function SetDialogTipPos(self, dialog, entityId)
    if dialog == nil or entityId == nil then
        return
    end
    local role = nil
    for k, v in ipairs(self.battleView.roles) do
        if v.battlePosition==BattleEnum.BattlePosition.FRONT then
            if v.entity.entityId == entityId then
                role = v
            end
        end
    end
    local layer =  UIManager:GetInstance():GetLayer(UILayers.NormalLayer.Name)
    local pos = role.fxController:GetAnchorTrans(3).position
    local tagpos = {pos.x, pos.y, pos.z}
    local size_delta =  UIUtil.FindComponent(layer.transform,typeof(CS.UnityEngine.RectTransform)).sizeDelta
    local tagShowPos = GetUIPos(self, tagpos, size_delta)
    local tipText = UIUtil.FindText(dialog.transform,"Tip")
    if tagShowPos.x > 520 then
        tipText.transform.localScale = Vector3.New(-1,1,1)
        dialog.transform.localScale = Vector3.New(-1,1,1)
    else
        tipText.transform.localScale = Vector3.New(1,1,1)
        dialog.transform.localScale = Vector3.New(1,1,1)
    end
    dialog.transform.localPosition = Vector3.New(tagShowPos.x, tagShowPos.y, 0)
end

--更新气泡位置
local function UpdateDialogTipPos(self)
    if self.dialogTip ~= nil then
        SetDialogTipPos(self, self.dialogTip.dialog, self.dialogTip.entityId)
    end
    if self.monsterDialogTip ~= nil and #self.monsterDialogTip > 0 then
        for i = 1, #self.monsterDialogTip do
            if self.monsterDialogTip[i] ~= nil then
                SetDialogTipPos(self, self.monsterDialogTip[i].dialog, self.monsterDialogTip[i].entityId)
            end
        end
    end
end

--英雄头上提示气泡
local function ShowHeroDialogTip(self, isShow, showPos, showText)
    if not isShow then
        if self.dialogTipTimer ~= nil then
            self.dialogTipTimer:Stop()
            self.dialogTipTimer = nil
        end
        if self.dialogTip ~= nil then
            GameObjectPool:GetInstance():RecycleGameObject(BattleDialogTip, self.dialogTip.dialog)
            self.dialogTip = nil
        end
        return
    end
    if self.dialogTip == nil then
        GameObjectPool:GetInstance():GetGameObjectAsync(BattleDialogTip,function(go)
            if not IsNull(go) then
                if self.dialogTip ~= nil then
                    GameObjectPool:GetInstance():RecycleGameObject(BattleDialogTip,go)
                    return
                end

                local layer =  UIManager:GetInstance():GetLayer(UILayers.NormalLayer.Name)
                go.transform:SetParent(layer.transform)

                self.timerOver = function(self)
                    if self.dialogTipTimer ~= nil then
                        self.dialogTipTimer:Stop()
                        self.dialogTipTimer = nil
                    end
                    if self.dialogTip ~= nil then
                        GameObjectPool:GetInstance():RecycleGameObject(BattleDialogTip, self.dialogTip.dialog)
                        self.dialogTip = nil
                    end
                end

                self.timeRepeat = function(self)
                    local tipText = UIUtil.FindText(go.transform,"Tip")
                    tipText.text = showText
                    local showRole = nil
                    for k, v in ipairs(self.battleView.roles) do
                        if v.entity.playerType == BattleEnum.BattlePlayerType.MINE and v.battlePosition==BattleEnum.BattlePosition.FRONT then
                            if v.entity.position == showPos then
                                showRole = v
                            end
                        end
                    end
                    if showRole ~= nil then
                        self.dialogTip = {dialog = go, entityId = showRole.entity.entityId}
                        SetDialogTipPos(self, go)
                    end
                end
                self.timeRepeat(self)
                self.dialogTipTimer = TimerManager:GetInstance():GetTimer(DataUtil.GetData("global")[167].valueN,self.timerOver,self)
                self.dialogTipTimer:Start()
            end
        end)
    end
end

--怪物头上提示气泡
local function ShowMonsterDialogTip(self, isShow, entityId, showText)
    if self.monsterDialogTip == nil then
        self.monsterDialogTip = {}
    end
    if not isShow then
        while #self.monsterDialogTip > 0 do
            local curDialogTip = table.remove(self.monsterDialogTip)
            curDialogTip.entityId = nil
            GameObjectPool:GetInstance():RecycleGameObject(BattleDialogTip, curDialogTip.dialog)
        end
        return
    end
    GameObjectPool:GetInstance():GetGameObjectAsync(BattleDialogTip,function(go)
        if not IsNull(go) then
            local layer =  UIManager:GetInstance():GetLayer(UILayers.NormalLayer.Name)
            go.transform:SetParent(layer.transform)
            local tipText = UIUtil.FindText(go.transform,"Tip")
            tipText.text = showText
            local showRole = nil
            for k, v in ipairs(self.battleView.roles) do
                if v.battlePosition==BattleEnum.BattlePosition.FRONT then
                    if v.entity.entityId == entityId then
                        showRole = v
                        break
                    end
                end
            end
            if showRole ~= nil then
                table.insert(self.monsterDialogTip, {dialog = go, entityId = showRole.entity.entityId})
                SetDialogTipPos(self, go, entityId)
            end
        end
    end)
end

--判断该位置的怪物是否存在
local function MonsterIsAliveByPos(self, pos)
    for k, v in ipairs(self.battleView.roles) do
        if v.entity.playerType == BattleEnum.BattlePlayerType.ENEMY and v.battlePosition==BattleEnum.BattlePosition.FRONT then
            if v.entity.position == pos then
                return v.transform.position
            end
        end
    end
    return false
end

--自己英雄脚下方向箭头
local function ShowHeroDirectionTip(self, isShow)
    for k, v in ipairs(self.battleView.roles) do
        if v.entity.playerType == BattleEnum.BattlePlayerType.MINE then
            local fowardPos = Vector3.zero
            local order = nil
            if v.entity.position == 0 then
                order = {0, 1, 2}
            elseif v.entity.position == 1 then
                order = {2, 0, 1}
            elseif v.entity.position == 2 then
                order = {1, 0, 2}
            end
            for m, n in ipairs(order) do
                local result = MonsterIsAliveByPos(self, n)
                if result ~= false then
                    fowardPos = result
                    break
                end
            end
            v:ShowDirectionEffect(isShow and v.battlePosition==BattleEnum.BattlePosition.FRONT, fowardPos)
        end
    end
end

--更新释放召唤和绝技状态
local function ShowPowerTip(self, type, pos, isShow)
    for k, v in ipairs(self.battleView.roles) do
        if v.entity.playerType == BattleEnum.BattlePlayerType.MINE and v.battlePosition==BattleEnum.BattlePosition.FRONT then
            if v.entity.position == pos then
                if type == 1 then
                    v:ShowPowerEffect(isShow)
                else
                    v:ShowEdgeLight(isShow)
                end
                break
            end
        end
    end
end



--设置是否简化动画状态
local function SetSimpleThreeState(self, state)
    self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYSIMPLETHREESTATE,state)
end
--播放剧情
local function PlayStory(self,msgId,posId,func)
    self.message:Broadcast(BattleEnum.BattleMessage.NOTIFYSPLAYSTORY,msgId,posId,func)
end

local function AddListener(self)
    self.func = {false,false,false}
    self.func[1] = Bind(self,ShowRoundTip)
    self.func[2] = Bind(self,HideTeamTip)
    self.func[3] = Bind(self,SelectSkill)
    self.func[4] = Bind(self,ShowBlood)
    self.func[5] = Bind(self,HideAllBlood)
    self.func[6] = Bind(self,QuitBattle)
    self.func[7] = Bind(self,GetRoleData)
    self.func[8] = Bind(self,ShowAllBlood)
    self.func[9] = Bind(self,CancelSelectSkill)
    self.func[10] = Bind(self,EmBattleStart)
    self.func[11] = Bind(self,RoundUIFinish)
    self.func[12] = Bind(self,PlayBattleBeginEffect)
    self.func[13] = Bind(self,PlayBattleEnemyShowEffect)
    self.func[14] = Bind(self,RefreshAllBloodCry)
    self.func[15] = Bind(self,SetTimeScaleMult)
    self.func[16] = Bind(self,ShowHeroDialogTip)
    self.func[17] = Bind(self,SetSimpleThreeState)
    self.func[18] = Bind(self,PlayStory)
    self.func[19] = Bind(self,ShowMonsterDialogTip)
    self.func[20] = Bind(self,ShowHeroDirectionTip)
    self.func[21] = Bind(self,ShowPowerTip)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUIRESULTBEGIN,BattleEndBegin,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUIRESULT,BattleEnd,self)
    --self.message:AddListener(BattleEnum.BattleMessage.NOTIFYHIDEUI,HideBattleUI,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUICOMBO,ComboTip,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUICUTIN,CreateCuteIn,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUICHANGEHP,CreateHurtText,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYINITPASSBLOOD,HeroBloodData,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYSPECIALBLOOD,ShowSpecialBlood,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYOPENEMBATTLEUI,InitEmBattleUi,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUISELECTSKILL,SelectSkillCallBack,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUICRYCHANGE,CrystalChange,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYROUNDDATATOUI,RoundUIData,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYROUNDDATASWITCH,SwitchHero,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYPAUSE,ShowTeamTip,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUIHIDETYPE,HideBattleUIByType,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYUIROLEDATA,BackRoleData,self)
    self.message:AddListener(BattleEnum.BattleMessage.SOMEONE_START_SKILL,SkillStartEvent,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYPLAYERDROPCRY,PlayerDropCry,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYEFFECTTIP,ShowSkillEffectName,self)
    self.message:AddListener(BattleEnum.BattleMessage.NOTIFYCRYFLY,DropCryFly,self)
    DataManager:GetInstance():AddListener(DataMessageNames.ON_UIEMBATTLE_START, self.func[10])
    DataManager:GetInstance():AddListener(DataMessageNames.ON_UIBATTLE_IN_START, self.func[11])
    DataManager:GetInstance():AddListener(DataMessageNames.ON_UIBATTLE_START_EFFECT, self.func[12])
    DataManager:GetInstance():AddListener(DataMessageNames.ON_UIBATTLE_ENEMY_EFFECT, self.func[13])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_TEAM_TIP_SHOW,self.func[1])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_TEAM_TIP_HIDE, self.func[2])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_SELECT_SKILL, self.func[3])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_SHOW_BLOOD, self.func[4])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_HIDE_All_BLOOD, self.func[5])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_QUIT, self.func[6])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_GET_ROLE_DATA, self.func[7])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_SHOW_ALL_BLOOD, self.func[8])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_CANCEL_SKILL, self.func[9])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_REFRESH_BLOOD_CRY, self.func[14])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_SET_TIME_SCALE_MULT, self.func[15])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_HERO_DIALOG_TIP, self.func[16])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_SIMPLE_THREE_STATE, self.func[17])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_PLAY_STORY, self.func[18])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_MONSTER_DIALOG_TIP, self.func[19])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_HERO_DIRECTION_TIP, self.func[20])
    UIManager:GetInstance():AddListener(UIMessageNames.UIBATTLE_HERO_POWER_TIP, self.func[21])
    self.addDataListener = true
    --DataManager:GetInstance():AddListener(DataMessageNames.ON_UIBATTLE_IN_START, CreateHurtText,self)
    --DataManager:GetInstance():AddListener(DataMessageNames.ON_UIBATTLE_IN_START, ShowBlood,self)
end

local function RemoveDataListener(self)
    if self.addDataListener then
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUIRESULTBEGIN,BattleEndBegin,self)
        --self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYHIDEUI,HideBattleUI,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUICOMBO,ComboTip,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUICUTIN,CreateCuteIn,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUICHANGEHP,CreateHurtText,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYINITPASSBLOOD,HeroBloodData,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYSPECIALBLOOD,ShowSpecialBlood,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYOPENEMBATTLEUI,InitEmBattleUi)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUISELECTSKILL,SelectSkillCallBack,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUICRYCHANGE,CrystalChange,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYROUNDDATATOUI,RoundUIData)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYROUNDDATASWITCH,SwitchHero,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYPAUSE,ShowTeamTip,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUIHIDETYPE,HideBattleUIByType,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUIROLEDATA,BackRoleData,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.SOMEONE_START_SKILL,SkillStartEvent,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYPLAYERDROPCRY,PlayerDropCry,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYEFFECTTIP,ShowSkillEffectName,self)
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYCRYFLY,DropCryFly,self)
        self.addDataListener = false
    end
end

local function RemoveListener(self)
    if self.func ~= nil then
        self.message:RemoveListener(BattleEnum.BattleMessage.NOTIFYUIRESULT,BattleEnd,self)
        DataManager:GetInstance():RemoveListener(DataMessageNames.ON_UIEMBATTLE_START, self.func[10])
        DataManager:GetInstance():RemoveListener(DataMessageNames.ON_UIBATTLE_IN_START,self.func[11])
        DataManager:GetInstance():RemoveListener(DataMessageNames.ON_UIBATTLE_START_EFFECT, self.func[12])
        DataManager:GetInstance():RemoveListener(DataMessageNames.ON_UIBATTLE_ENEMY_EFFECT, self.func[13])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_TEAM_TIP_SHOW,self.func[1])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_TEAM_TIP_HIDE, self.func[2])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_SELECT_SKILL, self.func[3])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_SHOW_BLOOD, self.func[4])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_HIDE_All_BLOOD, self.func[5])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_QUIT, self.func[6])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_GET_ROLE_DATA, self.func[7])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_SHOW_ALL_BLOOD, self.func[8])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_CANCEL_SKILL, self.func[9])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_REFRESH_BLOOD_CRY, self.func[14])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_SET_TIME_SCALE_MULT, self.func[15])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_HERO_DIALOG_TIP, self.func[16])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_SIMPLE_THREE_STATE, self.func[17])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_PLAY_STORY, self.func[18])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_MONSTER_DIALOG_TIP, self.func[19])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_HERO_DIRECTION_TIP, self.func[20])
        UIManager:GetInstance():RemoveListener(UIMessageNames.UIBATTLE_HERO_POWER_TIP, self.func[21])
        self.func = nil
    end
end

--初始化
local function OnInit(self,message)
    self.message = message
    self.hurt_text = {}
    self.blood_data = {}
    AddListener(self)
    self.updateDialogTimer = TimerManager:GetInstance():GetTimer(0.1, self.UpdateDialogTipPos , self)
    self.updateDialogTimer:Start()
end

local function OnDestroy(self,no_remove_lis)
    ClearHurtText(self)
    ClearBlood(self)
    DropCryFly(self,false)
    if not no_remove_lis then
        RemoveListener(self)
        RemoveDataListener(self)
    end
    HideTeamTip(self)
    if self.updateDialogTimer ~= nil then
        self.updateDialogTimer:Stop()
    end
    self.updateDialogTimer = nil
    ShowHeroDialogTip(self, false)
    ShowMonsterDialogTip(self, false)
    if self.combo_data ~= nil  then
        if self.combo_data.args then
            TimerManager:GetInstance():SimpleTimerStop(self.combo_data.args)
            HideComboTip(self)
        end
        self.combo_data = nil
    end
end
--BattleUIManager.CreateHurtText = CreateHurtText
BattleUIManager.UpdateDialogTipPos = UpdateDialogTipPos
BattleUIManager.RemoveDataListener = RemoveDataListener
BattleUIManager.OnInit = OnInit
BattleUIManager.SetBattlePlayerManager = SetBattlePlayerManager
BattleUIManager.OnDestroy = OnDestroy
return BattleUIManager