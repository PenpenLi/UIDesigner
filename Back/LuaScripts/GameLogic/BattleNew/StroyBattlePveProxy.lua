---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/12/12 17:29
---
require "GameLogic.BattleNew.BattleEnum"

local OneBattle=require "GameLogic.BattleNew.Logic.StoryOneBattle"
local BattleNetManager=require "GameLogic.BattleNew.Logic.Manager.StoryBattleNetManager"
local Messenger = require "Framework.Common.Messenger"
local BattleUIManager = require "GameLogic.BattleNew.Logic.Manager.BattleUIManager"
local BattleViewContext=require"GameLogic.BattleNew.View.BattleViewContext"
--Pvp战斗总控
local StroyBattlePveProxy=BaseClass("StroyBattlePveProxy",Updatable)
local function __init(self)
    --战斗UI
    self.battleUIManager=nil
    --事件通信
    self.battleMessage=nil
    --网络模块
    self.netManager=nil
    --战斗逻辑层
    self.oneBattle=nil
    --表现层
    self.battleViewContext=nil

    --状态
    self.currentState=nil
end





local function OnInit(self,battlePackages,scene_mask_col,cam_time,ctrl_trans,story_end,battle_cache,start_package)
    self.cam_time = cam_time
    self.battleMessage=Messenger.New()
    self.battleUIManager = BattleUIManager.New()
    self.battleUIManager:OnInit(self.battleMessage)
    self.netManager=BattleNetManager.New()
    local myTeam = start_package.myTeam
    local myGuard =  start_package.myGuard
    self.oneBattle=OneBattle.New()
    self.battleViewContext=BattleViewContext.New()
    self.battleViewContext:OnInit(self.battleMessage,self.oneBattle,scene_mask_col,ctrl_trans,battle_cache)
    --初始化剧情触发器
    local triggerType = StoryConstConfig.StoryTrigger.Battle
    local storyTrigger = triggerType.Type.New()
    local triggerInitRes = storyTrigger:CreateTriggers(self.battleViewContext)
    if not triggerInitRes then
        Logger.Log("StoryConstConfig.StoryTrigger.Battle create faild")
        storyTrigger = nil
    end
    self.oneBattle:OnInit(self.battleMessage,myTeam,myGuard,battlePackages,self.netManager,storyTrigger,story_end)
    self.battleUIManager:SetBattlePlayerManager(self.oneBattle.battlePlayerManager,self.battleViewContext.battleRoleViewManager)
    self.currentState = BattleEnum.LogicState.BATTLE

end



local function Update(self)
    if self.currentState==BattleEnum.LogicState.BATTLE then
        self.battleViewContext:Update()
    end
end

local function OnDestroy(self)
    if self.oneBattle ~= nil then
        self.oneBattle:OnDestroy()
    end
    if self.battleMessage ~= nil then
        self.battleMessage:Cleanup()
    end
    if self.battleUIManager ~= nil then
        self.battleUIManager:OnDestroy()
    end
    if self.battleViewContext ~= nil then
        self.battleViewContext:OnDestroy()
    end
end



local function SetControlCamera(self,ctrl_trans)
    self.ctrl_cam_trans = ctrl_trans
end



StroyBattlePveProxy.__init=__init
StroyBattlePveProxy.OnInit=OnInit
StroyBattlePveProxy.Update=Update
StroyBattlePveProxy.OnDestroy=OnDestroy
StroyBattlePveProxy.SetControlCamera = SetControlCamera

return StroyBattlePveProxy