---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2018/11/20 14:35
---
local BattleCameraManager=BaseClass("BattleCameraManager")
local battle_pos = Vector3.New(17.74,8.2,-11.86)
local battle_elur = Quaternion.Euler(19.8,-55.9,0)
local skill_elur =  Quaternion.Euler(15,310,0)
local battle_fov = 25
local skill_fov = 25
local battle_scene_mask_1 = "Art/EffectRes/Textures/FX_tex_skybox01.png"
local function __init(self)
    --所属战斗
    self.viewContext=nil
    --控制相机
    self.camera = nil
    self.cam_trans = nil
    --原相机位置
    --self.final_col = {35/255,0,35/255,165/255}
    self.final_col = {0,0,0,0.647}
    --self.camLayerMask = CS.UnityEngine.LayerMask.GetMask("Default", "Charactor");
end

--修改相机
local function ChangeCtrlCam(self,state,time)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIEMBATTLE_CHANGE__CAM,state,time)
end

local function OnInit(self,viewContext,scene_mask_col,vir_cam)
    self.viewContext=viewContext
    self.camera = CS.UnityEngine.Camera.main
    self.cam_trans = self.camera.transform
    if scene_mask_col ~= nil then
        self.final_col = scene_mask_col
    end
    self.vir_cam = vir_cam
    self.vir_trans = vir_cam.transform
    local old_pos = self.vir_trans.localPosition
    local old_euler = self.vir_trans.localRotation
    self.init_data = {old_pos,old_euler,self.vir_cam.m_Lens.FieldOfView}
end


local function CoverInit(self)
    if self.change_cam  then
        self.vir_trans.localPosition = self.init_data[1]
        self.vir_trans.localRotation = self.init_data[2]
        local len_setting = self.vir_cam.m_Lens
        len_setting.FieldOfView =  self.init_data[3]
        self.vir_cam.m_Lens = len_setting
        self.change_cam = false
    end

    ChangeCtrlCam(self,1,0.67)
end

local function PveCallEndAnim(self)
    self.vir_trans.position = self.cam_trans.position
    self.vir_trans.eulerAngles = self.cam_trans.eulerAngles
    local cur_fov = self.camera.fieldOfView
    local len_setting = self.vir_cam.m_Lens
    len_setting.FieldOfView =  cur_fov
    self.vir_cam.m_Lens = len_setting
    local old_pos = self.vir_trans.localPosition
    local old_euler = self.vir_trans.localRotation
    if self.move_flag ~= nil then
        LuaTweener.StopTweener(self.move_flag)
        self.move_flag = nil
    end
    if self.fov_flag ~= nil then
        LuaTweener.StopTweener(self.fov_flag)
        self.fov_flag = nil
    end
    if self.rotate_flag ~= nil then
        LuaTweener.StopTweener(self.rotate_flag)
        self.rotate_flag = nil
    end
    LuaTweener.TransMoveTo(self.vir_trans,old_pos,battle_pos,0.3,EaseFormula.Linear,nil,true)
    LuaTweener.RotateTo(self.vir_trans,old_euler,battle_elur,0.3,EaseFormula.Linear,nil,true)
    LuaTweener.VCamFovTo(self.vir_cam,cur_fov,battle_fov,0.3,EaseFormula.Linear,nil)
end

local function PveActionCloserRole(self,func)
    local old_pos = self.vir_trans.localPosition
    local old_euler = self.vir_trans.localRotation
    self.change_cam = true
    --local offset = to_pos - old_pos
    LuaTweener.TransMoveTo(self.vir_trans,old_pos,battle_pos,0.3,EaseFormula.Linear,function()
        ChangeCtrlCam(self,3)
        if func ~= nil then
            func()
        end
    end,true)
    LuaTweener.RotateTo(self.vir_trans,old_euler,battle_elur,0.3,EaseFormula.Linear,nil,true)
    LuaTweener.VCamFovTo(self.vir_cam,self.vir_cam.m_Lens.FieldOfView,battle_fov,0.3,EaseFormula.Linear,nil)
end

local function SkillCloserRole(self,pos,time)
    ChangeCtrlCam(self,1)
    self.vir_trans.position = self.cam_trans.position
    self.vir_trans.eulerAngles = self.cam_trans.eulerAngles
    local cur_fov = self.camera.fieldOfView
    local len_setting = self.vir_cam.m_Lens
    len_setting.FieldOfView =  cur_fov
    self.vir_cam.m_Lens = len_setting
    local old_pos = self.vir_trans.localPosition
    local old_euler = self.vir_trans.localRotation
    self.move_flag = LuaTweener.TransMoveTo(self.vir_trans,old_pos,pos,time,EaseFormula.OutQuart,function()
        self.move_flag = nil
    end,true)
    self.rotate_flag = LuaTweener.RotateTo(self.vir_trans,old_euler,skill_elur,time,EaseFormula.OutQuart,function()
        self.rotate_flag = nil
    end,true)
    if cur_fov ~= skill_fov then
       self.fov_flag = LuaTweener.VCamFovTo(self.vir_cam,cur_fov,skill_fov,time,EaseFormula.OutQuart,function()
            self.fov_flag = nil
        end)
    end
end

local function CameraMaskAnim(self,from_alpha,to_alpha,time,esay_type,func,col)
    if self.cam_mask_timer ~= nil then
        TimerManager:GetInstance():SimpleTimerStop(self.cam_mask_timer)
        self.cam_mask_timer = nil
    end
    self.cam_mask_timer = TimerManager:GetInstance():SimpleTimerArgs(1,function(args)
        local interval_time=Time.time-args[1];
        if interval_time > args[4] then
            TimerManager:GetInstance():SimpleTimerStop(self.cam_mask_timer)
            self.cam_mask_timer = nil
            if args[6] ~= nil then
                args[6]()
            end
            if args[3] == 0 then
                CS.CamMaskUtilities.SetOverridePPWeight(0);
            else
                CS.CamMaskUtilities.SetOverridePPWeight(1);
            end
            CS.CamMaskUtilities.SetMaskColor(Color.New(col[1],col[2],col[3],args[3]),0);
        else
            local percent=EaseFormula:Evaluate(interval_time,args[4],args[5]);
            local alpha = args[2]+(args[3]-args[2])*percent
            CS.CamMaskUtilities.SetMaskColor(Color.New(col[1],col[2],col[3],alpha),0);
            if args[3] == 0 then
                CS.CamMaskUtilities.SetOverridePPWeight(1-percent);
            else
                CS.CamMaskUtilities.SetOverridePPWeight(percent);
            end

        end
    end ,{Time.time,from_alpha,to_alpha,time,esay_type,func},false,true)
end

local function CameraBackgroudMaskAnim(self,from_alpha,to_alpha,time,esay_type,func)
    if self.cam_back_mask_timer ~= nil then
        TimerManager:GetInstance():SimpleTimerStop(self.cam_back_mask_timer)
        self.cam_back_mask_timer = nil
    end
    ResourcesManager:GetInstance():LoadAsync(battle_scene_mask_1,typeof(CS.UnityEngine.Cubemap),function(cube_map)
        self.cam_back_mask_timer = TimerManager:GetInstance():SimpleTimerArgs(1,function(args)
            local interval_time=Time.time-args[1];
            if interval_time > args[4] then
                TimerManager:GetInstance():SimpleTimerStop(self.cam_back_mask_timer)
                self.cam_back_mask_timer = nil
                if args[6] ~= nil then
                    args[6]()
                end
                CS.CamMaskUtilities.SetBackground(cube_map,Color.New(1,1,1,args[3]));
            else
                local percent=EaseFormula:Evaluate(interval_time,args[4],args[5]);
                local alpha = args[2]+(args[3]-args[2])*percent
                CS.CamMaskUtilities.SetBackground(cube_map,Color.New(1,1,1,alpha));
            end
        end ,{Time.time,from_alpha,to_alpha,time,esay_type,func},false,true)
    end)
end

local function CameraBackgroudMask(self,type)
    if type == 1 then
        CameraBackgroudMaskAnim(self,0,1,0.3,EaseFormula.OutQuad)
    elseif type == 0 then
        CameraBackgroudMaskAnim(self,1,0,0.2,EaseFormula.InQuad)
    else
        ResourcesManager:GetInstance():LoadAsync(battle_scene_mask_1,typeof(CS.UnityEngine.Cubemap),function(cube_map)
            CS.CamMaskUtilities.SetBackground(cube_map,Color.New(1,1,1,0))
        end)
        CS.CamMaskUtilities.HideBackground();
    end
end

local function CameraMaskAction(self,type,isskill,func)
    if type == 1 then
        if isskill == 1 then
            CameraMaskAnim(self,0,self.final_col[4],0.3,EaseFormula.OutQuad,func,self.final_col)
        else
            CameraMaskAnim(self,0,1,0.3,EaseFormula.OutQuad,func,{0,0,0})
        end
    elseif type == 0 then
        if isskill == 1 then
            CameraMaskAnim(self,self.final_col[4],0,0.2,EaseFormula.InQuad,func,self.final_col)
        else
            CameraMaskAnim(self,1,0,0.2,EaseFormula.InQuad,func,{0,0,0})
        end
    else
        if self.cam_mask_timer ~= nil then
            TimerManager:GetInstance():SimpleTimerStop(self.cam_mask_timer)
            self.cam_mask_timer = nil
        end
        if self.cam_mask_type >= 0 then
            CS.CamMaskUtilities.SetOverridePPWeight(0);
            CS.CamMaskUtilities.SetMaskColor(Color.New(0,0,0,0),0);
        end
    end
    self.cam_mask_type = type
end
BattleCameraManager.SkillCloserRole = SkillCloserRole
BattleCameraManager.CameraBackgroudMask = CameraBackgroudMask
BattleCameraManager.CameraMaskAction = CameraMaskAction
BattleCameraManager.PveCallEndAnim = PveCallEndAnim
BattleCameraManager.PveActionCloserRole = PveActionCloserRole
BattleCameraManager.OnInit = OnInit
BattleCameraManager.CoverInit = CoverInit
BattleCameraManager.ChangeCtrlCam = ChangeCtrlCam
BattleCameraManager.__init=__init
return BattleCameraManager