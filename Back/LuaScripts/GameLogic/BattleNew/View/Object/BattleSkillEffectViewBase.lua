---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by guoyu.
--- DateTime: 2019/2/26 17:52
---
local BattleSkillEffectViewBase=BaseClass("BattleSkillEffectViewBase")

local function __init(self)
    --Id
    self.Id=0
    --自身gameObject
    self.gameObject=nil
    --自身transform
    self.transform=nil
    --所属roleView
    self.owner=nil
    --特效播放组件
    self.fxLogic=nil
    --跟随类型
    self.followType=nil
    --跟随物体
    self.followTransform=nil
    --缓存路径
    self.path=nil
    --缩放
    self.scale=nil
    --是否开启更新
    self.isUpdate = false
    --特效唯一id
    self.effectId = 0
end

local function CalcRenderLayer(oldLayer)
    if oldLayer >= 3510 then
        return oldLayer
    end
    return 3510 + math.max(0,oldLayer-2000)/5
end

local function GetOldLyaer(layer)
    if layer < 3510 then
        return layer
    end
    return (layer - 3510) * 5 + 2000
end


--特效提层
local function SetRenderQueueTop(self,isTop)
    if not IsNull(self.gameObject) then
        if self.topRenderer == nil then
            self.topRenderer = self.gameObject:GetComponentsInChildren(typeof(CS.UnityEngine.Renderer), true)
        end
        if self.topRenderer ~= nil then
            for i = 0, self.topRenderer.Length - 1 do
                local mats = self.topRenderer[i].materials
                if mats ~= nil then
                    for j = 0, mats.Length - 1 do
                        if isTop then
                            mats[j].renderQueue =CalcRenderLayer(mats[j].renderQueue)
                        else
                            mats[j].renderQueue =GetOldLyaer(mats[j].renderQueue)
                        end
                    end
                end
            end
        end
    end
end

local function OnInit(self,Id,config,gameObject,owner,effectId)
    if self.destroy then
        Logger.LogError("提示  添加后立刻又被销毁了")
        GameObjectPool:GetInstance():RecycleGameObject(config.prefab_Name,gameObject)
        return
    end
    self.Id=Id
    self.effectId = effectId
    self.gameObject=gameObject
    self.transform=self.gameObject.transform
    self.fxLogic = self.transform:GetComponentInChildren(typeof(CS.ZHJ.Battle.CommonFxLogic));
    self.owner=owner
    self.path= config.prefab_Name
    self.followType=config.follow_Type
    local guadian=self.owner.fxController:GetAnchorTrans(config.FxPosId)
    self.followTransform=guadian
    self.transform.position=guadian.position
        --self.transform.eulerAngles=guadian.eulerAngles
    self:SetScale(self.owner.roleConfig.PrefabZoom)
    self.isUpdate = true
    SetRenderQueueTop(self,true)
end

local function SetScale(self,scale)
    if self.fxLogic ~= nil then
        self.fxLogic:SetScale(scale)
    end
end

local function Play(self)
    if self.fxLogic ~= nil then
        self.fxLogic:OnPlay()
    end
end

local function Pause(self)
    if self.fxLogic ~= nil then
        self.fxLogic:OnPause()
    end
end

local function Resume(self)
    if self.fxLogic ~= nil then
        self.fxLogic:OnResume()
    end
end

local function End(self)
    if self.fxLogic ~= nil then
        self.fxLogic:OnEnd()
    end
end

local function Update(self)
    if self.isUpdate then
        if self.followType==BattleEnum.EffectViewFollowType.NONE then

        elseif    self.followType==BattleEnum.EffectViewFollowType.ONLYPOSITION then
            self.transform.position = self.followTransform.position;
        elseif    self.followType==BattleEnum.EffectViewFollowType.COMPLETELY then
            self.transform.position = self.followTransform.position;
            self.transform.rotation = self.followTransform.rotation;
        end
    end

end


local function AddUpdate(self)
    if self.followType ~= BattleEnum.EffectViewFollowType.NONE and  self.Update ~= nil then
        self.__update_handle = UpdateBeat:CreateListener(self.Update, self)
        UpdateBeat:AddListener(self.__update_handle)
    end
end

local function RemoveUpdate(self)
    if self.__update_handle ~= nil then
        UpdateBeat:RemoveListener(self.__update_handle)
        self.__update_handle = nil
    end
end

local function ShowAndHideEffect(self,_active)
    if self.gameObject ~= nil then
        self.gameObject:SetActive(_active)
        self.isUpdate = _active
    end
end

local function OnRefresh(self)

end
local function OnDestroy(self)
    SetRenderQueueTop(self,false)
    RemoveUpdate(self)
    if not IsNull(self.owner) then
        table.removebyvalue(self.owner.effectViews,self)
    end
    if not IsNull(self.gameObject) then
        GameObjectPool:GetInstance():RecycleGameObject(self.path,self.gameObject)
    end
    self.destroy = true
end






BattleSkillEffectViewBase.__init=__init
BattleSkillEffectViewBase.ShowAndHideEffect = ShowAndHideEffect
BattleSkillEffectViewBase.OnInit=OnInit
BattleSkillEffectViewBase.Update=Update
BattleSkillEffectViewBase.OnDestroy=OnDestroy
BattleSkillEffectViewBase.Play=Play
BattleSkillEffectViewBase.Pause=Pause
BattleSkillEffectViewBase.Resume=Resume
BattleSkillEffectViewBase.End=End
BattleSkillEffectViewBase.OnRefresh=OnRefresh
BattleSkillEffectViewBase.SetScale=SetScale
BattleSkillEffectViewBase.AddUpdate=AddUpdate
BattleSkillEffectViewBase.RemoveUpdate = RemoveUpdate
return BattleSkillEffectViewBase